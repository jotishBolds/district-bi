
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model CitizenProfile
 * 
 */
export type CitizenProfile = $Result.DefaultSelection<Prisma.$CitizenProfilePayload>
/**
 * Model OfficerProfile
 * 
 */
export type OfficerProfile = $Result.DefaultSelection<Prisma.$OfficerProfilePayload>
/**
 * Model ServiceCategory
 * 
 */
export type ServiceCategory = $Result.DefaultSelection<Prisma.$ServiceCategoryPayload>
/**
 * Model Application
 * 
 */
export type Application = $Result.DefaultSelection<Prisma.$ApplicationPayload>
/**
 * Model ApplicationWorkflow
 * 
 */
export type ApplicationWorkflow = $Result.DefaultSelection<Prisma.$ApplicationWorkflowPayload>
/**
 * Model ApplicationValidation
 * 
 */
export type ApplicationValidation = $Result.DefaultSelection<Prisma.$ApplicationValidationPayload>
/**
 * Model OfficerAssignment
 * 
 */
export type OfficerAssignment = $Result.DefaultSelection<Prisma.$OfficerAssignmentPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model DocumentRequest
 * 
 */
export type DocumentRequest = $Result.DefaultSelection<Prisma.$DocumentRequestPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model ApplicationAuditLog
 * 
 */
export type ApplicationAuditLog = $Result.DefaultSelection<Prisma.$ApplicationAuditLogPayload>
/**
 * Model DailyReport
 * 
 */
export type DailyReport = $Result.DefaultSelection<Prisma.$DailyReportPayload>
/**
 * Model SystemSetting
 * 
 */
export type SystemSetting = $Result.DefaultSelection<Prisma.$SystemSettingPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  CITIZEN: 'CITIZEN',
  FRONT_DESK: 'FRONT_DESK',
  DC: 'DC',
  ADC: 'ADC',
  RO: 'RO',
  SDM: 'SDM',
  DYDIR: 'DYDIR',
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const ApplicationStatus: {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  VALIDATED: 'VALIDATED',
  IN_PROGRESS: 'IN_PROGRESS',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED'
};

export type ApplicationStatus = (typeof ApplicationStatus)[keyof typeof ApplicationStatus]


export const DocumentType: {
  ID_PROOF: 'ID_PROOF',
  ADDRESS_PROOF: 'ADDRESS_PROOF',
  APPLICATION_FORM: 'APPLICATION_FORM',
  SUPPORTING_DOCUMENT: 'SUPPORTING_DOCUMENT',
  PAYMENT_RECEIPT: 'PAYMENT_RECEIPT'
};

export type DocumentType = (typeof DocumentType)[keyof typeof DocumentType]


export const NotificationType: {
  APPLICATION_SUBMITTED: 'APPLICATION_SUBMITTED',
  STATUS_CHANGED: 'STATUS_CHANGED',
  DOCUMENT_REQUESTED: 'DOCUMENT_REQUESTED',
  PAYMENT_REQUIRED: 'PAYMENT_REQUIRED'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type ApplicationStatus = $Enums.ApplicationStatus

export const ApplicationStatus: typeof $Enums.ApplicationStatus

export type DocumentType = $Enums.DocumentType

export const DocumentType: typeof $Enums.DocumentType

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.citizenProfile`: Exposes CRUD operations for the **CitizenProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CitizenProfiles
    * const citizenProfiles = await prisma.citizenProfile.findMany()
    * ```
    */
  get citizenProfile(): Prisma.CitizenProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.officerProfile`: Exposes CRUD operations for the **OfficerProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OfficerProfiles
    * const officerProfiles = await prisma.officerProfile.findMany()
    * ```
    */
  get officerProfile(): Prisma.OfficerProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serviceCategory`: Exposes CRUD operations for the **ServiceCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceCategories
    * const serviceCategories = await prisma.serviceCategory.findMany()
    * ```
    */
  get serviceCategory(): Prisma.ServiceCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.application`: Exposes CRUD operations for the **Application** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.application.findMany()
    * ```
    */
  get application(): Prisma.ApplicationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.applicationWorkflow`: Exposes CRUD operations for the **ApplicationWorkflow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApplicationWorkflows
    * const applicationWorkflows = await prisma.applicationWorkflow.findMany()
    * ```
    */
  get applicationWorkflow(): Prisma.ApplicationWorkflowDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.applicationValidation`: Exposes CRUD operations for the **ApplicationValidation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApplicationValidations
    * const applicationValidations = await prisma.applicationValidation.findMany()
    * ```
    */
  get applicationValidation(): Prisma.ApplicationValidationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.officerAssignment`: Exposes CRUD operations for the **OfficerAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OfficerAssignments
    * const officerAssignments = await prisma.officerAssignment.findMany()
    * ```
    */
  get officerAssignment(): Prisma.OfficerAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documentRequest`: Exposes CRUD operations for the **DocumentRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentRequests
    * const documentRequests = await prisma.documentRequest.findMany()
    * ```
    */
  get documentRequest(): Prisma.DocumentRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.applicationAuditLog`: Exposes CRUD operations for the **ApplicationAuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApplicationAuditLogs
    * const applicationAuditLogs = await prisma.applicationAuditLog.findMany()
    * ```
    */
  get applicationAuditLog(): Prisma.ApplicationAuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dailyReport`: Exposes CRUD operations for the **DailyReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailyReports
    * const dailyReports = await prisma.dailyReport.findMany()
    * ```
    */
  get dailyReport(): Prisma.DailyReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemSetting`: Exposes CRUD operations for the **SystemSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemSettings
    * const systemSettings = await prisma.systemSetting.findMany()
    * ```
    */
  get systemSetting(): Prisma.SystemSettingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    CitizenProfile: 'CitizenProfile',
    OfficerProfile: 'OfficerProfile',
    ServiceCategory: 'ServiceCategory',
    Application: 'Application',
    ApplicationWorkflow: 'ApplicationWorkflow',
    ApplicationValidation: 'ApplicationValidation',
    OfficerAssignment: 'OfficerAssignment',
    Document: 'Document',
    DocumentRequest: 'DocumentRequest',
    Notification: 'Notification',
    ApplicationAuditLog: 'ApplicationAuditLog',
    DailyReport: 'DailyReport',
    SystemSetting: 'SystemSetting',
    VerificationToken: 'VerificationToken'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "citizenProfile" | "officerProfile" | "serviceCategory" | "application" | "applicationWorkflow" | "applicationValidation" | "officerAssignment" | "document" | "documentRequest" | "notification" | "applicationAuditLog" | "dailyReport" | "systemSetting" | "verificationToken"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      CitizenProfile: {
        payload: Prisma.$CitizenProfilePayload<ExtArgs>
        fields: Prisma.CitizenProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CitizenProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CitizenProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenProfilePayload>
          }
          findFirst: {
            args: Prisma.CitizenProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CitizenProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenProfilePayload>
          }
          findMany: {
            args: Prisma.CitizenProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenProfilePayload>[]
          }
          create: {
            args: Prisma.CitizenProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenProfilePayload>
          }
          createMany: {
            args: Prisma.CitizenProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CitizenProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenProfilePayload>[]
          }
          delete: {
            args: Prisma.CitizenProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenProfilePayload>
          }
          update: {
            args: Prisma.CitizenProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenProfilePayload>
          }
          deleteMany: {
            args: Prisma.CitizenProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CitizenProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CitizenProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenProfilePayload>[]
          }
          upsert: {
            args: Prisma.CitizenProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CitizenProfilePayload>
          }
          aggregate: {
            args: Prisma.CitizenProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCitizenProfile>
          }
          groupBy: {
            args: Prisma.CitizenProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<CitizenProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.CitizenProfileCountArgs<ExtArgs>
            result: $Utils.Optional<CitizenProfileCountAggregateOutputType> | number
          }
        }
      }
      OfficerProfile: {
        payload: Prisma.$OfficerProfilePayload<ExtArgs>
        fields: Prisma.OfficerProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OfficerProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OfficerProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerProfilePayload>
          }
          findFirst: {
            args: Prisma.OfficerProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OfficerProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerProfilePayload>
          }
          findMany: {
            args: Prisma.OfficerProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerProfilePayload>[]
          }
          create: {
            args: Prisma.OfficerProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerProfilePayload>
          }
          createMany: {
            args: Prisma.OfficerProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OfficerProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerProfilePayload>[]
          }
          delete: {
            args: Prisma.OfficerProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerProfilePayload>
          }
          update: {
            args: Prisma.OfficerProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerProfilePayload>
          }
          deleteMany: {
            args: Prisma.OfficerProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OfficerProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OfficerProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerProfilePayload>[]
          }
          upsert: {
            args: Prisma.OfficerProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerProfilePayload>
          }
          aggregate: {
            args: Prisma.OfficerProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOfficerProfile>
          }
          groupBy: {
            args: Prisma.OfficerProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<OfficerProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.OfficerProfileCountArgs<ExtArgs>
            result: $Utils.Optional<OfficerProfileCountAggregateOutputType> | number
          }
        }
      }
      ServiceCategory: {
        payload: Prisma.$ServiceCategoryPayload<ExtArgs>
        fields: Prisma.ServiceCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          findFirst: {
            args: Prisma.ServiceCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          findMany: {
            args: Prisma.ServiceCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>[]
          }
          create: {
            args: Prisma.ServiceCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          createMany: {
            args: Prisma.ServiceCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>[]
          }
          delete: {
            args: Prisma.ServiceCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          update: {
            args: Prisma.ServiceCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ServiceCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>[]
          }
          upsert: {
            args: Prisma.ServiceCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          aggregate: {
            args: Prisma.ServiceCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceCategory>
          }
          groupBy: {
            args: Prisma.ServiceCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceCategoryCountAggregateOutputType> | number
          }
        }
      }
      Application: {
        payload: Prisma.$ApplicationPayload<ExtArgs>
        fields: Prisma.ApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findFirst: {
            args: Prisma.ApplicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findMany: {
            args: Prisma.ApplicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          create: {
            args: Prisma.ApplicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          createMany: {
            args: Prisma.ApplicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApplicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          delete: {
            args: Prisma.ApplicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          update: {
            args: Prisma.ApplicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApplicationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          upsert: {
            args: Prisma.ApplicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          aggregate: {
            args: Prisma.ApplicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplication>
          }
          groupBy: {
            args: Prisma.ApplicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicationCountAggregateOutputType> | number
          }
        }
      }
      ApplicationWorkflow: {
        payload: Prisma.$ApplicationWorkflowPayload<ExtArgs>
        fields: Prisma.ApplicationWorkflowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationWorkflowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationWorkflowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationWorkflowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationWorkflowPayload>
          }
          findFirst: {
            args: Prisma.ApplicationWorkflowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationWorkflowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationWorkflowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationWorkflowPayload>
          }
          findMany: {
            args: Prisma.ApplicationWorkflowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationWorkflowPayload>[]
          }
          create: {
            args: Prisma.ApplicationWorkflowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationWorkflowPayload>
          }
          createMany: {
            args: Prisma.ApplicationWorkflowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApplicationWorkflowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationWorkflowPayload>[]
          }
          delete: {
            args: Prisma.ApplicationWorkflowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationWorkflowPayload>
          }
          update: {
            args: Prisma.ApplicationWorkflowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationWorkflowPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationWorkflowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationWorkflowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApplicationWorkflowUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationWorkflowPayload>[]
          }
          upsert: {
            args: Prisma.ApplicationWorkflowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationWorkflowPayload>
          }
          aggregate: {
            args: Prisma.ApplicationWorkflowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplicationWorkflow>
          }
          groupBy: {
            args: Prisma.ApplicationWorkflowGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicationWorkflowGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationWorkflowCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicationWorkflowCountAggregateOutputType> | number
          }
        }
      }
      ApplicationValidation: {
        payload: Prisma.$ApplicationValidationPayload<ExtArgs>
        fields: Prisma.ApplicationValidationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationValidationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationValidationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationValidationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationValidationPayload>
          }
          findFirst: {
            args: Prisma.ApplicationValidationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationValidationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationValidationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationValidationPayload>
          }
          findMany: {
            args: Prisma.ApplicationValidationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationValidationPayload>[]
          }
          create: {
            args: Prisma.ApplicationValidationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationValidationPayload>
          }
          createMany: {
            args: Prisma.ApplicationValidationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApplicationValidationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationValidationPayload>[]
          }
          delete: {
            args: Prisma.ApplicationValidationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationValidationPayload>
          }
          update: {
            args: Prisma.ApplicationValidationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationValidationPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationValidationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationValidationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApplicationValidationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationValidationPayload>[]
          }
          upsert: {
            args: Prisma.ApplicationValidationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationValidationPayload>
          }
          aggregate: {
            args: Prisma.ApplicationValidationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplicationValidation>
          }
          groupBy: {
            args: Prisma.ApplicationValidationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicationValidationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationValidationCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicationValidationCountAggregateOutputType> | number
          }
        }
      }
      OfficerAssignment: {
        payload: Prisma.$OfficerAssignmentPayload<ExtArgs>
        fields: Prisma.OfficerAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OfficerAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OfficerAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerAssignmentPayload>
          }
          findFirst: {
            args: Prisma.OfficerAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OfficerAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerAssignmentPayload>
          }
          findMany: {
            args: Prisma.OfficerAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerAssignmentPayload>[]
          }
          create: {
            args: Prisma.OfficerAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerAssignmentPayload>
          }
          createMany: {
            args: Prisma.OfficerAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OfficerAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerAssignmentPayload>[]
          }
          delete: {
            args: Prisma.OfficerAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerAssignmentPayload>
          }
          update: {
            args: Prisma.OfficerAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.OfficerAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OfficerAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OfficerAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.OfficerAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficerAssignmentPayload>
          }
          aggregate: {
            args: Prisma.OfficerAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOfficerAssignment>
          }
          groupBy: {
            args: Prisma.OfficerAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<OfficerAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.OfficerAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<OfficerAssignmentCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      DocumentRequest: {
        payload: Prisma.$DocumentRequestPayload<ExtArgs>
        fields: Prisma.DocumentRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentRequestPayload>
          }
          findFirst: {
            args: Prisma.DocumentRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentRequestPayload>
          }
          findMany: {
            args: Prisma.DocumentRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentRequestPayload>[]
          }
          create: {
            args: Prisma.DocumentRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentRequestPayload>
          }
          createMany: {
            args: Prisma.DocumentRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentRequestPayload>[]
          }
          delete: {
            args: Prisma.DocumentRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentRequestPayload>
          }
          update: {
            args: Prisma.DocumentRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentRequestPayload>
          }
          deleteMany: {
            args: Prisma.DocumentRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentRequestPayload>[]
          }
          upsert: {
            args: Prisma.DocumentRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentRequestPayload>
          }
          aggregate: {
            args: Prisma.DocumentRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentRequest>
          }
          groupBy: {
            args: Prisma.DocumentRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentRequestCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentRequestCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      ApplicationAuditLog: {
        payload: Prisma.$ApplicationAuditLogPayload<ExtArgs>
        fields: Prisma.ApplicationAuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationAuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationAuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationAuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationAuditLogPayload>
          }
          findFirst: {
            args: Prisma.ApplicationAuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationAuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationAuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationAuditLogPayload>
          }
          findMany: {
            args: Prisma.ApplicationAuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationAuditLogPayload>[]
          }
          create: {
            args: Prisma.ApplicationAuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationAuditLogPayload>
          }
          createMany: {
            args: Prisma.ApplicationAuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApplicationAuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationAuditLogPayload>[]
          }
          delete: {
            args: Prisma.ApplicationAuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationAuditLogPayload>
          }
          update: {
            args: Prisma.ApplicationAuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationAuditLogPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationAuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationAuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApplicationAuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationAuditLogPayload>[]
          }
          upsert: {
            args: Prisma.ApplicationAuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationAuditLogPayload>
          }
          aggregate: {
            args: Prisma.ApplicationAuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplicationAuditLog>
          }
          groupBy: {
            args: Prisma.ApplicationAuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicationAuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationAuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicationAuditLogCountAggregateOutputType> | number
          }
        }
      }
      DailyReport: {
        payload: Prisma.$DailyReportPayload<ExtArgs>
        fields: Prisma.DailyReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DailyReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DailyReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>
          }
          findFirst: {
            args: Prisma.DailyReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DailyReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>
          }
          findMany: {
            args: Prisma.DailyReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>[]
          }
          create: {
            args: Prisma.DailyReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>
          }
          createMany: {
            args: Prisma.DailyReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DailyReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>[]
          }
          delete: {
            args: Prisma.DailyReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>
          }
          update: {
            args: Prisma.DailyReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>
          }
          deleteMany: {
            args: Prisma.DailyReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DailyReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DailyReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>[]
          }
          upsert: {
            args: Prisma.DailyReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyReportPayload>
          }
          aggregate: {
            args: Prisma.DailyReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDailyReport>
          }
          groupBy: {
            args: Prisma.DailyReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<DailyReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.DailyReportCountArgs<ExtArgs>
            result: $Utils.Optional<DailyReportCountAggregateOutputType> | number
          }
        }
      }
      SystemSetting: {
        payload: Prisma.$SystemSettingPayload<ExtArgs>
        fields: Prisma.SystemSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          findFirst: {
            args: Prisma.SystemSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          findMany: {
            args: Prisma.SystemSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>[]
          }
          create: {
            args: Prisma.SystemSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          createMany: {
            args: Prisma.SystemSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>[]
          }
          delete: {
            args: Prisma.SystemSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          update: {
            args: Prisma.SystemSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          deleteMany: {
            args: Prisma.SystemSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemSettingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>[]
          }
          upsert: {
            args: Prisma.SystemSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          aggregate: {
            args: Prisma.SystemSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemSetting>
          }
          groupBy: {
            args: Prisma.SystemSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemSettingCountArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    citizenProfile?: CitizenProfileOmit
    officerProfile?: OfficerProfileOmit
    serviceCategory?: ServiceCategoryOmit
    application?: ApplicationOmit
    applicationWorkflow?: ApplicationWorkflowOmit
    applicationValidation?: ApplicationValidationOmit
    officerAssignment?: OfficerAssignmentOmit
    document?: DocumentOmit
    documentRequest?: DocumentRequestOmit
    notification?: NotificationOmit
    applicationAuditLog?: ApplicationAuditLogOmit
    dailyReport?: DailyReportOmit
    systemSetting?: SystemSettingOmit
    verificationToken?: VerificationTokenOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    applications: number
    currentHolderFiles: number
    workflowChanges: number
    validations: number
    verifiedDocuments: number
    uploadedDocuments: number
    assignmentsGiven: number
    assignmentsReceived: number
    documentRequests: number
    notifications: number
    auditLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | UserCountOutputTypeCountApplicationsArgs
    currentHolderFiles?: boolean | UserCountOutputTypeCountCurrentHolderFilesArgs
    workflowChanges?: boolean | UserCountOutputTypeCountWorkflowChangesArgs
    validations?: boolean | UserCountOutputTypeCountValidationsArgs
    verifiedDocuments?: boolean | UserCountOutputTypeCountVerifiedDocumentsArgs
    uploadedDocuments?: boolean | UserCountOutputTypeCountUploadedDocumentsArgs
    assignmentsGiven?: boolean | UserCountOutputTypeCountAssignmentsGivenArgs
    assignmentsReceived?: boolean | UserCountOutputTypeCountAssignmentsReceivedArgs
    documentRequests?: boolean | UserCountOutputTypeCountDocumentRequestsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCurrentHolderFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkflowChangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWorkflowWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountValidationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationValidationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVerifiedDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUploadedDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignmentsGivenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OfficerAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignmentsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OfficerAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDocumentRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationAuditLogWhereInput
  }


  /**
   * Count Type ServiceCategoryCountOutputType
   */

  export type ServiceCategoryCountOutputType = {
    applications: number
  }

  export type ServiceCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | ServiceCategoryCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes
  /**
   * ServiceCategoryCountOutputType without action
   */
  export type ServiceCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategoryCountOutputType
     */
    select?: ServiceCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceCategoryCountOutputType without action
   */
  export type ServiceCategoryCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }


  /**
   * Count Type ApplicationCountOutputType
   */

  export type ApplicationCountOutputType = {
    workflow: number
    officerAssignments: number
    documents: number
    documentRequests: number
    notifications: number
    auditLogs: number
  }

  export type ApplicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflow?: boolean | ApplicationCountOutputTypeCountWorkflowArgs
    officerAssignments?: boolean | ApplicationCountOutputTypeCountOfficerAssignmentsArgs
    documents?: boolean | ApplicationCountOutputTypeCountDocumentsArgs
    documentRequests?: boolean | ApplicationCountOutputTypeCountDocumentRequestsArgs
    notifications?: boolean | ApplicationCountOutputTypeCountNotificationsArgs
    auditLogs?: boolean | ApplicationCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationCountOutputType
     */
    select?: ApplicationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountWorkflowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWorkflowWhereInput
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountOfficerAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OfficerAssignmentWhereInput
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountDocumentRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentRequestWhereInput
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationAuditLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    phone: string | null
    passwordHash: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    phone: string | null
    passwordHash: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    phone: number
    passwordHash: number
    role: number
    isActive: number
    lastLoginAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    passwordHash?: true
    role?: true
    isActive?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    passwordHash?: true
    role?: true
    isActive?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    passwordHash?: true
    role?: true
    isActive?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    phone: string | null
    passwordHash: string | null
    role: $Enums.UserRole
    isActive: boolean
    lastLoginAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    citizenProfile?: boolean | User$citizenProfileArgs<ExtArgs>
    officerProfile?: boolean | User$officerProfileArgs<ExtArgs>
    applications?: boolean | User$applicationsArgs<ExtArgs>
    currentHolderFiles?: boolean | User$currentHolderFilesArgs<ExtArgs>
    workflowChanges?: boolean | User$workflowChangesArgs<ExtArgs>
    validations?: boolean | User$validationsArgs<ExtArgs>
    verifiedDocuments?: boolean | User$verifiedDocumentsArgs<ExtArgs>
    uploadedDocuments?: boolean | User$uploadedDocumentsArgs<ExtArgs>
    assignmentsGiven?: boolean | User$assignmentsGivenArgs<ExtArgs>
    assignmentsReceived?: boolean | User$assignmentsReceivedArgs<ExtArgs>
    documentRequests?: boolean | User$documentRequestsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    phone?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "phone" | "passwordHash" | "role" | "isActive" | "lastLoginAt" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    citizenProfile?: boolean | User$citizenProfileArgs<ExtArgs>
    officerProfile?: boolean | User$officerProfileArgs<ExtArgs>
    applications?: boolean | User$applicationsArgs<ExtArgs>
    currentHolderFiles?: boolean | User$currentHolderFilesArgs<ExtArgs>
    workflowChanges?: boolean | User$workflowChangesArgs<ExtArgs>
    validations?: boolean | User$validationsArgs<ExtArgs>
    verifiedDocuments?: boolean | User$verifiedDocumentsArgs<ExtArgs>
    uploadedDocuments?: boolean | User$uploadedDocumentsArgs<ExtArgs>
    assignmentsGiven?: boolean | User$assignmentsGivenArgs<ExtArgs>
    assignmentsReceived?: boolean | User$assignmentsReceivedArgs<ExtArgs>
    documentRequests?: boolean | User$documentRequestsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      citizenProfile: Prisma.$CitizenProfilePayload<ExtArgs> | null
      officerProfile: Prisma.$OfficerProfilePayload<ExtArgs> | null
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
      currentHolderFiles: Prisma.$ApplicationPayload<ExtArgs>[]
      workflowChanges: Prisma.$ApplicationWorkflowPayload<ExtArgs>[]
      validations: Prisma.$ApplicationValidationPayload<ExtArgs>[]
      verifiedDocuments: Prisma.$DocumentPayload<ExtArgs>[]
      uploadedDocuments: Prisma.$DocumentPayload<ExtArgs>[]
      assignmentsGiven: Prisma.$OfficerAssignmentPayload<ExtArgs>[]
      assignmentsReceived: Prisma.$OfficerAssignmentPayload<ExtArgs>[]
      documentRequests: Prisma.$DocumentRequestPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      auditLogs: Prisma.$ApplicationAuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      phone: string | null
      passwordHash: string | null
      role: $Enums.UserRole
      isActive: boolean
      lastLoginAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    citizenProfile<T extends User$citizenProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$citizenProfileArgs<ExtArgs>>): Prisma__CitizenProfileClient<$Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    officerProfile<T extends User$officerProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$officerProfileArgs<ExtArgs>>): Prisma__OfficerProfileClient<$Result.GetResult<Prisma.$OfficerProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    applications<T extends User$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, User$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    currentHolderFiles<T extends User$currentHolderFilesArgs<ExtArgs> = {}>(args?: Subset<T, User$currentHolderFilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workflowChanges<T extends User$workflowChangesArgs<ExtArgs> = {}>(args?: Subset<T, User$workflowChangesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationWorkflowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    validations<T extends User$validationsArgs<ExtArgs> = {}>(args?: Subset<T, User$validationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationValidationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    verifiedDocuments<T extends User$verifiedDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, User$verifiedDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    uploadedDocuments<T extends User$uploadedDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, User$uploadedDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignmentsGiven<T extends User$assignmentsGivenArgs<ExtArgs> = {}>(args?: Subset<T, User$assignmentsGivenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfficerAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignmentsReceived<T extends User$assignmentsReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$assignmentsReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfficerAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documentRequests<T extends User$documentRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$documentRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationAuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.citizenProfile
   */
  export type User$citizenProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CitizenProfile
     */
    select?: CitizenProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CitizenProfile
     */
    omit?: CitizenProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenProfileInclude<ExtArgs> | null
    where?: CitizenProfileWhereInput
  }

  /**
   * User.officerProfile
   */
  export type User$officerProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerProfile
     */
    select?: OfficerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerProfile
     */
    omit?: OfficerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerProfileInclude<ExtArgs> | null
    where?: OfficerProfileWhereInput
  }

  /**
   * User.applications
   */
  export type User$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * User.currentHolderFiles
   */
  export type User$currentHolderFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * User.workflowChanges
   */
  export type User$workflowChangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationWorkflow
     */
    select?: ApplicationWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationWorkflow
     */
    omit?: ApplicationWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationWorkflowInclude<ExtArgs> | null
    where?: ApplicationWorkflowWhereInput
    orderBy?: ApplicationWorkflowOrderByWithRelationInput | ApplicationWorkflowOrderByWithRelationInput[]
    cursor?: ApplicationWorkflowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationWorkflowScalarFieldEnum | ApplicationWorkflowScalarFieldEnum[]
  }

  /**
   * User.validations
   */
  export type User$validationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationValidation
     */
    select?: ApplicationValidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationValidation
     */
    omit?: ApplicationValidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationValidationInclude<ExtArgs> | null
    where?: ApplicationValidationWhereInput
    orderBy?: ApplicationValidationOrderByWithRelationInput | ApplicationValidationOrderByWithRelationInput[]
    cursor?: ApplicationValidationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationValidationScalarFieldEnum | ApplicationValidationScalarFieldEnum[]
  }

  /**
   * User.verifiedDocuments
   */
  export type User$verifiedDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * User.uploadedDocuments
   */
  export type User$uploadedDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * User.assignmentsGiven
   */
  export type User$assignmentsGivenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerAssignment
     */
    select?: OfficerAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerAssignment
     */
    omit?: OfficerAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerAssignmentInclude<ExtArgs> | null
    where?: OfficerAssignmentWhereInput
    orderBy?: OfficerAssignmentOrderByWithRelationInput | OfficerAssignmentOrderByWithRelationInput[]
    cursor?: OfficerAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OfficerAssignmentScalarFieldEnum | OfficerAssignmentScalarFieldEnum[]
  }

  /**
   * User.assignmentsReceived
   */
  export type User$assignmentsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerAssignment
     */
    select?: OfficerAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerAssignment
     */
    omit?: OfficerAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerAssignmentInclude<ExtArgs> | null
    where?: OfficerAssignmentWhereInput
    orderBy?: OfficerAssignmentOrderByWithRelationInput | OfficerAssignmentOrderByWithRelationInput[]
    cursor?: OfficerAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OfficerAssignmentScalarFieldEnum | OfficerAssignmentScalarFieldEnum[]
  }

  /**
   * User.documentRequests
   */
  export type User$documentRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentRequest
     */
    select?: DocumentRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentRequest
     */
    omit?: DocumentRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentRequestInclude<ExtArgs> | null
    where?: DocumentRequestWhereInput
    orderBy?: DocumentRequestOrderByWithRelationInput | DocumentRequestOrderByWithRelationInput[]
    cursor?: DocumentRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentRequestScalarFieldEnum | DocumentRequestScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationAuditLog
     */
    select?: ApplicationAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationAuditLog
     */
    omit?: ApplicationAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationAuditLogInclude<ExtArgs> | null
    where?: ApplicationAuditLogWhereInput
    orderBy?: ApplicationAuditLogOrderByWithRelationInput | ApplicationAuditLogOrderByWithRelationInput[]
    cursor?: ApplicationAuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationAuditLogScalarFieldEnum | ApplicationAuditLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model CitizenProfile
   */

  export type AggregateCitizenProfile = {
    _count: CitizenProfileCountAggregateOutputType | null
    _min: CitizenProfileMinAggregateOutputType | null
    _max: CitizenProfileMaxAggregateOutputType | null
  }

  export type CitizenProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    fullName: string | null
    phone: string | null
    address: string | null
    aadhaarNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CitizenProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    fullName: string | null
    phone: string | null
    address: string | null
    aadhaarNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CitizenProfileCountAggregateOutputType = {
    id: number
    userId: number
    fullName: number
    phone: number
    address: number
    aadhaarNumber: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CitizenProfileMinAggregateInputType = {
    id?: true
    userId?: true
    fullName?: true
    phone?: true
    address?: true
    aadhaarNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CitizenProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    fullName?: true
    phone?: true
    address?: true
    aadhaarNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CitizenProfileCountAggregateInputType = {
    id?: true
    userId?: true
    fullName?: true
    phone?: true
    address?: true
    aadhaarNumber?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CitizenProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CitizenProfile to aggregate.
     */
    where?: CitizenProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CitizenProfiles to fetch.
     */
    orderBy?: CitizenProfileOrderByWithRelationInput | CitizenProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CitizenProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CitizenProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CitizenProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CitizenProfiles
    **/
    _count?: true | CitizenProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CitizenProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CitizenProfileMaxAggregateInputType
  }

  export type GetCitizenProfileAggregateType<T extends CitizenProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateCitizenProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCitizenProfile[P]>
      : GetScalarType<T[P], AggregateCitizenProfile[P]>
  }




  export type CitizenProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CitizenProfileWhereInput
    orderBy?: CitizenProfileOrderByWithAggregationInput | CitizenProfileOrderByWithAggregationInput[]
    by: CitizenProfileScalarFieldEnum[] | CitizenProfileScalarFieldEnum
    having?: CitizenProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CitizenProfileCountAggregateInputType | true
    _min?: CitizenProfileMinAggregateInputType
    _max?: CitizenProfileMaxAggregateInputType
  }

  export type CitizenProfileGroupByOutputType = {
    id: string
    userId: string
    fullName: string
    phone: string
    address: string
    aadhaarNumber: string | null
    createdAt: Date
    updatedAt: Date
    _count: CitizenProfileCountAggregateOutputType | null
    _min: CitizenProfileMinAggregateOutputType | null
    _max: CitizenProfileMaxAggregateOutputType | null
  }

  type GetCitizenProfileGroupByPayload<T extends CitizenProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CitizenProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CitizenProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CitizenProfileGroupByOutputType[P]>
            : GetScalarType<T[P], CitizenProfileGroupByOutputType[P]>
        }
      >
    >


  export type CitizenProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fullName?: boolean
    phone?: boolean
    address?: boolean
    aadhaarNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["citizenProfile"]>

  export type CitizenProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fullName?: boolean
    phone?: boolean
    address?: boolean
    aadhaarNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["citizenProfile"]>

  export type CitizenProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fullName?: boolean
    phone?: boolean
    address?: boolean
    aadhaarNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["citizenProfile"]>

  export type CitizenProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    fullName?: boolean
    phone?: boolean
    address?: boolean
    aadhaarNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CitizenProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "fullName" | "phone" | "address" | "aadhaarNumber" | "createdAt" | "updatedAt", ExtArgs["result"]["citizenProfile"]>
  export type CitizenProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CitizenProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CitizenProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CitizenProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CitizenProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      fullName: string
      phone: string
      address: string
      aadhaarNumber: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["citizenProfile"]>
    composites: {}
  }

  type CitizenProfileGetPayload<S extends boolean | null | undefined | CitizenProfileDefaultArgs> = $Result.GetResult<Prisma.$CitizenProfilePayload, S>

  type CitizenProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CitizenProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CitizenProfileCountAggregateInputType | true
    }

  export interface CitizenProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CitizenProfile'], meta: { name: 'CitizenProfile' } }
    /**
     * Find zero or one CitizenProfile that matches the filter.
     * @param {CitizenProfileFindUniqueArgs} args - Arguments to find a CitizenProfile
     * @example
     * // Get one CitizenProfile
     * const citizenProfile = await prisma.citizenProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CitizenProfileFindUniqueArgs>(args: SelectSubset<T, CitizenProfileFindUniqueArgs<ExtArgs>>): Prisma__CitizenProfileClient<$Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CitizenProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CitizenProfileFindUniqueOrThrowArgs} args - Arguments to find a CitizenProfile
     * @example
     * // Get one CitizenProfile
     * const citizenProfile = await prisma.citizenProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CitizenProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, CitizenProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CitizenProfileClient<$Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CitizenProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitizenProfileFindFirstArgs} args - Arguments to find a CitizenProfile
     * @example
     * // Get one CitizenProfile
     * const citizenProfile = await prisma.citizenProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CitizenProfileFindFirstArgs>(args?: SelectSubset<T, CitizenProfileFindFirstArgs<ExtArgs>>): Prisma__CitizenProfileClient<$Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CitizenProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitizenProfileFindFirstOrThrowArgs} args - Arguments to find a CitizenProfile
     * @example
     * // Get one CitizenProfile
     * const citizenProfile = await prisma.citizenProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CitizenProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, CitizenProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__CitizenProfileClient<$Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CitizenProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitizenProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CitizenProfiles
     * const citizenProfiles = await prisma.citizenProfile.findMany()
     * 
     * // Get first 10 CitizenProfiles
     * const citizenProfiles = await prisma.citizenProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const citizenProfileWithIdOnly = await prisma.citizenProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CitizenProfileFindManyArgs>(args?: SelectSubset<T, CitizenProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CitizenProfile.
     * @param {CitizenProfileCreateArgs} args - Arguments to create a CitizenProfile.
     * @example
     * // Create one CitizenProfile
     * const CitizenProfile = await prisma.citizenProfile.create({
     *   data: {
     *     // ... data to create a CitizenProfile
     *   }
     * })
     * 
     */
    create<T extends CitizenProfileCreateArgs>(args: SelectSubset<T, CitizenProfileCreateArgs<ExtArgs>>): Prisma__CitizenProfileClient<$Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CitizenProfiles.
     * @param {CitizenProfileCreateManyArgs} args - Arguments to create many CitizenProfiles.
     * @example
     * // Create many CitizenProfiles
     * const citizenProfile = await prisma.citizenProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CitizenProfileCreateManyArgs>(args?: SelectSubset<T, CitizenProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CitizenProfiles and returns the data saved in the database.
     * @param {CitizenProfileCreateManyAndReturnArgs} args - Arguments to create many CitizenProfiles.
     * @example
     * // Create many CitizenProfiles
     * const citizenProfile = await prisma.citizenProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CitizenProfiles and only return the `id`
     * const citizenProfileWithIdOnly = await prisma.citizenProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CitizenProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, CitizenProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CitizenProfile.
     * @param {CitizenProfileDeleteArgs} args - Arguments to delete one CitizenProfile.
     * @example
     * // Delete one CitizenProfile
     * const CitizenProfile = await prisma.citizenProfile.delete({
     *   where: {
     *     // ... filter to delete one CitizenProfile
     *   }
     * })
     * 
     */
    delete<T extends CitizenProfileDeleteArgs>(args: SelectSubset<T, CitizenProfileDeleteArgs<ExtArgs>>): Prisma__CitizenProfileClient<$Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CitizenProfile.
     * @param {CitizenProfileUpdateArgs} args - Arguments to update one CitizenProfile.
     * @example
     * // Update one CitizenProfile
     * const citizenProfile = await prisma.citizenProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CitizenProfileUpdateArgs>(args: SelectSubset<T, CitizenProfileUpdateArgs<ExtArgs>>): Prisma__CitizenProfileClient<$Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CitizenProfiles.
     * @param {CitizenProfileDeleteManyArgs} args - Arguments to filter CitizenProfiles to delete.
     * @example
     * // Delete a few CitizenProfiles
     * const { count } = await prisma.citizenProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CitizenProfileDeleteManyArgs>(args?: SelectSubset<T, CitizenProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CitizenProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitizenProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CitizenProfiles
     * const citizenProfile = await prisma.citizenProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CitizenProfileUpdateManyArgs>(args: SelectSubset<T, CitizenProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CitizenProfiles and returns the data updated in the database.
     * @param {CitizenProfileUpdateManyAndReturnArgs} args - Arguments to update many CitizenProfiles.
     * @example
     * // Update many CitizenProfiles
     * const citizenProfile = await prisma.citizenProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CitizenProfiles and only return the `id`
     * const citizenProfileWithIdOnly = await prisma.citizenProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CitizenProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, CitizenProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CitizenProfile.
     * @param {CitizenProfileUpsertArgs} args - Arguments to update or create a CitizenProfile.
     * @example
     * // Update or create a CitizenProfile
     * const citizenProfile = await prisma.citizenProfile.upsert({
     *   create: {
     *     // ... data to create a CitizenProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CitizenProfile we want to update
     *   }
     * })
     */
    upsert<T extends CitizenProfileUpsertArgs>(args: SelectSubset<T, CitizenProfileUpsertArgs<ExtArgs>>): Prisma__CitizenProfileClient<$Result.GetResult<Prisma.$CitizenProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CitizenProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitizenProfileCountArgs} args - Arguments to filter CitizenProfiles to count.
     * @example
     * // Count the number of CitizenProfiles
     * const count = await prisma.citizenProfile.count({
     *   where: {
     *     // ... the filter for the CitizenProfiles we want to count
     *   }
     * })
    **/
    count<T extends CitizenProfileCountArgs>(
      args?: Subset<T, CitizenProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CitizenProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CitizenProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitizenProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CitizenProfileAggregateArgs>(args: Subset<T, CitizenProfileAggregateArgs>): Prisma.PrismaPromise<GetCitizenProfileAggregateType<T>>

    /**
     * Group by CitizenProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CitizenProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CitizenProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CitizenProfileGroupByArgs['orderBy'] }
        : { orderBy?: CitizenProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CitizenProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCitizenProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CitizenProfile model
   */
  readonly fields: CitizenProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CitizenProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CitizenProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CitizenProfile model
   */
  interface CitizenProfileFieldRefs {
    readonly id: FieldRef<"CitizenProfile", 'String'>
    readonly userId: FieldRef<"CitizenProfile", 'String'>
    readonly fullName: FieldRef<"CitizenProfile", 'String'>
    readonly phone: FieldRef<"CitizenProfile", 'String'>
    readonly address: FieldRef<"CitizenProfile", 'String'>
    readonly aadhaarNumber: FieldRef<"CitizenProfile", 'String'>
    readonly createdAt: FieldRef<"CitizenProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"CitizenProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CitizenProfile findUnique
   */
  export type CitizenProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CitizenProfile
     */
    select?: CitizenProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CitizenProfile
     */
    omit?: CitizenProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenProfileInclude<ExtArgs> | null
    /**
     * Filter, which CitizenProfile to fetch.
     */
    where: CitizenProfileWhereUniqueInput
  }

  /**
   * CitizenProfile findUniqueOrThrow
   */
  export type CitizenProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CitizenProfile
     */
    select?: CitizenProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CitizenProfile
     */
    omit?: CitizenProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenProfileInclude<ExtArgs> | null
    /**
     * Filter, which CitizenProfile to fetch.
     */
    where: CitizenProfileWhereUniqueInput
  }

  /**
   * CitizenProfile findFirst
   */
  export type CitizenProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CitizenProfile
     */
    select?: CitizenProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CitizenProfile
     */
    omit?: CitizenProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenProfileInclude<ExtArgs> | null
    /**
     * Filter, which CitizenProfile to fetch.
     */
    where?: CitizenProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CitizenProfiles to fetch.
     */
    orderBy?: CitizenProfileOrderByWithRelationInput | CitizenProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CitizenProfiles.
     */
    cursor?: CitizenProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CitizenProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CitizenProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CitizenProfiles.
     */
    distinct?: CitizenProfileScalarFieldEnum | CitizenProfileScalarFieldEnum[]
  }

  /**
   * CitizenProfile findFirstOrThrow
   */
  export type CitizenProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CitizenProfile
     */
    select?: CitizenProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CitizenProfile
     */
    omit?: CitizenProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenProfileInclude<ExtArgs> | null
    /**
     * Filter, which CitizenProfile to fetch.
     */
    where?: CitizenProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CitizenProfiles to fetch.
     */
    orderBy?: CitizenProfileOrderByWithRelationInput | CitizenProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CitizenProfiles.
     */
    cursor?: CitizenProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CitizenProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CitizenProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CitizenProfiles.
     */
    distinct?: CitizenProfileScalarFieldEnum | CitizenProfileScalarFieldEnum[]
  }

  /**
   * CitizenProfile findMany
   */
  export type CitizenProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CitizenProfile
     */
    select?: CitizenProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CitizenProfile
     */
    omit?: CitizenProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenProfileInclude<ExtArgs> | null
    /**
     * Filter, which CitizenProfiles to fetch.
     */
    where?: CitizenProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CitizenProfiles to fetch.
     */
    orderBy?: CitizenProfileOrderByWithRelationInput | CitizenProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CitizenProfiles.
     */
    cursor?: CitizenProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CitizenProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CitizenProfiles.
     */
    skip?: number
    distinct?: CitizenProfileScalarFieldEnum | CitizenProfileScalarFieldEnum[]
  }

  /**
   * CitizenProfile create
   */
  export type CitizenProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CitizenProfile
     */
    select?: CitizenProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CitizenProfile
     */
    omit?: CitizenProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a CitizenProfile.
     */
    data: XOR<CitizenProfileCreateInput, CitizenProfileUncheckedCreateInput>
  }

  /**
   * CitizenProfile createMany
   */
  export type CitizenProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CitizenProfiles.
     */
    data: CitizenProfileCreateManyInput | CitizenProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CitizenProfile createManyAndReturn
   */
  export type CitizenProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CitizenProfile
     */
    select?: CitizenProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CitizenProfile
     */
    omit?: CitizenProfileOmit<ExtArgs> | null
    /**
     * The data used to create many CitizenProfiles.
     */
    data: CitizenProfileCreateManyInput | CitizenProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CitizenProfile update
   */
  export type CitizenProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CitizenProfile
     */
    select?: CitizenProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CitizenProfile
     */
    omit?: CitizenProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a CitizenProfile.
     */
    data: XOR<CitizenProfileUpdateInput, CitizenProfileUncheckedUpdateInput>
    /**
     * Choose, which CitizenProfile to update.
     */
    where: CitizenProfileWhereUniqueInput
  }

  /**
   * CitizenProfile updateMany
   */
  export type CitizenProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CitizenProfiles.
     */
    data: XOR<CitizenProfileUpdateManyMutationInput, CitizenProfileUncheckedUpdateManyInput>
    /**
     * Filter which CitizenProfiles to update
     */
    where?: CitizenProfileWhereInput
    /**
     * Limit how many CitizenProfiles to update.
     */
    limit?: number
  }

  /**
   * CitizenProfile updateManyAndReturn
   */
  export type CitizenProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CitizenProfile
     */
    select?: CitizenProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CitizenProfile
     */
    omit?: CitizenProfileOmit<ExtArgs> | null
    /**
     * The data used to update CitizenProfiles.
     */
    data: XOR<CitizenProfileUpdateManyMutationInput, CitizenProfileUncheckedUpdateManyInput>
    /**
     * Filter which CitizenProfiles to update
     */
    where?: CitizenProfileWhereInput
    /**
     * Limit how many CitizenProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CitizenProfile upsert
   */
  export type CitizenProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CitizenProfile
     */
    select?: CitizenProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CitizenProfile
     */
    omit?: CitizenProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the CitizenProfile to update in case it exists.
     */
    where: CitizenProfileWhereUniqueInput
    /**
     * In case the CitizenProfile found by the `where` argument doesn't exist, create a new CitizenProfile with this data.
     */
    create: XOR<CitizenProfileCreateInput, CitizenProfileUncheckedCreateInput>
    /**
     * In case the CitizenProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CitizenProfileUpdateInput, CitizenProfileUncheckedUpdateInput>
  }

  /**
   * CitizenProfile delete
   */
  export type CitizenProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CitizenProfile
     */
    select?: CitizenProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CitizenProfile
     */
    omit?: CitizenProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenProfileInclude<ExtArgs> | null
    /**
     * Filter which CitizenProfile to delete.
     */
    where: CitizenProfileWhereUniqueInput
  }

  /**
   * CitizenProfile deleteMany
   */
  export type CitizenProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CitizenProfiles to delete
     */
    where?: CitizenProfileWhereInput
    /**
     * Limit how many CitizenProfiles to delete.
     */
    limit?: number
  }

  /**
   * CitizenProfile without action
   */
  export type CitizenProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CitizenProfile
     */
    select?: CitizenProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CitizenProfile
     */
    omit?: CitizenProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CitizenProfileInclude<ExtArgs> | null
  }


  /**
   * Model OfficerProfile
   */

  export type AggregateOfficerProfile = {
    _count: OfficerProfileCountAggregateOutputType | null
    _min: OfficerProfileMinAggregateOutputType | null
    _max: OfficerProfileMaxAggregateOutputType | null
  }

  export type OfficerProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    fullName: string | null
    designation: string | null
    department: string | null
    officeLocation: string | null
    isAvailable: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OfficerProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    fullName: string | null
    designation: string | null
    department: string | null
    officeLocation: string | null
    isAvailable: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OfficerProfileCountAggregateOutputType = {
    id: number
    userId: number
    fullName: number
    designation: number
    department: number
    officeLocation: number
    isAvailable: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OfficerProfileMinAggregateInputType = {
    id?: true
    userId?: true
    fullName?: true
    designation?: true
    department?: true
    officeLocation?: true
    isAvailable?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OfficerProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    fullName?: true
    designation?: true
    department?: true
    officeLocation?: true
    isAvailable?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OfficerProfileCountAggregateInputType = {
    id?: true
    userId?: true
    fullName?: true
    designation?: true
    department?: true
    officeLocation?: true
    isAvailable?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OfficerProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OfficerProfile to aggregate.
     */
    where?: OfficerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OfficerProfiles to fetch.
     */
    orderBy?: OfficerProfileOrderByWithRelationInput | OfficerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OfficerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OfficerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OfficerProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OfficerProfiles
    **/
    _count?: true | OfficerProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OfficerProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OfficerProfileMaxAggregateInputType
  }

  export type GetOfficerProfileAggregateType<T extends OfficerProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateOfficerProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOfficerProfile[P]>
      : GetScalarType<T[P], AggregateOfficerProfile[P]>
  }




  export type OfficerProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OfficerProfileWhereInput
    orderBy?: OfficerProfileOrderByWithAggregationInput | OfficerProfileOrderByWithAggregationInput[]
    by: OfficerProfileScalarFieldEnum[] | OfficerProfileScalarFieldEnum
    having?: OfficerProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OfficerProfileCountAggregateInputType | true
    _min?: OfficerProfileMinAggregateInputType
    _max?: OfficerProfileMaxAggregateInputType
  }

  export type OfficerProfileGroupByOutputType = {
    id: string
    userId: string
    fullName: string
    designation: string
    department: string
    officeLocation: string | null
    isAvailable: boolean
    createdAt: Date
    updatedAt: Date
    _count: OfficerProfileCountAggregateOutputType | null
    _min: OfficerProfileMinAggregateOutputType | null
    _max: OfficerProfileMaxAggregateOutputType | null
  }

  type GetOfficerProfileGroupByPayload<T extends OfficerProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OfficerProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OfficerProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OfficerProfileGroupByOutputType[P]>
            : GetScalarType<T[P], OfficerProfileGroupByOutputType[P]>
        }
      >
    >


  export type OfficerProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fullName?: boolean
    designation?: boolean
    department?: boolean
    officeLocation?: boolean
    isAvailable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["officerProfile"]>

  export type OfficerProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fullName?: boolean
    designation?: boolean
    department?: boolean
    officeLocation?: boolean
    isAvailable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["officerProfile"]>

  export type OfficerProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fullName?: boolean
    designation?: boolean
    department?: boolean
    officeLocation?: boolean
    isAvailable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["officerProfile"]>

  export type OfficerProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    fullName?: boolean
    designation?: boolean
    department?: boolean
    officeLocation?: boolean
    isAvailable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OfficerProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "fullName" | "designation" | "department" | "officeLocation" | "isAvailable" | "createdAt" | "updatedAt", ExtArgs["result"]["officerProfile"]>
  export type OfficerProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OfficerProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OfficerProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OfficerProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OfficerProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      fullName: string
      designation: string
      department: string
      officeLocation: string | null
      isAvailable: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["officerProfile"]>
    composites: {}
  }

  type OfficerProfileGetPayload<S extends boolean | null | undefined | OfficerProfileDefaultArgs> = $Result.GetResult<Prisma.$OfficerProfilePayload, S>

  type OfficerProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OfficerProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OfficerProfileCountAggregateInputType | true
    }

  export interface OfficerProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OfficerProfile'], meta: { name: 'OfficerProfile' } }
    /**
     * Find zero or one OfficerProfile that matches the filter.
     * @param {OfficerProfileFindUniqueArgs} args - Arguments to find a OfficerProfile
     * @example
     * // Get one OfficerProfile
     * const officerProfile = await prisma.officerProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OfficerProfileFindUniqueArgs>(args: SelectSubset<T, OfficerProfileFindUniqueArgs<ExtArgs>>): Prisma__OfficerProfileClient<$Result.GetResult<Prisma.$OfficerProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OfficerProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OfficerProfileFindUniqueOrThrowArgs} args - Arguments to find a OfficerProfile
     * @example
     * // Get one OfficerProfile
     * const officerProfile = await prisma.officerProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OfficerProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, OfficerProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OfficerProfileClient<$Result.GetResult<Prisma.$OfficerProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OfficerProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficerProfileFindFirstArgs} args - Arguments to find a OfficerProfile
     * @example
     * // Get one OfficerProfile
     * const officerProfile = await prisma.officerProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OfficerProfileFindFirstArgs>(args?: SelectSubset<T, OfficerProfileFindFirstArgs<ExtArgs>>): Prisma__OfficerProfileClient<$Result.GetResult<Prisma.$OfficerProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OfficerProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficerProfileFindFirstOrThrowArgs} args - Arguments to find a OfficerProfile
     * @example
     * // Get one OfficerProfile
     * const officerProfile = await prisma.officerProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OfficerProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, OfficerProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__OfficerProfileClient<$Result.GetResult<Prisma.$OfficerProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OfficerProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficerProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OfficerProfiles
     * const officerProfiles = await prisma.officerProfile.findMany()
     * 
     * // Get first 10 OfficerProfiles
     * const officerProfiles = await prisma.officerProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const officerProfileWithIdOnly = await prisma.officerProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OfficerProfileFindManyArgs>(args?: SelectSubset<T, OfficerProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfficerProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OfficerProfile.
     * @param {OfficerProfileCreateArgs} args - Arguments to create a OfficerProfile.
     * @example
     * // Create one OfficerProfile
     * const OfficerProfile = await prisma.officerProfile.create({
     *   data: {
     *     // ... data to create a OfficerProfile
     *   }
     * })
     * 
     */
    create<T extends OfficerProfileCreateArgs>(args: SelectSubset<T, OfficerProfileCreateArgs<ExtArgs>>): Prisma__OfficerProfileClient<$Result.GetResult<Prisma.$OfficerProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OfficerProfiles.
     * @param {OfficerProfileCreateManyArgs} args - Arguments to create many OfficerProfiles.
     * @example
     * // Create many OfficerProfiles
     * const officerProfile = await prisma.officerProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OfficerProfileCreateManyArgs>(args?: SelectSubset<T, OfficerProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OfficerProfiles and returns the data saved in the database.
     * @param {OfficerProfileCreateManyAndReturnArgs} args - Arguments to create many OfficerProfiles.
     * @example
     * // Create many OfficerProfiles
     * const officerProfile = await prisma.officerProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OfficerProfiles and only return the `id`
     * const officerProfileWithIdOnly = await prisma.officerProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OfficerProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, OfficerProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfficerProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OfficerProfile.
     * @param {OfficerProfileDeleteArgs} args - Arguments to delete one OfficerProfile.
     * @example
     * // Delete one OfficerProfile
     * const OfficerProfile = await prisma.officerProfile.delete({
     *   where: {
     *     // ... filter to delete one OfficerProfile
     *   }
     * })
     * 
     */
    delete<T extends OfficerProfileDeleteArgs>(args: SelectSubset<T, OfficerProfileDeleteArgs<ExtArgs>>): Prisma__OfficerProfileClient<$Result.GetResult<Prisma.$OfficerProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OfficerProfile.
     * @param {OfficerProfileUpdateArgs} args - Arguments to update one OfficerProfile.
     * @example
     * // Update one OfficerProfile
     * const officerProfile = await prisma.officerProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OfficerProfileUpdateArgs>(args: SelectSubset<T, OfficerProfileUpdateArgs<ExtArgs>>): Prisma__OfficerProfileClient<$Result.GetResult<Prisma.$OfficerProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OfficerProfiles.
     * @param {OfficerProfileDeleteManyArgs} args - Arguments to filter OfficerProfiles to delete.
     * @example
     * // Delete a few OfficerProfiles
     * const { count } = await prisma.officerProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OfficerProfileDeleteManyArgs>(args?: SelectSubset<T, OfficerProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OfficerProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficerProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OfficerProfiles
     * const officerProfile = await prisma.officerProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OfficerProfileUpdateManyArgs>(args: SelectSubset<T, OfficerProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OfficerProfiles and returns the data updated in the database.
     * @param {OfficerProfileUpdateManyAndReturnArgs} args - Arguments to update many OfficerProfiles.
     * @example
     * // Update many OfficerProfiles
     * const officerProfile = await prisma.officerProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OfficerProfiles and only return the `id`
     * const officerProfileWithIdOnly = await prisma.officerProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OfficerProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, OfficerProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfficerProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OfficerProfile.
     * @param {OfficerProfileUpsertArgs} args - Arguments to update or create a OfficerProfile.
     * @example
     * // Update or create a OfficerProfile
     * const officerProfile = await prisma.officerProfile.upsert({
     *   create: {
     *     // ... data to create a OfficerProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OfficerProfile we want to update
     *   }
     * })
     */
    upsert<T extends OfficerProfileUpsertArgs>(args: SelectSubset<T, OfficerProfileUpsertArgs<ExtArgs>>): Prisma__OfficerProfileClient<$Result.GetResult<Prisma.$OfficerProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OfficerProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficerProfileCountArgs} args - Arguments to filter OfficerProfiles to count.
     * @example
     * // Count the number of OfficerProfiles
     * const count = await prisma.officerProfile.count({
     *   where: {
     *     // ... the filter for the OfficerProfiles we want to count
     *   }
     * })
    **/
    count<T extends OfficerProfileCountArgs>(
      args?: Subset<T, OfficerProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OfficerProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OfficerProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficerProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OfficerProfileAggregateArgs>(args: Subset<T, OfficerProfileAggregateArgs>): Prisma.PrismaPromise<GetOfficerProfileAggregateType<T>>

    /**
     * Group by OfficerProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficerProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OfficerProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OfficerProfileGroupByArgs['orderBy'] }
        : { orderBy?: OfficerProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OfficerProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOfficerProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OfficerProfile model
   */
  readonly fields: OfficerProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OfficerProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OfficerProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OfficerProfile model
   */
  interface OfficerProfileFieldRefs {
    readonly id: FieldRef<"OfficerProfile", 'String'>
    readonly userId: FieldRef<"OfficerProfile", 'String'>
    readonly fullName: FieldRef<"OfficerProfile", 'String'>
    readonly designation: FieldRef<"OfficerProfile", 'String'>
    readonly department: FieldRef<"OfficerProfile", 'String'>
    readonly officeLocation: FieldRef<"OfficerProfile", 'String'>
    readonly isAvailable: FieldRef<"OfficerProfile", 'Boolean'>
    readonly createdAt: FieldRef<"OfficerProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"OfficerProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OfficerProfile findUnique
   */
  export type OfficerProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerProfile
     */
    select?: OfficerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerProfile
     */
    omit?: OfficerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerProfileInclude<ExtArgs> | null
    /**
     * Filter, which OfficerProfile to fetch.
     */
    where: OfficerProfileWhereUniqueInput
  }

  /**
   * OfficerProfile findUniqueOrThrow
   */
  export type OfficerProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerProfile
     */
    select?: OfficerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerProfile
     */
    omit?: OfficerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerProfileInclude<ExtArgs> | null
    /**
     * Filter, which OfficerProfile to fetch.
     */
    where: OfficerProfileWhereUniqueInput
  }

  /**
   * OfficerProfile findFirst
   */
  export type OfficerProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerProfile
     */
    select?: OfficerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerProfile
     */
    omit?: OfficerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerProfileInclude<ExtArgs> | null
    /**
     * Filter, which OfficerProfile to fetch.
     */
    where?: OfficerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OfficerProfiles to fetch.
     */
    orderBy?: OfficerProfileOrderByWithRelationInput | OfficerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OfficerProfiles.
     */
    cursor?: OfficerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OfficerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OfficerProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OfficerProfiles.
     */
    distinct?: OfficerProfileScalarFieldEnum | OfficerProfileScalarFieldEnum[]
  }

  /**
   * OfficerProfile findFirstOrThrow
   */
  export type OfficerProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerProfile
     */
    select?: OfficerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerProfile
     */
    omit?: OfficerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerProfileInclude<ExtArgs> | null
    /**
     * Filter, which OfficerProfile to fetch.
     */
    where?: OfficerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OfficerProfiles to fetch.
     */
    orderBy?: OfficerProfileOrderByWithRelationInput | OfficerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OfficerProfiles.
     */
    cursor?: OfficerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OfficerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OfficerProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OfficerProfiles.
     */
    distinct?: OfficerProfileScalarFieldEnum | OfficerProfileScalarFieldEnum[]
  }

  /**
   * OfficerProfile findMany
   */
  export type OfficerProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerProfile
     */
    select?: OfficerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerProfile
     */
    omit?: OfficerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerProfileInclude<ExtArgs> | null
    /**
     * Filter, which OfficerProfiles to fetch.
     */
    where?: OfficerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OfficerProfiles to fetch.
     */
    orderBy?: OfficerProfileOrderByWithRelationInput | OfficerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OfficerProfiles.
     */
    cursor?: OfficerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OfficerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OfficerProfiles.
     */
    skip?: number
    distinct?: OfficerProfileScalarFieldEnum | OfficerProfileScalarFieldEnum[]
  }

  /**
   * OfficerProfile create
   */
  export type OfficerProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerProfile
     */
    select?: OfficerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerProfile
     */
    omit?: OfficerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a OfficerProfile.
     */
    data: XOR<OfficerProfileCreateInput, OfficerProfileUncheckedCreateInput>
  }

  /**
   * OfficerProfile createMany
   */
  export type OfficerProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OfficerProfiles.
     */
    data: OfficerProfileCreateManyInput | OfficerProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OfficerProfile createManyAndReturn
   */
  export type OfficerProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerProfile
     */
    select?: OfficerProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerProfile
     */
    omit?: OfficerProfileOmit<ExtArgs> | null
    /**
     * The data used to create many OfficerProfiles.
     */
    data: OfficerProfileCreateManyInput | OfficerProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OfficerProfile update
   */
  export type OfficerProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerProfile
     */
    select?: OfficerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerProfile
     */
    omit?: OfficerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a OfficerProfile.
     */
    data: XOR<OfficerProfileUpdateInput, OfficerProfileUncheckedUpdateInput>
    /**
     * Choose, which OfficerProfile to update.
     */
    where: OfficerProfileWhereUniqueInput
  }

  /**
   * OfficerProfile updateMany
   */
  export type OfficerProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OfficerProfiles.
     */
    data: XOR<OfficerProfileUpdateManyMutationInput, OfficerProfileUncheckedUpdateManyInput>
    /**
     * Filter which OfficerProfiles to update
     */
    where?: OfficerProfileWhereInput
    /**
     * Limit how many OfficerProfiles to update.
     */
    limit?: number
  }

  /**
   * OfficerProfile updateManyAndReturn
   */
  export type OfficerProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerProfile
     */
    select?: OfficerProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerProfile
     */
    omit?: OfficerProfileOmit<ExtArgs> | null
    /**
     * The data used to update OfficerProfiles.
     */
    data: XOR<OfficerProfileUpdateManyMutationInput, OfficerProfileUncheckedUpdateManyInput>
    /**
     * Filter which OfficerProfiles to update
     */
    where?: OfficerProfileWhereInput
    /**
     * Limit how many OfficerProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OfficerProfile upsert
   */
  export type OfficerProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerProfile
     */
    select?: OfficerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerProfile
     */
    omit?: OfficerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the OfficerProfile to update in case it exists.
     */
    where: OfficerProfileWhereUniqueInput
    /**
     * In case the OfficerProfile found by the `where` argument doesn't exist, create a new OfficerProfile with this data.
     */
    create: XOR<OfficerProfileCreateInput, OfficerProfileUncheckedCreateInput>
    /**
     * In case the OfficerProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OfficerProfileUpdateInput, OfficerProfileUncheckedUpdateInput>
  }

  /**
   * OfficerProfile delete
   */
  export type OfficerProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerProfile
     */
    select?: OfficerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerProfile
     */
    omit?: OfficerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerProfileInclude<ExtArgs> | null
    /**
     * Filter which OfficerProfile to delete.
     */
    where: OfficerProfileWhereUniqueInput
  }

  /**
   * OfficerProfile deleteMany
   */
  export type OfficerProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OfficerProfiles to delete
     */
    where?: OfficerProfileWhereInput
    /**
     * Limit how many OfficerProfiles to delete.
     */
    limit?: number
  }

  /**
   * OfficerProfile without action
   */
  export type OfficerProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerProfile
     */
    select?: OfficerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerProfile
     */
    omit?: OfficerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerProfileInclude<ExtArgs> | null
  }


  /**
   * Model ServiceCategory
   */

  export type AggregateServiceCategory = {
    _count: ServiceCategoryCountAggregateOutputType | null
    _avg: ServiceCategoryAvgAggregateOutputType | null
    _sum: ServiceCategorySumAggregateOutputType | null
    _min: ServiceCategoryMinAggregateOutputType | null
    _max: ServiceCategoryMaxAggregateOutputType | null
  }

  export type ServiceCategoryAvgAggregateOutputType = {
    slaDays: number | null
  }

  export type ServiceCategorySumAggregateOutputType = {
    slaDays: number | null
  }

  export type ServiceCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    slaDays: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    slaDays: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceCategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    slaDays: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServiceCategoryAvgAggregateInputType = {
    slaDays?: true
  }

  export type ServiceCategorySumAggregateInputType = {
    slaDays?: true
  }

  export type ServiceCategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slaDays?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slaDays?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceCategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slaDays?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServiceCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceCategory to aggregate.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: ServiceCategoryOrderByWithRelationInput | ServiceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceCategories
    **/
    _count?: true | ServiceCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceCategoryMaxAggregateInputType
  }

  export type GetServiceCategoryAggregateType<T extends ServiceCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceCategory[P]>
      : GetScalarType<T[P], AggregateServiceCategory[P]>
  }




  export type ServiceCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceCategoryWhereInput
    orderBy?: ServiceCategoryOrderByWithAggregationInput | ServiceCategoryOrderByWithAggregationInput[]
    by: ServiceCategoryScalarFieldEnum[] | ServiceCategoryScalarFieldEnum
    having?: ServiceCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCategoryCountAggregateInputType | true
    _avg?: ServiceCategoryAvgAggregateInputType
    _sum?: ServiceCategorySumAggregateInputType
    _min?: ServiceCategoryMinAggregateInputType
    _max?: ServiceCategoryMaxAggregateInputType
  }

  export type ServiceCategoryGroupByOutputType = {
    id: string
    name: string
    description: string | null
    slaDays: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ServiceCategoryCountAggregateOutputType | null
    _avg: ServiceCategoryAvgAggregateOutputType | null
    _sum: ServiceCategorySumAggregateOutputType | null
    _min: ServiceCategoryMinAggregateOutputType | null
    _max: ServiceCategoryMaxAggregateOutputType | null
  }

  type GetServiceCategoryGroupByPayload<T extends ServiceCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ServiceCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slaDays?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applications?: boolean | ServiceCategory$applicationsArgs<ExtArgs>
    _count?: boolean | ServiceCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceCategory"]>

  export type ServiceCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slaDays?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["serviceCategory"]>

  export type ServiceCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slaDays?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["serviceCategory"]>

  export type ServiceCategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    slaDays?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServiceCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "slaDays" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["serviceCategory"]>
  export type ServiceCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | ServiceCategory$applicationsArgs<ExtArgs>
    _count?: boolean | ServiceCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServiceCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ServiceCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ServiceCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceCategory"
    objects: {
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      slaDays: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["serviceCategory"]>
    composites: {}
  }

  type ServiceCategoryGetPayload<S extends boolean | null | undefined | ServiceCategoryDefaultArgs> = $Result.GetResult<Prisma.$ServiceCategoryPayload, S>

  type ServiceCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceCategoryCountAggregateInputType | true
    }

  export interface ServiceCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceCategory'], meta: { name: 'ServiceCategory' } }
    /**
     * Find zero or one ServiceCategory that matches the filter.
     * @param {ServiceCategoryFindUniqueArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceCategoryFindUniqueArgs>(args: SelectSubset<T, ServiceCategoryFindUniqueArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ServiceCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceCategoryFindUniqueOrThrowArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryFindFirstArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceCategoryFindFirstArgs>(args?: SelectSubset<T, ServiceCategoryFindFirstArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryFindFirstOrThrowArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ServiceCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceCategories
     * const serviceCategories = await prisma.serviceCategory.findMany()
     * 
     * // Get first 10 ServiceCategories
     * const serviceCategories = await prisma.serviceCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceCategoryWithIdOnly = await prisma.serviceCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceCategoryFindManyArgs>(args?: SelectSubset<T, ServiceCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ServiceCategory.
     * @param {ServiceCategoryCreateArgs} args - Arguments to create a ServiceCategory.
     * @example
     * // Create one ServiceCategory
     * const ServiceCategory = await prisma.serviceCategory.create({
     *   data: {
     *     // ... data to create a ServiceCategory
     *   }
     * })
     * 
     */
    create<T extends ServiceCategoryCreateArgs>(args: SelectSubset<T, ServiceCategoryCreateArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ServiceCategories.
     * @param {ServiceCategoryCreateManyArgs} args - Arguments to create many ServiceCategories.
     * @example
     * // Create many ServiceCategories
     * const serviceCategory = await prisma.serviceCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceCategoryCreateManyArgs>(args?: SelectSubset<T, ServiceCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServiceCategories and returns the data saved in the database.
     * @param {ServiceCategoryCreateManyAndReturnArgs} args - Arguments to create many ServiceCategories.
     * @example
     * // Create many ServiceCategories
     * const serviceCategory = await prisma.serviceCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServiceCategories and only return the `id`
     * const serviceCategoryWithIdOnly = await prisma.serviceCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ServiceCategory.
     * @param {ServiceCategoryDeleteArgs} args - Arguments to delete one ServiceCategory.
     * @example
     * // Delete one ServiceCategory
     * const ServiceCategory = await prisma.serviceCategory.delete({
     *   where: {
     *     // ... filter to delete one ServiceCategory
     *   }
     * })
     * 
     */
    delete<T extends ServiceCategoryDeleteArgs>(args: SelectSubset<T, ServiceCategoryDeleteArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ServiceCategory.
     * @param {ServiceCategoryUpdateArgs} args - Arguments to update one ServiceCategory.
     * @example
     * // Update one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceCategoryUpdateArgs>(args: SelectSubset<T, ServiceCategoryUpdateArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ServiceCategories.
     * @param {ServiceCategoryDeleteManyArgs} args - Arguments to filter ServiceCategories to delete.
     * @example
     * // Delete a few ServiceCategories
     * const { count } = await prisma.serviceCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceCategoryDeleteManyArgs>(args?: SelectSubset<T, ServiceCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceCategories
     * const serviceCategory = await prisma.serviceCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceCategoryUpdateManyArgs>(args: SelectSubset<T, ServiceCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceCategories and returns the data updated in the database.
     * @param {ServiceCategoryUpdateManyAndReturnArgs} args - Arguments to update many ServiceCategories.
     * @example
     * // Update many ServiceCategories
     * const serviceCategory = await prisma.serviceCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ServiceCategories and only return the `id`
     * const serviceCategoryWithIdOnly = await prisma.serviceCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ServiceCategory.
     * @param {ServiceCategoryUpsertArgs} args - Arguments to update or create a ServiceCategory.
     * @example
     * // Update or create a ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.upsert({
     *   create: {
     *     // ... data to create a ServiceCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceCategory we want to update
     *   }
     * })
     */
    upsert<T extends ServiceCategoryUpsertArgs>(args: SelectSubset<T, ServiceCategoryUpsertArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ServiceCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryCountArgs} args - Arguments to filter ServiceCategories to count.
     * @example
     * // Count the number of ServiceCategories
     * const count = await prisma.serviceCategory.count({
     *   where: {
     *     // ... the filter for the ServiceCategories we want to count
     *   }
     * })
    **/
    count<T extends ServiceCategoryCountArgs>(
      args?: Subset<T, ServiceCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceCategoryAggregateArgs>(args: Subset<T, ServiceCategoryAggregateArgs>): Prisma.PrismaPromise<GetServiceCategoryAggregateType<T>>

    /**
     * Group by ServiceCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ServiceCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceCategory model
   */
  readonly fields: ServiceCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applications<T extends ServiceCategory$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, ServiceCategory$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServiceCategory model
   */
  interface ServiceCategoryFieldRefs {
    readonly id: FieldRef<"ServiceCategory", 'String'>
    readonly name: FieldRef<"ServiceCategory", 'String'>
    readonly description: FieldRef<"ServiceCategory", 'String'>
    readonly slaDays: FieldRef<"ServiceCategory", 'Int'>
    readonly isActive: FieldRef<"ServiceCategory", 'Boolean'>
    readonly createdAt: FieldRef<"ServiceCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"ServiceCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ServiceCategory findUnique
   */
  export type ServiceCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where: ServiceCategoryWhereUniqueInput
  }

  /**
   * ServiceCategory findUniqueOrThrow
   */
  export type ServiceCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where: ServiceCategoryWhereUniqueInput
  }

  /**
   * ServiceCategory findFirst
   */
  export type ServiceCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: ServiceCategoryOrderByWithRelationInput | ServiceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceCategories.
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceCategories.
     */
    distinct?: ServiceCategoryScalarFieldEnum | ServiceCategoryScalarFieldEnum[]
  }

  /**
   * ServiceCategory findFirstOrThrow
   */
  export type ServiceCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: ServiceCategoryOrderByWithRelationInput | ServiceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceCategories.
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceCategories.
     */
    distinct?: ServiceCategoryScalarFieldEnum | ServiceCategoryScalarFieldEnum[]
  }

  /**
   * ServiceCategory findMany
   */
  export type ServiceCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategories to fetch.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: ServiceCategoryOrderByWithRelationInput | ServiceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceCategories.
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    distinct?: ServiceCategoryScalarFieldEnum | ServiceCategoryScalarFieldEnum[]
  }

  /**
   * ServiceCategory create
   */
  export type ServiceCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceCategory.
     */
    data: XOR<ServiceCategoryCreateInput, ServiceCategoryUncheckedCreateInput>
  }

  /**
   * ServiceCategory createMany
   */
  export type ServiceCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceCategories.
     */
    data: ServiceCategoryCreateManyInput | ServiceCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceCategory createManyAndReturn
   */
  export type ServiceCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many ServiceCategories.
     */
    data: ServiceCategoryCreateManyInput | ServiceCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceCategory update
   */
  export type ServiceCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceCategory.
     */
    data: XOR<ServiceCategoryUpdateInput, ServiceCategoryUncheckedUpdateInput>
    /**
     * Choose, which ServiceCategory to update.
     */
    where: ServiceCategoryWhereUniqueInput
  }

  /**
   * ServiceCategory updateMany
   */
  export type ServiceCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceCategories.
     */
    data: XOR<ServiceCategoryUpdateManyMutationInput, ServiceCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ServiceCategories to update
     */
    where?: ServiceCategoryWhereInput
    /**
     * Limit how many ServiceCategories to update.
     */
    limit?: number
  }

  /**
   * ServiceCategory updateManyAndReturn
   */
  export type ServiceCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * The data used to update ServiceCategories.
     */
    data: XOR<ServiceCategoryUpdateManyMutationInput, ServiceCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ServiceCategories to update
     */
    where?: ServiceCategoryWhereInput
    /**
     * Limit how many ServiceCategories to update.
     */
    limit?: number
  }

  /**
   * ServiceCategory upsert
   */
  export type ServiceCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceCategory to update in case it exists.
     */
    where: ServiceCategoryWhereUniqueInput
    /**
     * In case the ServiceCategory found by the `where` argument doesn't exist, create a new ServiceCategory with this data.
     */
    create: XOR<ServiceCategoryCreateInput, ServiceCategoryUncheckedCreateInput>
    /**
     * In case the ServiceCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceCategoryUpdateInput, ServiceCategoryUncheckedUpdateInput>
  }

  /**
   * ServiceCategory delete
   */
  export type ServiceCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter which ServiceCategory to delete.
     */
    where: ServiceCategoryWhereUniqueInput
  }

  /**
   * ServiceCategory deleteMany
   */
  export type ServiceCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceCategories to delete
     */
    where?: ServiceCategoryWhereInput
    /**
     * Limit how many ServiceCategories to delete.
     */
    limit?: number
  }

  /**
   * ServiceCategory.applications
   */
  export type ServiceCategory$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * ServiceCategory without action
   */
  export type ServiceCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Application
   */

  export type AggregateApplication = {
    _count: ApplicationCountAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  export type ApplicationMinAggregateOutputType = {
    id: string | null
    rrNumber: string | null
    serviceCategoryId: string | null
    citizenId: string | null
    status: $Enums.ApplicationStatus | null
    currentHolderId: string | null
    submittedAt: Date | null
    validatedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApplicationMaxAggregateOutputType = {
    id: string | null
    rrNumber: string | null
    serviceCategoryId: string | null
    citizenId: string | null
    status: $Enums.ApplicationStatus | null
    currentHolderId: string | null
    submittedAt: Date | null
    validatedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApplicationCountAggregateOutputType = {
    id: number
    rrNumber: number
    serviceCategoryId: number
    citizenId: number
    status: number
    currentHolderId: number
    submittedAt: number
    validatedAt: number
    completedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ApplicationMinAggregateInputType = {
    id?: true
    rrNumber?: true
    serviceCategoryId?: true
    citizenId?: true
    status?: true
    currentHolderId?: true
    submittedAt?: true
    validatedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApplicationMaxAggregateInputType = {
    id?: true
    rrNumber?: true
    serviceCategoryId?: true
    citizenId?: true
    status?: true
    currentHolderId?: true
    submittedAt?: true
    validatedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApplicationCountAggregateInputType = {
    id?: true
    rrNumber?: true
    serviceCategoryId?: true
    citizenId?: true
    status?: true
    currentHolderId?: true
    submittedAt?: true
    validatedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Application to aggregate.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applications
    **/
    _count?: true | ApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationMaxAggregateInputType
  }

  export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplication[P]>
      : GetScalarType<T[P], AggregateApplication[P]>
  }




  export type ApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithAggregationInput | ApplicationOrderByWithAggregationInput[]
    by: ApplicationScalarFieldEnum[] | ApplicationScalarFieldEnum
    having?: ApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationCountAggregateInputType | true
    _min?: ApplicationMinAggregateInputType
    _max?: ApplicationMaxAggregateInputType
  }

  export type ApplicationGroupByOutputType = {
    id: string
    rrNumber: string | null
    serviceCategoryId: string
    citizenId: string
    status: $Enums.ApplicationStatus
    currentHolderId: string | null
    submittedAt: Date | null
    validatedAt: Date | null
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ApplicationCountAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  type GetApplicationGroupByPayload<T extends ApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rrNumber?: boolean
    serviceCategoryId?: boolean
    citizenId?: boolean
    status?: boolean
    currentHolderId?: boolean
    submittedAt?: boolean
    validatedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serviceCategory?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    citizen?: boolean | UserDefaultArgs<ExtArgs>
    currentHolder?: boolean | Application$currentHolderArgs<ExtArgs>
    workflow?: boolean | Application$workflowArgs<ExtArgs>
    validation?: boolean | Application$validationArgs<ExtArgs>
    officerAssignments?: boolean | Application$officerAssignmentsArgs<ExtArgs>
    documents?: boolean | Application$documentsArgs<ExtArgs>
    documentRequests?: boolean | Application$documentRequestsArgs<ExtArgs>
    notifications?: boolean | Application$notificationsArgs<ExtArgs>
    auditLogs?: boolean | Application$auditLogsArgs<ExtArgs>
    _count?: boolean | ApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rrNumber?: boolean
    serviceCategoryId?: boolean
    citizenId?: boolean
    status?: boolean
    currentHolderId?: boolean
    submittedAt?: boolean
    validatedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serviceCategory?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    citizen?: boolean | UserDefaultArgs<ExtArgs>
    currentHolder?: boolean | Application$currentHolderArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rrNumber?: boolean
    serviceCategoryId?: boolean
    citizenId?: boolean
    status?: boolean
    currentHolderId?: boolean
    submittedAt?: boolean
    validatedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serviceCategory?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    citizen?: boolean | UserDefaultArgs<ExtArgs>
    currentHolder?: boolean | Application$currentHolderArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectScalar = {
    id?: boolean
    rrNumber?: boolean
    serviceCategoryId?: boolean
    citizenId?: boolean
    status?: boolean
    currentHolderId?: boolean
    submittedAt?: boolean
    validatedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ApplicationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "rrNumber" | "serviceCategoryId" | "citizenId" | "status" | "currentHolderId" | "submittedAt" | "validatedAt" | "completedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["application"]>
  export type ApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceCategory?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    citizen?: boolean | UserDefaultArgs<ExtArgs>
    currentHolder?: boolean | Application$currentHolderArgs<ExtArgs>
    workflow?: boolean | Application$workflowArgs<ExtArgs>
    validation?: boolean | Application$validationArgs<ExtArgs>
    officerAssignments?: boolean | Application$officerAssignmentsArgs<ExtArgs>
    documents?: boolean | Application$documentsArgs<ExtArgs>
    documentRequests?: boolean | Application$documentRequestsArgs<ExtArgs>
    notifications?: boolean | Application$notificationsArgs<ExtArgs>
    auditLogs?: boolean | Application$auditLogsArgs<ExtArgs>
    _count?: boolean | ApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ApplicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceCategory?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    citizen?: boolean | UserDefaultArgs<ExtArgs>
    currentHolder?: boolean | Application$currentHolderArgs<ExtArgs>
  }
  export type ApplicationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceCategory?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    citizen?: boolean | UserDefaultArgs<ExtArgs>
    currentHolder?: boolean | Application$currentHolderArgs<ExtArgs>
  }

  export type $ApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Application"
    objects: {
      serviceCategory: Prisma.$ServiceCategoryPayload<ExtArgs>
      citizen: Prisma.$UserPayload<ExtArgs>
      currentHolder: Prisma.$UserPayload<ExtArgs> | null
      workflow: Prisma.$ApplicationWorkflowPayload<ExtArgs>[]
      validation: Prisma.$ApplicationValidationPayload<ExtArgs> | null
      officerAssignments: Prisma.$OfficerAssignmentPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      documentRequests: Prisma.$DocumentRequestPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      auditLogs: Prisma.$ApplicationAuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      rrNumber: string | null
      serviceCategoryId: string
      citizenId: string
      status: $Enums.ApplicationStatus
      currentHolderId: string | null
      submittedAt: Date | null
      validatedAt: Date | null
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["application"]>
    composites: {}
  }

  type ApplicationGetPayload<S extends boolean | null | undefined | ApplicationDefaultArgs> = $Result.GetResult<Prisma.$ApplicationPayload, S>

  type ApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApplicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApplicationCountAggregateInputType | true
    }

  export interface ApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Application'], meta: { name: 'Application' } }
    /**
     * Find zero or one Application that matches the filter.
     * @param {ApplicationFindUniqueArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicationFindUniqueArgs>(args: SelectSubset<T, ApplicationFindUniqueArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Application that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApplicationFindUniqueOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicationFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Application that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicationFindFirstArgs>(args?: SelectSubset<T, ApplicationFindFirstArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Application that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicationFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applications
     * const applications = await prisma.application.findMany()
     * 
     * // Get first 10 Applications
     * const applications = await prisma.application.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationWithIdOnly = await prisma.application.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicationFindManyArgs>(args?: SelectSubset<T, ApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Application.
     * @param {ApplicationCreateArgs} args - Arguments to create a Application.
     * @example
     * // Create one Application
     * const Application = await prisma.application.create({
     *   data: {
     *     // ... data to create a Application
     *   }
     * })
     * 
     */
    create<T extends ApplicationCreateArgs>(args: SelectSubset<T, ApplicationCreateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Applications.
     * @param {ApplicationCreateManyArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicationCreateManyArgs>(args?: SelectSubset<T, ApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Applications and returns the data saved in the database.
     * @param {ApplicationCreateManyAndReturnArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Applications and only return the `id`
     * const applicationWithIdOnly = await prisma.application.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApplicationCreateManyAndReturnArgs>(args?: SelectSubset<T, ApplicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Application.
     * @param {ApplicationDeleteArgs} args - Arguments to delete one Application.
     * @example
     * // Delete one Application
     * const Application = await prisma.application.delete({
     *   where: {
     *     // ... filter to delete one Application
     *   }
     * })
     * 
     */
    delete<T extends ApplicationDeleteArgs>(args: SelectSubset<T, ApplicationDeleteArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Application.
     * @param {ApplicationUpdateArgs} args - Arguments to update one Application.
     * @example
     * // Update one Application
     * const application = await prisma.application.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicationUpdateArgs>(args: SelectSubset<T, ApplicationUpdateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Applications.
     * @param {ApplicationDeleteManyArgs} args - Arguments to filter Applications to delete.
     * @example
     * // Delete a few Applications
     * const { count } = await prisma.application.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicationDeleteManyArgs>(args?: SelectSubset<T, ApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicationUpdateManyArgs>(args: SelectSubset<T, ApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications and returns the data updated in the database.
     * @param {ApplicationUpdateManyAndReturnArgs} args - Arguments to update many Applications.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Applications and only return the `id`
     * const applicationWithIdOnly = await prisma.application.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApplicationUpdateManyAndReturnArgs>(args: SelectSubset<T, ApplicationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Application.
     * @param {ApplicationUpsertArgs} args - Arguments to update or create a Application.
     * @example
     * // Update or create a Application
     * const application = await prisma.application.upsert({
     *   create: {
     *     // ... data to create a Application
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Application we want to update
     *   }
     * })
     */
    upsert<T extends ApplicationUpsertArgs>(args: SelectSubset<T, ApplicationUpsertArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationCountArgs} args - Arguments to filter Applications to count.
     * @example
     * // Count the number of Applications
     * const count = await prisma.application.count({
     *   where: {
     *     // ... the filter for the Applications we want to count
     *   }
     * })
    **/
    count<T extends ApplicationCountArgs>(
      args?: Subset<T, ApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationAggregateArgs>(args: Subset<T, ApplicationAggregateArgs>): Prisma.PrismaPromise<GetApplicationAggregateType<T>>

    /**
     * Group by Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Application model
   */
  readonly fields: ApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Application.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    serviceCategory<T extends ServiceCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceCategoryDefaultArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    citizen<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    currentHolder<T extends Application$currentHolderArgs<ExtArgs> = {}>(args?: Subset<T, Application$currentHolderArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    workflow<T extends Application$workflowArgs<ExtArgs> = {}>(args?: Subset<T, Application$workflowArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationWorkflowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    validation<T extends Application$validationArgs<ExtArgs> = {}>(args?: Subset<T, Application$validationArgs<ExtArgs>>): Prisma__ApplicationValidationClient<$Result.GetResult<Prisma.$ApplicationValidationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    officerAssignments<T extends Application$officerAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Application$officerAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfficerAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends Application$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Application$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documentRequests<T extends Application$documentRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Application$documentRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends Application$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Application$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends Application$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Application$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationAuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Application model
   */
  interface ApplicationFieldRefs {
    readonly id: FieldRef<"Application", 'String'>
    readonly rrNumber: FieldRef<"Application", 'String'>
    readonly serviceCategoryId: FieldRef<"Application", 'String'>
    readonly citizenId: FieldRef<"Application", 'String'>
    readonly status: FieldRef<"Application", 'ApplicationStatus'>
    readonly currentHolderId: FieldRef<"Application", 'String'>
    readonly submittedAt: FieldRef<"Application", 'DateTime'>
    readonly validatedAt: FieldRef<"Application", 'DateTime'>
    readonly completedAt: FieldRef<"Application", 'DateTime'>
    readonly createdAt: FieldRef<"Application", 'DateTime'>
    readonly updatedAt: FieldRef<"Application", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Application findUnique
   */
  export type ApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findUniqueOrThrow
   */
  export type ApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findFirst
   */
  export type ApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findFirstOrThrow
   */
  export type ApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findMany
   */
  export type ApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Applications to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application create
   */
  export type ApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a Application.
     */
    data: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
  }

  /**
   * Application createMany
   */
  export type ApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Application createManyAndReturn
   */
  export type ApplicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Application update
   */
  export type ApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a Application.
     */
    data: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
    /**
     * Choose, which Application to update.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application updateMany
   */
  export type ApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to update.
     */
    limit?: number
  }

  /**
   * Application updateManyAndReturn
   */
  export type ApplicationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Application upsert
   */
  export type ApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the Application to update in case it exists.
     */
    where: ApplicationWhereUniqueInput
    /**
     * In case the Application found by the `where` argument doesn't exist, create a new Application with this data.
     */
    create: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
    /**
     * In case the Application was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
  }

  /**
   * Application delete
   */
  export type ApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter which Application to delete.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application deleteMany
   */
  export type ApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Applications to delete
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to delete.
     */
    limit?: number
  }

  /**
   * Application.currentHolder
   */
  export type Application$currentHolderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Application.workflow
   */
  export type Application$workflowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationWorkflow
     */
    select?: ApplicationWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationWorkflow
     */
    omit?: ApplicationWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationWorkflowInclude<ExtArgs> | null
    where?: ApplicationWorkflowWhereInput
    orderBy?: ApplicationWorkflowOrderByWithRelationInput | ApplicationWorkflowOrderByWithRelationInput[]
    cursor?: ApplicationWorkflowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationWorkflowScalarFieldEnum | ApplicationWorkflowScalarFieldEnum[]
  }

  /**
   * Application.validation
   */
  export type Application$validationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationValidation
     */
    select?: ApplicationValidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationValidation
     */
    omit?: ApplicationValidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationValidationInclude<ExtArgs> | null
    where?: ApplicationValidationWhereInput
  }

  /**
   * Application.officerAssignments
   */
  export type Application$officerAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerAssignment
     */
    select?: OfficerAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerAssignment
     */
    omit?: OfficerAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerAssignmentInclude<ExtArgs> | null
    where?: OfficerAssignmentWhereInput
    orderBy?: OfficerAssignmentOrderByWithRelationInput | OfficerAssignmentOrderByWithRelationInput[]
    cursor?: OfficerAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OfficerAssignmentScalarFieldEnum | OfficerAssignmentScalarFieldEnum[]
  }

  /**
   * Application.documents
   */
  export type Application$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Application.documentRequests
   */
  export type Application$documentRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentRequest
     */
    select?: DocumentRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentRequest
     */
    omit?: DocumentRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentRequestInclude<ExtArgs> | null
    where?: DocumentRequestWhereInput
    orderBy?: DocumentRequestOrderByWithRelationInput | DocumentRequestOrderByWithRelationInput[]
    cursor?: DocumentRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentRequestScalarFieldEnum | DocumentRequestScalarFieldEnum[]
  }

  /**
   * Application.notifications
   */
  export type Application$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Application.auditLogs
   */
  export type Application$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationAuditLog
     */
    select?: ApplicationAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationAuditLog
     */
    omit?: ApplicationAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationAuditLogInclude<ExtArgs> | null
    where?: ApplicationAuditLogWhereInput
    orderBy?: ApplicationAuditLogOrderByWithRelationInput | ApplicationAuditLogOrderByWithRelationInput[]
    cursor?: ApplicationAuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationAuditLogScalarFieldEnum | ApplicationAuditLogScalarFieldEnum[]
  }

  /**
   * Application without action
   */
  export type ApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
  }


  /**
   * Model ApplicationWorkflow
   */

  export type AggregateApplicationWorkflow = {
    _count: ApplicationWorkflowCountAggregateOutputType | null
    _min: ApplicationWorkflowMinAggregateOutputType | null
    _max: ApplicationWorkflowMaxAggregateOutputType | null
  }

  export type ApplicationWorkflowMinAggregateOutputType = {
    id: string | null
    applicationId: string | null
    fromStatus: $Enums.ApplicationStatus | null
    toStatus: $Enums.ApplicationStatus | null
    changedById: string | null
    comments: string | null
    createdAt: Date | null
  }

  export type ApplicationWorkflowMaxAggregateOutputType = {
    id: string | null
    applicationId: string | null
    fromStatus: $Enums.ApplicationStatus | null
    toStatus: $Enums.ApplicationStatus | null
    changedById: string | null
    comments: string | null
    createdAt: Date | null
  }

  export type ApplicationWorkflowCountAggregateOutputType = {
    id: number
    applicationId: number
    fromStatus: number
    toStatus: number
    changedById: number
    comments: number
    createdAt: number
    _all: number
  }


  export type ApplicationWorkflowMinAggregateInputType = {
    id?: true
    applicationId?: true
    fromStatus?: true
    toStatus?: true
    changedById?: true
    comments?: true
    createdAt?: true
  }

  export type ApplicationWorkflowMaxAggregateInputType = {
    id?: true
    applicationId?: true
    fromStatus?: true
    toStatus?: true
    changedById?: true
    comments?: true
    createdAt?: true
  }

  export type ApplicationWorkflowCountAggregateInputType = {
    id?: true
    applicationId?: true
    fromStatus?: true
    toStatus?: true
    changedById?: true
    comments?: true
    createdAt?: true
    _all?: true
  }

  export type ApplicationWorkflowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicationWorkflow to aggregate.
     */
    where?: ApplicationWorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationWorkflows to fetch.
     */
    orderBy?: ApplicationWorkflowOrderByWithRelationInput | ApplicationWorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationWorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationWorkflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationWorkflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApplicationWorkflows
    **/
    _count?: true | ApplicationWorkflowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationWorkflowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationWorkflowMaxAggregateInputType
  }

  export type GetApplicationWorkflowAggregateType<T extends ApplicationWorkflowAggregateArgs> = {
        [P in keyof T & keyof AggregateApplicationWorkflow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplicationWorkflow[P]>
      : GetScalarType<T[P], AggregateApplicationWorkflow[P]>
  }




  export type ApplicationWorkflowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWorkflowWhereInput
    orderBy?: ApplicationWorkflowOrderByWithAggregationInput | ApplicationWorkflowOrderByWithAggregationInput[]
    by: ApplicationWorkflowScalarFieldEnum[] | ApplicationWorkflowScalarFieldEnum
    having?: ApplicationWorkflowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationWorkflowCountAggregateInputType | true
    _min?: ApplicationWorkflowMinAggregateInputType
    _max?: ApplicationWorkflowMaxAggregateInputType
  }

  export type ApplicationWorkflowGroupByOutputType = {
    id: string
    applicationId: string
    fromStatus: $Enums.ApplicationStatus | null
    toStatus: $Enums.ApplicationStatus
    changedById: string
    comments: string | null
    createdAt: Date
    _count: ApplicationWorkflowCountAggregateOutputType | null
    _min: ApplicationWorkflowMinAggregateOutputType | null
    _max: ApplicationWorkflowMaxAggregateOutputType | null
  }

  type GetApplicationWorkflowGroupByPayload<T extends ApplicationWorkflowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationWorkflowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationWorkflowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationWorkflowGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationWorkflowGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationWorkflowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    fromStatus?: boolean
    toStatus?: boolean
    changedById?: boolean
    comments?: boolean
    createdAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicationWorkflow"]>

  export type ApplicationWorkflowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    fromStatus?: boolean
    toStatus?: boolean
    changedById?: boolean
    comments?: boolean
    createdAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicationWorkflow"]>

  export type ApplicationWorkflowSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    fromStatus?: boolean
    toStatus?: boolean
    changedById?: boolean
    comments?: boolean
    createdAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicationWorkflow"]>

  export type ApplicationWorkflowSelectScalar = {
    id?: boolean
    applicationId?: boolean
    fromStatus?: boolean
    toStatus?: boolean
    changedById?: boolean
    comments?: boolean
    createdAt?: boolean
  }

  export type ApplicationWorkflowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "applicationId" | "fromStatus" | "toStatus" | "changedById" | "comments" | "createdAt", ExtArgs["result"]["applicationWorkflow"]>
  export type ApplicationWorkflowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ApplicationWorkflowIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ApplicationWorkflowIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    changedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ApplicationWorkflowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApplicationWorkflow"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
      changedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      applicationId: string
      fromStatus: $Enums.ApplicationStatus | null
      toStatus: $Enums.ApplicationStatus
      changedById: string
      comments: string | null
      createdAt: Date
    }, ExtArgs["result"]["applicationWorkflow"]>
    composites: {}
  }

  type ApplicationWorkflowGetPayload<S extends boolean | null | undefined | ApplicationWorkflowDefaultArgs> = $Result.GetResult<Prisma.$ApplicationWorkflowPayload, S>

  type ApplicationWorkflowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApplicationWorkflowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApplicationWorkflowCountAggregateInputType | true
    }

  export interface ApplicationWorkflowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApplicationWorkflow'], meta: { name: 'ApplicationWorkflow' } }
    /**
     * Find zero or one ApplicationWorkflow that matches the filter.
     * @param {ApplicationWorkflowFindUniqueArgs} args - Arguments to find a ApplicationWorkflow
     * @example
     * // Get one ApplicationWorkflow
     * const applicationWorkflow = await prisma.applicationWorkflow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicationWorkflowFindUniqueArgs>(args: SelectSubset<T, ApplicationWorkflowFindUniqueArgs<ExtArgs>>): Prisma__ApplicationWorkflowClient<$Result.GetResult<Prisma.$ApplicationWorkflowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ApplicationWorkflow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApplicationWorkflowFindUniqueOrThrowArgs} args - Arguments to find a ApplicationWorkflow
     * @example
     * // Get one ApplicationWorkflow
     * const applicationWorkflow = await prisma.applicationWorkflow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicationWorkflowFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicationWorkflowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicationWorkflowClient<$Result.GetResult<Prisma.$ApplicationWorkflowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApplicationWorkflow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationWorkflowFindFirstArgs} args - Arguments to find a ApplicationWorkflow
     * @example
     * // Get one ApplicationWorkflow
     * const applicationWorkflow = await prisma.applicationWorkflow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicationWorkflowFindFirstArgs>(args?: SelectSubset<T, ApplicationWorkflowFindFirstArgs<ExtArgs>>): Prisma__ApplicationWorkflowClient<$Result.GetResult<Prisma.$ApplicationWorkflowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApplicationWorkflow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationWorkflowFindFirstOrThrowArgs} args - Arguments to find a ApplicationWorkflow
     * @example
     * // Get one ApplicationWorkflow
     * const applicationWorkflow = await prisma.applicationWorkflow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicationWorkflowFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicationWorkflowFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicationWorkflowClient<$Result.GetResult<Prisma.$ApplicationWorkflowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ApplicationWorkflows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationWorkflowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApplicationWorkflows
     * const applicationWorkflows = await prisma.applicationWorkflow.findMany()
     * 
     * // Get first 10 ApplicationWorkflows
     * const applicationWorkflows = await prisma.applicationWorkflow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationWorkflowWithIdOnly = await prisma.applicationWorkflow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicationWorkflowFindManyArgs>(args?: SelectSubset<T, ApplicationWorkflowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationWorkflowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ApplicationWorkflow.
     * @param {ApplicationWorkflowCreateArgs} args - Arguments to create a ApplicationWorkflow.
     * @example
     * // Create one ApplicationWorkflow
     * const ApplicationWorkflow = await prisma.applicationWorkflow.create({
     *   data: {
     *     // ... data to create a ApplicationWorkflow
     *   }
     * })
     * 
     */
    create<T extends ApplicationWorkflowCreateArgs>(args: SelectSubset<T, ApplicationWorkflowCreateArgs<ExtArgs>>): Prisma__ApplicationWorkflowClient<$Result.GetResult<Prisma.$ApplicationWorkflowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ApplicationWorkflows.
     * @param {ApplicationWorkflowCreateManyArgs} args - Arguments to create many ApplicationWorkflows.
     * @example
     * // Create many ApplicationWorkflows
     * const applicationWorkflow = await prisma.applicationWorkflow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicationWorkflowCreateManyArgs>(args?: SelectSubset<T, ApplicationWorkflowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApplicationWorkflows and returns the data saved in the database.
     * @param {ApplicationWorkflowCreateManyAndReturnArgs} args - Arguments to create many ApplicationWorkflows.
     * @example
     * // Create many ApplicationWorkflows
     * const applicationWorkflow = await prisma.applicationWorkflow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApplicationWorkflows and only return the `id`
     * const applicationWorkflowWithIdOnly = await prisma.applicationWorkflow.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApplicationWorkflowCreateManyAndReturnArgs>(args?: SelectSubset<T, ApplicationWorkflowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationWorkflowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ApplicationWorkflow.
     * @param {ApplicationWorkflowDeleteArgs} args - Arguments to delete one ApplicationWorkflow.
     * @example
     * // Delete one ApplicationWorkflow
     * const ApplicationWorkflow = await prisma.applicationWorkflow.delete({
     *   where: {
     *     // ... filter to delete one ApplicationWorkflow
     *   }
     * })
     * 
     */
    delete<T extends ApplicationWorkflowDeleteArgs>(args: SelectSubset<T, ApplicationWorkflowDeleteArgs<ExtArgs>>): Prisma__ApplicationWorkflowClient<$Result.GetResult<Prisma.$ApplicationWorkflowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ApplicationWorkflow.
     * @param {ApplicationWorkflowUpdateArgs} args - Arguments to update one ApplicationWorkflow.
     * @example
     * // Update one ApplicationWorkflow
     * const applicationWorkflow = await prisma.applicationWorkflow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicationWorkflowUpdateArgs>(args: SelectSubset<T, ApplicationWorkflowUpdateArgs<ExtArgs>>): Prisma__ApplicationWorkflowClient<$Result.GetResult<Prisma.$ApplicationWorkflowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ApplicationWorkflows.
     * @param {ApplicationWorkflowDeleteManyArgs} args - Arguments to filter ApplicationWorkflows to delete.
     * @example
     * // Delete a few ApplicationWorkflows
     * const { count } = await prisma.applicationWorkflow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicationWorkflowDeleteManyArgs>(args?: SelectSubset<T, ApplicationWorkflowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApplicationWorkflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationWorkflowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApplicationWorkflows
     * const applicationWorkflow = await prisma.applicationWorkflow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicationWorkflowUpdateManyArgs>(args: SelectSubset<T, ApplicationWorkflowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApplicationWorkflows and returns the data updated in the database.
     * @param {ApplicationWorkflowUpdateManyAndReturnArgs} args - Arguments to update many ApplicationWorkflows.
     * @example
     * // Update many ApplicationWorkflows
     * const applicationWorkflow = await prisma.applicationWorkflow.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ApplicationWorkflows and only return the `id`
     * const applicationWorkflowWithIdOnly = await prisma.applicationWorkflow.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApplicationWorkflowUpdateManyAndReturnArgs>(args: SelectSubset<T, ApplicationWorkflowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationWorkflowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ApplicationWorkflow.
     * @param {ApplicationWorkflowUpsertArgs} args - Arguments to update or create a ApplicationWorkflow.
     * @example
     * // Update or create a ApplicationWorkflow
     * const applicationWorkflow = await prisma.applicationWorkflow.upsert({
     *   create: {
     *     // ... data to create a ApplicationWorkflow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApplicationWorkflow we want to update
     *   }
     * })
     */
    upsert<T extends ApplicationWorkflowUpsertArgs>(args: SelectSubset<T, ApplicationWorkflowUpsertArgs<ExtArgs>>): Prisma__ApplicationWorkflowClient<$Result.GetResult<Prisma.$ApplicationWorkflowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ApplicationWorkflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationWorkflowCountArgs} args - Arguments to filter ApplicationWorkflows to count.
     * @example
     * // Count the number of ApplicationWorkflows
     * const count = await prisma.applicationWorkflow.count({
     *   where: {
     *     // ... the filter for the ApplicationWorkflows we want to count
     *   }
     * })
    **/
    count<T extends ApplicationWorkflowCountArgs>(
      args?: Subset<T, ApplicationWorkflowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationWorkflowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApplicationWorkflow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationWorkflowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationWorkflowAggregateArgs>(args: Subset<T, ApplicationWorkflowAggregateArgs>): Prisma.PrismaPromise<GetApplicationWorkflowAggregateType<T>>

    /**
     * Group by ApplicationWorkflow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationWorkflowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationWorkflowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationWorkflowGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationWorkflowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationWorkflowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationWorkflowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApplicationWorkflow model
   */
  readonly fields: ApplicationWorkflowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApplicationWorkflow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationWorkflowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    changedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApplicationWorkflow model
   */
  interface ApplicationWorkflowFieldRefs {
    readonly id: FieldRef<"ApplicationWorkflow", 'String'>
    readonly applicationId: FieldRef<"ApplicationWorkflow", 'String'>
    readonly fromStatus: FieldRef<"ApplicationWorkflow", 'ApplicationStatus'>
    readonly toStatus: FieldRef<"ApplicationWorkflow", 'ApplicationStatus'>
    readonly changedById: FieldRef<"ApplicationWorkflow", 'String'>
    readonly comments: FieldRef<"ApplicationWorkflow", 'String'>
    readonly createdAt: FieldRef<"ApplicationWorkflow", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ApplicationWorkflow findUnique
   */
  export type ApplicationWorkflowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationWorkflow
     */
    select?: ApplicationWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationWorkflow
     */
    omit?: ApplicationWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationWorkflowInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationWorkflow to fetch.
     */
    where: ApplicationWorkflowWhereUniqueInput
  }

  /**
   * ApplicationWorkflow findUniqueOrThrow
   */
  export type ApplicationWorkflowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationWorkflow
     */
    select?: ApplicationWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationWorkflow
     */
    omit?: ApplicationWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationWorkflowInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationWorkflow to fetch.
     */
    where: ApplicationWorkflowWhereUniqueInput
  }

  /**
   * ApplicationWorkflow findFirst
   */
  export type ApplicationWorkflowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationWorkflow
     */
    select?: ApplicationWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationWorkflow
     */
    omit?: ApplicationWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationWorkflowInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationWorkflow to fetch.
     */
    where?: ApplicationWorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationWorkflows to fetch.
     */
    orderBy?: ApplicationWorkflowOrderByWithRelationInput | ApplicationWorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicationWorkflows.
     */
    cursor?: ApplicationWorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationWorkflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationWorkflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicationWorkflows.
     */
    distinct?: ApplicationWorkflowScalarFieldEnum | ApplicationWorkflowScalarFieldEnum[]
  }

  /**
   * ApplicationWorkflow findFirstOrThrow
   */
  export type ApplicationWorkflowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationWorkflow
     */
    select?: ApplicationWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationWorkflow
     */
    omit?: ApplicationWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationWorkflowInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationWorkflow to fetch.
     */
    where?: ApplicationWorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationWorkflows to fetch.
     */
    orderBy?: ApplicationWorkflowOrderByWithRelationInput | ApplicationWorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicationWorkflows.
     */
    cursor?: ApplicationWorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationWorkflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationWorkflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicationWorkflows.
     */
    distinct?: ApplicationWorkflowScalarFieldEnum | ApplicationWorkflowScalarFieldEnum[]
  }

  /**
   * ApplicationWorkflow findMany
   */
  export type ApplicationWorkflowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationWorkflow
     */
    select?: ApplicationWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationWorkflow
     */
    omit?: ApplicationWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationWorkflowInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationWorkflows to fetch.
     */
    where?: ApplicationWorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationWorkflows to fetch.
     */
    orderBy?: ApplicationWorkflowOrderByWithRelationInput | ApplicationWorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApplicationWorkflows.
     */
    cursor?: ApplicationWorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationWorkflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationWorkflows.
     */
    skip?: number
    distinct?: ApplicationWorkflowScalarFieldEnum | ApplicationWorkflowScalarFieldEnum[]
  }

  /**
   * ApplicationWorkflow create
   */
  export type ApplicationWorkflowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationWorkflow
     */
    select?: ApplicationWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationWorkflow
     */
    omit?: ApplicationWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationWorkflowInclude<ExtArgs> | null
    /**
     * The data needed to create a ApplicationWorkflow.
     */
    data: XOR<ApplicationWorkflowCreateInput, ApplicationWorkflowUncheckedCreateInput>
  }

  /**
   * ApplicationWorkflow createMany
   */
  export type ApplicationWorkflowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApplicationWorkflows.
     */
    data: ApplicationWorkflowCreateManyInput | ApplicationWorkflowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApplicationWorkflow createManyAndReturn
   */
  export type ApplicationWorkflowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationWorkflow
     */
    select?: ApplicationWorkflowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationWorkflow
     */
    omit?: ApplicationWorkflowOmit<ExtArgs> | null
    /**
     * The data used to create many ApplicationWorkflows.
     */
    data: ApplicationWorkflowCreateManyInput | ApplicationWorkflowCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationWorkflowIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApplicationWorkflow update
   */
  export type ApplicationWorkflowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationWorkflow
     */
    select?: ApplicationWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationWorkflow
     */
    omit?: ApplicationWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationWorkflowInclude<ExtArgs> | null
    /**
     * The data needed to update a ApplicationWorkflow.
     */
    data: XOR<ApplicationWorkflowUpdateInput, ApplicationWorkflowUncheckedUpdateInput>
    /**
     * Choose, which ApplicationWorkflow to update.
     */
    where: ApplicationWorkflowWhereUniqueInput
  }

  /**
   * ApplicationWorkflow updateMany
   */
  export type ApplicationWorkflowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApplicationWorkflows.
     */
    data: XOR<ApplicationWorkflowUpdateManyMutationInput, ApplicationWorkflowUncheckedUpdateManyInput>
    /**
     * Filter which ApplicationWorkflows to update
     */
    where?: ApplicationWorkflowWhereInput
    /**
     * Limit how many ApplicationWorkflows to update.
     */
    limit?: number
  }

  /**
   * ApplicationWorkflow updateManyAndReturn
   */
  export type ApplicationWorkflowUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationWorkflow
     */
    select?: ApplicationWorkflowSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationWorkflow
     */
    omit?: ApplicationWorkflowOmit<ExtArgs> | null
    /**
     * The data used to update ApplicationWorkflows.
     */
    data: XOR<ApplicationWorkflowUpdateManyMutationInput, ApplicationWorkflowUncheckedUpdateManyInput>
    /**
     * Filter which ApplicationWorkflows to update
     */
    where?: ApplicationWorkflowWhereInput
    /**
     * Limit how many ApplicationWorkflows to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationWorkflowIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApplicationWorkflow upsert
   */
  export type ApplicationWorkflowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationWorkflow
     */
    select?: ApplicationWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationWorkflow
     */
    omit?: ApplicationWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationWorkflowInclude<ExtArgs> | null
    /**
     * The filter to search for the ApplicationWorkflow to update in case it exists.
     */
    where: ApplicationWorkflowWhereUniqueInput
    /**
     * In case the ApplicationWorkflow found by the `where` argument doesn't exist, create a new ApplicationWorkflow with this data.
     */
    create: XOR<ApplicationWorkflowCreateInput, ApplicationWorkflowUncheckedCreateInput>
    /**
     * In case the ApplicationWorkflow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationWorkflowUpdateInput, ApplicationWorkflowUncheckedUpdateInput>
  }

  /**
   * ApplicationWorkflow delete
   */
  export type ApplicationWorkflowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationWorkflow
     */
    select?: ApplicationWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationWorkflow
     */
    omit?: ApplicationWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationWorkflowInclude<ExtArgs> | null
    /**
     * Filter which ApplicationWorkflow to delete.
     */
    where: ApplicationWorkflowWhereUniqueInput
  }

  /**
   * ApplicationWorkflow deleteMany
   */
  export type ApplicationWorkflowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicationWorkflows to delete
     */
    where?: ApplicationWorkflowWhereInput
    /**
     * Limit how many ApplicationWorkflows to delete.
     */
    limit?: number
  }

  /**
   * ApplicationWorkflow without action
   */
  export type ApplicationWorkflowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationWorkflow
     */
    select?: ApplicationWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationWorkflow
     */
    omit?: ApplicationWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationWorkflowInclude<ExtArgs> | null
  }


  /**
   * Model ApplicationValidation
   */

  export type AggregateApplicationValidation = {
    _count: ApplicationValidationCountAggregateOutputType | null
    _min: ApplicationValidationMinAggregateOutputType | null
    _max: ApplicationValidationMaxAggregateOutputType | null
  }

  export type ApplicationValidationMinAggregateOutputType = {
    id: string | null
    applicationId: string | null
    validatedById: string | null
    rrNumber: string | null
    isDocumentsComplete: boolean | null
    isEligibilityVerified: boolean | null
    validationNotes: string | null
    createdAt: Date | null
  }

  export type ApplicationValidationMaxAggregateOutputType = {
    id: string | null
    applicationId: string | null
    validatedById: string | null
    rrNumber: string | null
    isDocumentsComplete: boolean | null
    isEligibilityVerified: boolean | null
    validationNotes: string | null
    createdAt: Date | null
  }

  export type ApplicationValidationCountAggregateOutputType = {
    id: number
    applicationId: number
    validatedById: number
    rrNumber: number
    isDocumentsComplete: number
    isEligibilityVerified: number
    validationNotes: number
    createdAt: number
    _all: number
  }


  export type ApplicationValidationMinAggregateInputType = {
    id?: true
    applicationId?: true
    validatedById?: true
    rrNumber?: true
    isDocumentsComplete?: true
    isEligibilityVerified?: true
    validationNotes?: true
    createdAt?: true
  }

  export type ApplicationValidationMaxAggregateInputType = {
    id?: true
    applicationId?: true
    validatedById?: true
    rrNumber?: true
    isDocumentsComplete?: true
    isEligibilityVerified?: true
    validationNotes?: true
    createdAt?: true
  }

  export type ApplicationValidationCountAggregateInputType = {
    id?: true
    applicationId?: true
    validatedById?: true
    rrNumber?: true
    isDocumentsComplete?: true
    isEligibilityVerified?: true
    validationNotes?: true
    createdAt?: true
    _all?: true
  }

  export type ApplicationValidationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicationValidation to aggregate.
     */
    where?: ApplicationValidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationValidations to fetch.
     */
    orderBy?: ApplicationValidationOrderByWithRelationInput | ApplicationValidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationValidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationValidations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationValidations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApplicationValidations
    **/
    _count?: true | ApplicationValidationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationValidationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationValidationMaxAggregateInputType
  }

  export type GetApplicationValidationAggregateType<T extends ApplicationValidationAggregateArgs> = {
        [P in keyof T & keyof AggregateApplicationValidation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplicationValidation[P]>
      : GetScalarType<T[P], AggregateApplicationValidation[P]>
  }




  export type ApplicationValidationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationValidationWhereInput
    orderBy?: ApplicationValidationOrderByWithAggregationInput | ApplicationValidationOrderByWithAggregationInput[]
    by: ApplicationValidationScalarFieldEnum[] | ApplicationValidationScalarFieldEnum
    having?: ApplicationValidationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationValidationCountAggregateInputType | true
    _min?: ApplicationValidationMinAggregateInputType
    _max?: ApplicationValidationMaxAggregateInputType
  }

  export type ApplicationValidationGroupByOutputType = {
    id: string
    applicationId: string
    validatedById: string
    rrNumber: string
    isDocumentsComplete: boolean
    isEligibilityVerified: boolean
    validationNotes: string | null
    createdAt: Date
    _count: ApplicationValidationCountAggregateOutputType | null
    _min: ApplicationValidationMinAggregateOutputType | null
    _max: ApplicationValidationMaxAggregateOutputType | null
  }

  type GetApplicationValidationGroupByPayload<T extends ApplicationValidationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationValidationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationValidationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationValidationGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationValidationGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationValidationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    validatedById?: boolean
    rrNumber?: boolean
    isDocumentsComplete?: boolean
    isEligibilityVerified?: boolean
    validationNotes?: boolean
    createdAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    validatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicationValidation"]>

  export type ApplicationValidationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    validatedById?: boolean
    rrNumber?: boolean
    isDocumentsComplete?: boolean
    isEligibilityVerified?: boolean
    validationNotes?: boolean
    createdAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    validatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicationValidation"]>

  export type ApplicationValidationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    validatedById?: boolean
    rrNumber?: boolean
    isDocumentsComplete?: boolean
    isEligibilityVerified?: boolean
    validationNotes?: boolean
    createdAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    validatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicationValidation"]>

  export type ApplicationValidationSelectScalar = {
    id?: boolean
    applicationId?: boolean
    validatedById?: boolean
    rrNumber?: boolean
    isDocumentsComplete?: boolean
    isEligibilityVerified?: boolean
    validationNotes?: boolean
    createdAt?: boolean
  }

  export type ApplicationValidationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "applicationId" | "validatedById" | "rrNumber" | "isDocumentsComplete" | "isEligibilityVerified" | "validationNotes" | "createdAt", ExtArgs["result"]["applicationValidation"]>
  export type ApplicationValidationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    validatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ApplicationValidationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    validatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ApplicationValidationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    validatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ApplicationValidationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApplicationValidation"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
      validatedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      applicationId: string
      validatedById: string
      rrNumber: string
      isDocumentsComplete: boolean
      isEligibilityVerified: boolean
      validationNotes: string | null
      createdAt: Date
    }, ExtArgs["result"]["applicationValidation"]>
    composites: {}
  }

  type ApplicationValidationGetPayload<S extends boolean | null | undefined | ApplicationValidationDefaultArgs> = $Result.GetResult<Prisma.$ApplicationValidationPayload, S>

  type ApplicationValidationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApplicationValidationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApplicationValidationCountAggregateInputType | true
    }

  export interface ApplicationValidationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApplicationValidation'], meta: { name: 'ApplicationValidation' } }
    /**
     * Find zero or one ApplicationValidation that matches the filter.
     * @param {ApplicationValidationFindUniqueArgs} args - Arguments to find a ApplicationValidation
     * @example
     * // Get one ApplicationValidation
     * const applicationValidation = await prisma.applicationValidation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicationValidationFindUniqueArgs>(args: SelectSubset<T, ApplicationValidationFindUniqueArgs<ExtArgs>>): Prisma__ApplicationValidationClient<$Result.GetResult<Prisma.$ApplicationValidationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ApplicationValidation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApplicationValidationFindUniqueOrThrowArgs} args - Arguments to find a ApplicationValidation
     * @example
     * // Get one ApplicationValidation
     * const applicationValidation = await prisma.applicationValidation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicationValidationFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicationValidationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicationValidationClient<$Result.GetResult<Prisma.$ApplicationValidationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApplicationValidation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationValidationFindFirstArgs} args - Arguments to find a ApplicationValidation
     * @example
     * // Get one ApplicationValidation
     * const applicationValidation = await prisma.applicationValidation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicationValidationFindFirstArgs>(args?: SelectSubset<T, ApplicationValidationFindFirstArgs<ExtArgs>>): Prisma__ApplicationValidationClient<$Result.GetResult<Prisma.$ApplicationValidationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApplicationValidation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationValidationFindFirstOrThrowArgs} args - Arguments to find a ApplicationValidation
     * @example
     * // Get one ApplicationValidation
     * const applicationValidation = await prisma.applicationValidation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicationValidationFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicationValidationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicationValidationClient<$Result.GetResult<Prisma.$ApplicationValidationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ApplicationValidations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationValidationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApplicationValidations
     * const applicationValidations = await prisma.applicationValidation.findMany()
     * 
     * // Get first 10 ApplicationValidations
     * const applicationValidations = await prisma.applicationValidation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationValidationWithIdOnly = await prisma.applicationValidation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicationValidationFindManyArgs>(args?: SelectSubset<T, ApplicationValidationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationValidationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ApplicationValidation.
     * @param {ApplicationValidationCreateArgs} args - Arguments to create a ApplicationValidation.
     * @example
     * // Create one ApplicationValidation
     * const ApplicationValidation = await prisma.applicationValidation.create({
     *   data: {
     *     // ... data to create a ApplicationValidation
     *   }
     * })
     * 
     */
    create<T extends ApplicationValidationCreateArgs>(args: SelectSubset<T, ApplicationValidationCreateArgs<ExtArgs>>): Prisma__ApplicationValidationClient<$Result.GetResult<Prisma.$ApplicationValidationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ApplicationValidations.
     * @param {ApplicationValidationCreateManyArgs} args - Arguments to create many ApplicationValidations.
     * @example
     * // Create many ApplicationValidations
     * const applicationValidation = await prisma.applicationValidation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicationValidationCreateManyArgs>(args?: SelectSubset<T, ApplicationValidationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApplicationValidations and returns the data saved in the database.
     * @param {ApplicationValidationCreateManyAndReturnArgs} args - Arguments to create many ApplicationValidations.
     * @example
     * // Create many ApplicationValidations
     * const applicationValidation = await prisma.applicationValidation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApplicationValidations and only return the `id`
     * const applicationValidationWithIdOnly = await prisma.applicationValidation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApplicationValidationCreateManyAndReturnArgs>(args?: SelectSubset<T, ApplicationValidationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationValidationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ApplicationValidation.
     * @param {ApplicationValidationDeleteArgs} args - Arguments to delete one ApplicationValidation.
     * @example
     * // Delete one ApplicationValidation
     * const ApplicationValidation = await prisma.applicationValidation.delete({
     *   where: {
     *     // ... filter to delete one ApplicationValidation
     *   }
     * })
     * 
     */
    delete<T extends ApplicationValidationDeleteArgs>(args: SelectSubset<T, ApplicationValidationDeleteArgs<ExtArgs>>): Prisma__ApplicationValidationClient<$Result.GetResult<Prisma.$ApplicationValidationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ApplicationValidation.
     * @param {ApplicationValidationUpdateArgs} args - Arguments to update one ApplicationValidation.
     * @example
     * // Update one ApplicationValidation
     * const applicationValidation = await prisma.applicationValidation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicationValidationUpdateArgs>(args: SelectSubset<T, ApplicationValidationUpdateArgs<ExtArgs>>): Prisma__ApplicationValidationClient<$Result.GetResult<Prisma.$ApplicationValidationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ApplicationValidations.
     * @param {ApplicationValidationDeleteManyArgs} args - Arguments to filter ApplicationValidations to delete.
     * @example
     * // Delete a few ApplicationValidations
     * const { count } = await prisma.applicationValidation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicationValidationDeleteManyArgs>(args?: SelectSubset<T, ApplicationValidationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApplicationValidations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationValidationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApplicationValidations
     * const applicationValidation = await prisma.applicationValidation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicationValidationUpdateManyArgs>(args: SelectSubset<T, ApplicationValidationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApplicationValidations and returns the data updated in the database.
     * @param {ApplicationValidationUpdateManyAndReturnArgs} args - Arguments to update many ApplicationValidations.
     * @example
     * // Update many ApplicationValidations
     * const applicationValidation = await prisma.applicationValidation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ApplicationValidations and only return the `id`
     * const applicationValidationWithIdOnly = await prisma.applicationValidation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApplicationValidationUpdateManyAndReturnArgs>(args: SelectSubset<T, ApplicationValidationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationValidationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ApplicationValidation.
     * @param {ApplicationValidationUpsertArgs} args - Arguments to update or create a ApplicationValidation.
     * @example
     * // Update or create a ApplicationValidation
     * const applicationValidation = await prisma.applicationValidation.upsert({
     *   create: {
     *     // ... data to create a ApplicationValidation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApplicationValidation we want to update
     *   }
     * })
     */
    upsert<T extends ApplicationValidationUpsertArgs>(args: SelectSubset<T, ApplicationValidationUpsertArgs<ExtArgs>>): Prisma__ApplicationValidationClient<$Result.GetResult<Prisma.$ApplicationValidationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ApplicationValidations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationValidationCountArgs} args - Arguments to filter ApplicationValidations to count.
     * @example
     * // Count the number of ApplicationValidations
     * const count = await prisma.applicationValidation.count({
     *   where: {
     *     // ... the filter for the ApplicationValidations we want to count
     *   }
     * })
    **/
    count<T extends ApplicationValidationCountArgs>(
      args?: Subset<T, ApplicationValidationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationValidationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApplicationValidation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationValidationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationValidationAggregateArgs>(args: Subset<T, ApplicationValidationAggregateArgs>): Prisma.PrismaPromise<GetApplicationValidationAggregateType<T>>

    /**
     * Group by ApplicationValidation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationValidationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationValidationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationValidationGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationValidationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationValidationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationValidationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApplicationValidation model
   */
  readonly fields: ApplicationValidationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApplicationValidation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationValidationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    validatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApplicationValidation model
   */
  interface ApplicationValidationFieldRefs {
    readonly id: FieldRef<"ApplicationValidation", 'String'>
    readonly applicationId: FieldRef<"ApplicationValidation", 'String'>
    readonly validatedById: FieldRef<"ApplicationValidation", 'String'>
    readonly rrNumber: FieldRef<"ApplicationValidation", 'String'>
    readonly isDocumentsComplete: FieldRef<"ApplicationValidation", 'Boolean'>
    readonly isEligibilityVerified: FieldRef<"ApplicationValidation", 'Boolean'>
    readonly validationNotes: FieldRef<"ApplicationValidation", 'String'>
    readonly createdAt: FieldRef<"ApplicationValidation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ApplicationValidation findUnique
   */
  export type ApplicationValidationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationValidation
     */
    select?: ApplicationValidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationValidation
     */
    omit?: ApplicationValidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationValidationInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationValidation to fetch.
     */
    where: ApplicationValidationWhereUniqueInput
  }

  /**
   * ApplicationValidation findUniqueOrThrow
   */
  export type ApplicationValidationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationValidation
     */
    select?: ApplicationValidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationValidation
     */
    omit?: ApplicationValidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationValidationInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationValidation to fetch.
     */
    where: ApplicationValidationWhereUniqueInput
  }

  /**
   * ApplicationValidation findFirst
   */
  export type ApplicationValidationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationValidation
     */
    select?: ApplicationValidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationValidation
     */
    omit?: ApplicationValidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationValidationInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationValidation to fetch.
     */
    where?: ApplicationValidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationValidations to fetch.
     */
    orderBy?: ApplicationValidationOrderByWithRelationInput | ApplicationValidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicationValidations.
     */
    cursor?: ApplicationValidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationValidations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationValidations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicationValidations.
     */
    distinct?: ApplicationValidationScalarFieldEnum | ApplicationValidationScalarFieldEnum[]
  }

  /**
   * ApplicationValidation findFirstOrThrow
   */
  export type ApplicationValidationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationValidation
     */
    select?: ApplicationValidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationValidation
     */
    omit?: ApplicationValidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationValidationInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationValidation to fetch.
     */
    where?: ApplicationValidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationValidations to fetch.
     */
    orderBy?: ApplicationValidationOrderByWithRelationInput | ApplicationValidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicationValidations.
     */
    cursor?: ApplicationValidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationValidations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationValidations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicationValidations.
     */
    distinct?: ApplicationValidationScalarFieldEnum | ApplicationValidationScalarFieldEnum[]
  }

  /**
   * ApplicationValidation findMany
   */
  export type ApplicationValidationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationValidation
     */
    select?: ApplicationValidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationValidation
     */
    omit?: ApplicationValidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationValidationInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationValidations to fetch.
     */
    where?: ApplicationValidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationValidations to fetch.
     */
    orderBy?: ApplicationValidationOrderByWithRelationInput | ApplicationValidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApplicationValidations.
     */
    cursor?: ApplicationValidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationValidations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationValidations.
     */
    skip?: number
    distinct?: ApplicationValidationScalarFieldEnum | ApplicationValidationScalarFieldEnum[]
  }

  /**
   * ApplicationValidation create
   */
  export type ApplicationValidationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationValidation
     */
    select?: ApplicationValidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationValidation
     */
    omit?: ApplicationValidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationValidationInclude<ExtArgs> | null
    /**
     * The data needed to create a ApplicationValidation.
     */
    data: XOR<ApplicationValidationCreateInput, ApplicationValidationUncheckedCreateInput>
  }

  /**
   * ApplicationValidation createMany
   */
  export type ApplicationValidationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApplicationValidations.
     */
    data: ApplicationValidationCreateManyInput | ApplicationValidationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApplicationValidation createManyAndReturn
   */
  export type ApplicationValidationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationValidation
     */
    select?: ApplicationValidationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationValidation
     */
    omit?: ApplicationValidationOmit<ExtArgs> | null
    /**
     * The data used to create many ApplicationValidations.
     */
    data: ApplicationValidationCreateManyInput | ApplicationValidationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationValidationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApplicationValidation update
   */
  export type ApplicationValidationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationValidation
     */
    select?: ApplicationValidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationValidation
     */
    omit?: ApplicationValidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationValidationInclude<ExtArgs> | null
    /**
     * The data needed to update a ApplicationValidation.
     */
    data: XOR<ApplicationValidationUpdateInput, ApplicationValidationUncheckedUpdateInput>
    /**
     * Choose, which ApplicationValidation to update.
     */
    where: ApplicationValidationWhereUniqueInput
  }

  /**
   * ApplicationValidation updateMany
   */
  export type ApplicationValidationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApplicationValidations.
     */
    data: XOR<ApplicationValidationUpdateManyMutationInput, ApplicationValidationUncheckedUpdateManyInput>
    /**
     * Filter which ApplicationValidations to update
     */
    where?: ApplicationValidationWhereInput
    /**
     * Limit how many ApplicationValidations to update.
     */
    limit?: number
  }

  /**
   * ApplicationValidation updateManyAndReturn
   */
  export type ApplicationValidationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationValidation
     */
    select?: ApplicationValidationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationValidation
     */
    omit?: ApplicationValidationOmit<ExtArgs> | null
    /**
     * The data used to update ApplicationValidations.
     */
    data: XOR<ApplicationValidationUpdateManyMutationInput, ApplicationValidationUncheckedUpdateManyInput>
    /**
     * Filter which ApplicationValidations to update
     */
    where?: ApplicationValidationWhereInput
    /**
     * Limit how many ApplicationValidations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationValidationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApplicationValidation upsert
   */
  export type ApplicationValidationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationValidation
     */
    select?: ApplicationValidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationValidation
     */
    omit?: ApplicationValidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationValidationInclude<ExtArgs> | null
    /**
     * The filter to search for the ApplicationValidation to update in case it exists.
     */
    where: ApplicationValidationWhereUniqueInput
    /**
     * In case the ApplicationValidation found by the `where` argument doesn't exist, create a new ApplicationValidation with this data.
     */
    create: XOR<ApplicationValidationCreateInput, ApplicationValidationUncheckedCreateInput>
    /**
     * In case the ApplicationValidation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationValidationUpdateInput, ApplicationValidationUncheckedUpdateInput>
  }

  /**
   * ApplicationValidation delete
   */
  export type ApplicationValidationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationValidation
     */
    select?: ApplicationValidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationValidation
     */
    omit?: ApplicationValidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationValidationInclude<ExtArgs> | null
    /**
     * Filter which ApplicationValidation to delete.
     */
    where: ApplicationValidationWhereUniqueInput
  }

  /**
   * ApplicationValidation deleteMany
   */
  export type ApplicationValidationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicationValidations to delete
     */
    where?: ApplicationValidationWhereInput
    /**
     * Limit how many ApplicationValidations to delete.
     */
    limit?: number
  }

  /**
   * ApplicationValidation without action
   */
  export type ApplicationValidationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationValidation
     */
    select?: ApplicationValidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationValidation
     */
    omit?: ApplicationValidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationValidationInclude<ExtArgs> | null
  }


  /**
   * Model OfficerAssignment
   */

  export type AggregateOfficerAssignment = {
    _count: OfficerAssignmentCountAggregateOutputType | null
    _avg: OfficerAssignmentAvgAggregateOutputType | null
    _sum: OfficerAssignmentSumAggregateOutputType | null
    _min: OfficerAssignmentMinAggregateOutputType | null
    _max: OfficerAssignmentMaxAggregateOutputType | null
  }

  export type OfficerAssignmentAvgAggregateOutputType = {
    priority: number | null
  }

  export type OfficerAssignmentSumAggregateOutputType = {
    priority: number | null
  }

  export type OfficerAssignmentMinAggregateOutputType = {
    id: string | null
    applicationId: string | null
    assignedById: string | null
    assignedToId: string | null
    expectedCompletionDate: Date | null
    priority: number | null
    instructions: string | null
    createdAt: Date | null
  }

  export type OfficerAssignmentMaxAggregateOutputType = {
    id: string | null
    applicationId: string | null
    assignedById: string | null
    assignedToId: string | null
    expectedCompletionDate: Date | null
    priority: number | null
    instructions: string | null
    createdAt: Date | null
  }

  export type OfficerAssignmentCountAggregateOutputType = {
    id: number
    applicationId: number
    assignedById: number
    assignedToId: number
    expectedCompletionDate: number
    priority: number
    instructions: number
    createdAt: number
    _all: number
  }


  export type OfficerAssignmentAvgAggregateInputType = {
    priority?: true
  }

  export type OfficerAssignmentSumAggregateInputType = {
    priority?: true
  }

  export type OfficerAssignmentMinAggregateInputType = {
    id?: true
    applicationId?: true
    assignedById?: true
    assignedToId?: true
    expectedCompletionDate?: true
    priority?: true
    instructions?: true
    createdAt?: true
  }

  export type OfficerAssignmentMaxAggregateInputType = {
    id?: true
    applicationId?: true
    assignedById?: true
    assignedToId?: true
    expectedCompletionDate?: true
    priority?: true
    instructions?: true
    createdAt?: true
  }

  export type OfficerAssignmentCountAggregateInputType = {
    id?: true
    applicationId?: true
    assignedById?: true
    assignedToId?: true
    expectedCompletionDate?: true
    priority?: true
    instructions?: true
    createdAt?: true
    _all?: true
  }

  export type OfficerAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OfficerAssignment to aggregate.
     */
    where?: OfficerAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OfficerAssignments to fetch.
     */
    orderBy?: OfficerAssignmentOrderByWithRelationInput | OfficerAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OfficerAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OfficerAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OfficerAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OfficerAssignments
    **/
    _count?: true | OfficerAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OfficerAssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OfficerAssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OfficerAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OfficerAssignmentMaxAggregateInputType
  }

  export type GetOfficerAssignmentAggregateType<T extends OfficerAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateOfficerAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOfficerAssignment[P]>
      : GetScalarType<T[P], AggregateOfficerAssignment[P]>
  }




  export type OfficerAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OfficerAssignmentWhereInput
    orderBy?: OfficerAssignmentOrderByWithAggregationInput | OfficerAssignmentOrderByWithAggregationInput[]
    by: OfficerAssignmentScalarFieldEnum[] | OfficerAssignmentScalarFieldEnum
    having?: OfficerAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OfficerAssignmentCountAggregateInputType | true
    _avg?: OfficerAssignmentAvgAggregateInputType
    _sum?: OfficerAssignmentSumAggregateInputType
    _min?: OfficerAssignmentMinAggregateInputType
    _max?: OfficerAssignmentMaxAggregateInputType
  }

  export type OfficerAssignmentGroupByOutputType = {
    id: string
    applicationId: string
    assignedById: string
    assignedToId: string
    expectedCompletionDate: Date | null
    priority: number
    instructions: string | null
    createdAt: Date
    _count: OfficerAssignmentCountAggregateOutputType | null
    _avg: OfficerAssignmentAvgAggregateOutputType | null
    _sum: OfficerAssignmentSumAggregateOutputType | null
    _min: OfficerAssignmentMinAggregateOutputType | null
    _max: OfficerAssignmentMaxAggregateOutputType | null
  }

  type GetOfficerAssignmentGroupByPayload<T extends OfficerAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OfficerAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OfficerAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OfficerAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], OfficerAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type OfficerAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    assignedById?: boolean
    assignedToId?: boolean
    expectedCompletionDate?: boolean
    priority?: boolean
    instructions?: boolean
    createdAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["officerAssignment"]>

  export type OfficerAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    assignedById?: boolean
    assignedToId?: boolean
    expectedCompletionDate?: boolean
    priority?: boolean
    instructions?: boolean
    createdAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["officerAssignment"]>

  export type OfficerAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    assignedById?: boolean
    assignedToId?: boolean
    expectedCompletionDate?: boolean
    priority?: boolean
    instructions?: boolean
    createdAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["officerAssignment"]>

  export type OfficerAssignmentSelectScalar = {
    id?: boolean
    applicationId?: boolean
    assignedById?: boolean
    assignedToId?: boolean
    expectedCompletionDate?: boolean
    priority?: boolean
    instructions?: boolean
    createdAt?: boolean
  }

  export type OfficerAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "applicationId" | "assignedById" | "assignedToId" | "expectedCompletionDate" | "priority" | "instructions" | "createdAt", ExtArgs["result"]["officerAssignment"]>
  export type OfficerAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OfficerAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OfficerAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OfficerAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OfficerAssignment"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
      assignedBy: Prisma.$UserPayload<ExtArgs>
      assignedTo: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      applicationId: string
      assignedById: string
      assignedToId: string
      expectedCompletionDate: Date | null
      priority: number
      instructions: string | null
      createdAt: Date
    }, ExtArgs["result"]["officerAssignment"]>
    composites: {}
  }

  type OfficerAssignmentGetPayload<S extends boolean | null | undefined | OfficerAssignmentDefaultArgs> = $Result.GetResult<Prisma.$OfficerAssignmentPayload, S>

  type OfficerAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OfficerAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OfficerAssignmentCountAggregateInputType | true
    }

  export interface OfficerAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OfficerAssignment'], meta: { name: 'OfficerAssignment' } }
    /**
     * Find zero or one OfficerAssignment that matches the filter.
     * @param {OfficerAssignmentFindUniqueArgs} args - Arguments to find a OfficerAssignment
     * @example
     * // Get one OfficerAssignment
     * const officerAssignment = await prisma.officerAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OfficerAssignmentFindUniqueArgs>(args: SelectSubset<T, OfficerAssignmentFindUniqueArgs<ExtArgs>>): Prisma__OfficerAssignmentClient<$Result.GetResult<Prisma.$OfficerAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OfficerAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OfficerAssignmentFindUniqueOrThrowArgs} args - Arguments to find a OfficerAssignment
     * @example
     * // Get one OfficerAssignment
     * const officerAssignment = await prisma.officerAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OfficerAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, OfficerAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OfficerAssignmentClient<$Result.GetResult<Prisma.$OfficerAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OfficerAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficerAssignmentFindFirstArgs} args - Arguments to find a OfficerAssignment
     * @example
     * // Get one OfficerAssignment
     * const officerAssignment = await prisma.officerAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OfficerAssignmentFindFirstArgs>(args?: SelectSubset<T, OfficerAssignmentFindFirstArgs<ExtArgs>>): Prisma__OfficerAssignmentClient<$Result.GetResult<Prisma.$OfficerAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OfficerAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficerAssignmentFindFirstOrThrowArgs} args - Arguments to find a OfficerAssignment
     * @example
     * // Get one OfficerAssignment
     * const officerAssignment = await prisma.officerAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OfficerAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, OfficerAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__OfficerAssignmentClient<$Result.GetResult<Prisma.$OfficerAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OfficerAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficerAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OfficerAssignments
     * const officerAssignments = await prisma.officerAssignment.findMany()
     * 
     * // Get first 10 OfficerAssignments
     * const officerAssignments = await prisma.officerAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const officerAssignmentWithIdOnly = await prisma.officerAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OfficerAssignmentFindManyArgs>(args?: SelectSubset<T, OfficerAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfficerAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OfficerAssignment.
     * @param {OfficerAssignmentCreateArgs} args - Arguments to create a OfficerAssignment.
     * @example
     * // Create one OfficerAssignment
     * const OfficerAssignment = await prisma.officerAssignment.create({
     *   data: {
     *     // ... data to create a OfficerAssignment
     *   }
     * })
     * 
     */
    create<T extends OfficerAssignmentCreateArgs>(args: SelectSubset<T, OfficerAssignmentCreateArgs<ExtArgs>>): Prisma__OfficerAssignmentClient<$Result.GetResult<Prisma.$OfficerAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OfficerAssignments.
     * @param {OfficerAssignmentCreateManyArgs} args - Arguments to create many OfficerAssignments.
     * @example
     * // Create many OfficerAssignments
     * const officerAssignment = await prisma.officerAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OfficerAssignmentCreateManyArgs>(args?: SelectSubset<T, OfficerAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OfficerAssignments and returns the data saved in the database.
     * @param {OfficerAssignmentCreateManyAndReturnArgs} args - Arguments to create many OfficerAssignments.
     * @example
     * // Create many OfficerAssignments
     * const officerAssignment = await prisma.officerAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OfficerAssignments and only return the `id`
     * const officerAssignmentWithIdOnly = await prisma.officerAssignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OfficerAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, OfficerAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfficerAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OfficerAssignment.
     * @param {OfficerAssignmentDeleteArgs} args - Arguments to delete one OfficerAssignment.
     * @example
     * // Delete one OfficerAssignment
     * const OfficerAssignment = await prisma.officerAssignment.delete({
     *   where: {
     *     // ... filter to delete one OfficerAssignment
     *   }
     * })
     * 
     */
    delete<T extends OfficerAssignmentDeleteArgs>(args: SelectSubset<T, OfficerAssignmentDeleteArgs<ExtArgs>>): Prisma__OfficerAssignmentClient<$Result.GetResult<Prisma.$OfficerAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OfficerAssignment.
     * @param {OfficerAssignmentUpdateArgs} args - Arguments to update one OfficerAssignment.
     * @example
     * // Update one OfficerAssignment
     * const officerAssignment = await prisma.officerAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OfficerAssignmentUpdateArgs>(args: SelectSubset<T, OfficerAssignmentUpdateArgs<ExtArgs>>): Prisma__OfficerAssignmentClient<$Result.GetResult<Prisma.$OfficerAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OfficerAssignments.
     * @param {OfficerAssignmentDeleteManyArgs} args - Arguments to filter OfficerAssignments to delete.
     * @example
     * // Delete a few OfficerAssignments
     * const { count } = await prisma.officerAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OfficerAssignmentDeleteManyArgs>(args?: SelectSubset<T, OfficerAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OfficerAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficerAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OfficerAssignments
     * const officerAssignment = await prisma.officerAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OfficerAssignmentUpdateManyArgs>(args: SelectSubset<T, OfficerAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OfficerAssignments and returns the data updated in the database.
     * @param {OfficerAssignmentUpdateManyAndReturnArgs} args - Arguments to update many OfficerAssignments.
     * @example
     * // Update many OfficerAssignments
     * const officerAssignment = await prisma.officerAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OfficerAssignments and only return the `id`
     * const officerAssignmentWithIdOnly = await prisma.officerAssignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OfficerAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, OfficerAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfficerAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OfficerAssignment.
     * @param {OfficerAssignmentUpsertArgs} args - Arguments to update or create a OfficerAssignment.
     * @example
     * // Update or create a OfficerAssignment
     * const officerAssignment = await prisma.officerAssignment.upsert({
     *   create: {
     *     // ... data to create a OfficerAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OfficerAssignment we want to update
     *   }
     * })
     */
    upsert<T extends OfficerAssignmentUpsertArgs>(args: SelectSubset<T, OfficerAssignmentUpsertArgs<ExtArgs>>): Prisma__OfficerAssignmentClient<$Result.GetResult<Prisma.$OfficerAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OfficerAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficerAssignmentCountArgs} args - Arguments to filter OfficerAssignments to count.
     * @example
     * // Count the number of OfficerAssignments
     * const count = await prisma.officerAssignment.count({
     *   where: {
     *     // ... the filter for the OfficerAssignments we want to count
     *   }
     * })
    **/
    count<T extends OfficerAssignmentCountArgs>(
      args?: Subset<T, OfficerAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OfficerAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OfficerAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficerAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OfficerAssignmentAggregateArgs>(args: Subset<T, OfficerAssignmentAggregateArgs>): Prisma.PrismaPromise<GetOfficerAssignmentAggregateType<T>>

    /**
     * Group by OfficerAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficerAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OfficerAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OfficerAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: OfficerAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OfficerAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOfficerAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OfficerAssignment model
   */
  readonly fields: OfficerAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OfficerAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OfficerAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignedTo<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OfficerAssignment model
   */
  interface OfficerAssignmentFieldRefs {
    readonly id: FieldRef<"OfficerAssignment", 'String'>
    readonly applicationId: FieldRef<"OfficerAssignment", 'String'>
    readonly assignedById: FieldRef<"OfficerAssignment", 'String'>
    readonly assignedToId: FieldRef<"OfficerAssignment", 'String'>
    readonly expectedCompletionDate: FieldRef<"OfficerAssignment", 'DateTime'>
    readonly priority: FieldRef<"OfficerAssignment", 'Int'>
    readonly instructions: FieldRef<"OfficerAssignment", 'String'>
    readonly createdAt: FieldRef<"OfficerAssignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OfficerAssignment findUnique
   */
  export type OfficerAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerAssignment
     */
    select?: OfficerAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerAssignment
     */
    omit?: OfficerAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which OfficerAssignment to fetch.
     */
    where: OfficerAssignmentWhereUniqueInput
  }

  /**
   * OfficerAssignment findUniqueOrThrow
   */
  export type OfficerAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerAssignment
     */
    select?: OfficerAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerAssignment
     */
    omit?: OfficerAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which OfficerAssignment to fetch.
     */
    where: OfficerAssignmentWhereUniqueInput
  }

  /**
   * OfficerAssignment findFirst
   */
  export type OfficerAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerAssignment
     */
    select?: OfficerAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerAssignment
     */
    omit?: OfficerAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which OfficerAssignment to fetch.
     */
    where?: OfficerAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OfficerAssignments to fetch.
     */
    orderBy?: OfficerAssignmentOrderByWithRelationInput | OfficerAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OfficerAssignments.
     */
    cursor?: OfficerAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OfficerAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OfficerAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OfficerAssignments.
     */
    distinct?: OfficerAssignmentScalarFieldEnum | OfficerAssignmentScalarFieldEnum[]
  }

  /**
   * OfficerAssignment findFirstOrThrow
   */
  export type OfficerAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerAssignment
     */
    select?: OfficerAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerAssignment
     */
    omit?: OfficerAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which OfficerAssignment to fetch.
     */
    where?: OfficerAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OfficerAssignments to fetch.
     */
    orderBy?: OfficerAssignmentOrderByWithRelationInput | OfficerAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OfficerAssignments.
     */
    cursor?: OfficerAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OfficerAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OfficerAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OfficerAssignments.
     */
    distinct?: OfficerAssignmentScalarFieldEnum | OfficerAssignmentScalarFieldEnum[]
  }

  /**
   * OfficerAssignment findMany
   */
  export type OfficerAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerAssignment
     */
    select?: OfficerAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerAssignment
     */
    omit?: OfficerAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which OfficerAssignments to fetch.
     */
    where?: OfficerAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OfficerAssignments to fetch.
     */
    orderBy?: OfficerAssignmentOrderByWithRelationInput | OfficerAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OfficerAssignments.
     */
    cursor?: OfficerAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OfficerAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OfficerAssignments.
     */
    skip?: number
    distinct?: OfficerAssignmentScalarFieldEnum | OfficerAssignmentScalarFieldEnum[]
  }

  /**
   * OfficerAssignment create
   */
  export type OfficerAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerAssignment
     */
    select?: OfficerAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerAssignment
     */
    omit?: OfficerAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a OfficerAssignment.
     */
    data: XOR<OfficerAssignmentCreateInput, OfficerAssignmentUncheckedCreateInput>
  }

  /**
   * OfficerAssignment createMany
   */
  export type OfficerAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OfficerAssignments.
     */
    data: OfficerAssignmentCreateManyInput | OfficerAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OfficerAssignment createManyAndReturn
   */
  export type OfficerAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerAssignment
     */
    select?: OfficerAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerAssignment
     */
    omit?: OfficerAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many OfficerAssignments.
     */
    data: OfficerAssignmentCreateManyInput | OfficerAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OfficerAssignment update
   */
  export type OfficerAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerAssignment
     */
    select?: OfficerAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerAssignment
     */
    omit?: OfficerAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a OfficerAssignment.
     */
    data: XOR<OfficerAssignmentUpdateInput, OfficerAssignmentUncheckedUpdateInput>
    /**
     * Choose, which OfficerAssignment to update.
     */
    where: OfficerAssignmentWhereUniqueInput
  }

  /**
   * OfficerAssignment updateMany
   */
  export type OfficerAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OfficerAssignments.
     */
    data: XOR<OfficerAssignmentUpdateManyMutationInput, OfficerAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which OfficerAssignments to update
     */
    where?: OfficerAssignmentWhereInput
    /**
     * Limit how many OfficerAssignments to update.
     */
    limit?: number
  }

  /**
   * OfficerAssignment updateManyAndReturn
   */
  export type OfficerAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerAssignment
     */
    select?: OfficerAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerAssignment
     */
    omit?: OfficerAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update OfficerAssignments.
     */
    data: XOR<OfficerAssignmentUpdateManyMutationInput, OfficerAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which OfficerAssignments to update
     */
    where?: OfficerAssignmentWhereInput
    /**
     * Limit how many OfficerAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OfficerAssignment upsert
   */
  export type OfficerAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerAssignment
     */
    select?: OfficerAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerAssignment
     */
    omit?: OfficerAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the OfficerAssignment to update in case it exists.
     */
    where: OfficerAssignmentWhereUniqueInput
    /**
     * In case the OfficerAssignment found by the `where` argument doesn't exist, create a new OfficerAssignment with this data.
     */
    create: XOR<OfficerAssignmentCreateInput, OfficerAssignmentUncheckedCreateInput>
    /**
     * In case the OfficerAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OfficerAssignmentUpdateInput, OfficerAssignmentUncheckedUpdateInput>
  }

  /**
   * OfficerAssignment delete
   */
  export type OfficerAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerAssignment
     */
    select?: OfficerAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerAssignment
     */
    omit?: OfficerAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerAssignmentInclude<ExtArgs> | null
    /**
     * Filter which OfficerAssignment to delete.
     */
    where: OfficerAssignmentWhereUniqueInput
  }

  /**
   * OfficerAssignment deleteMany
   */
  export type OfficerAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OfficerAssignments to delete
     */
    where?: OfficerAssignmentWhereInput
    /**
     * Limit how many OfficerAssignments to delete.
     */
    limit?: number
  }

  /**
   * OfficerAssignment without action
   */
  export type OfficerAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficerAssignment
     */
    select?: OfficerAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OfficerAssignment
     */
    omit?: OfficerAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficerAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type DocumentSumAggregateOutputType = {
    fileSize: number | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    applicationId: string | null
    documentType: $Enums.DocumentType | null
    fileName: string | null
    filePath: string | null
    fileSize: number | null
    uploadedById: string | null
    isVerified: boolean | null
    verifiedById: string | null
    verificationNotes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    applicationId: string | null
    documentType: $Enums.DocumentType | null
    fileName: string | null
    filePath: string | null
    fileSize: number | null
    uploadedById: string | null
    isVerified: boolean | null
    verifiedById: string | null
    verificationNotes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    applicationId: number
    documentType: number
    fileName: number
    filePath: number
    fileSize: number
    uploadedById: number
    isVerified: number
    verifiedById: number
    verificationNotes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DocumentAvgAggregateInputType = {
    fileSize?: true
  }

  export type DocumentSumAggregateInputType = {
    fileSize?: true
  }

  export type DocumentMinAggregateInputType = {
    id?: true
    applicationId?: true
    documentType?: true
    fileName?: true
    filePath?: true
    fileSize?: true
    uploadedById?: true
    isVerified?: true
    verifiedById?: true
    verificationNotes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    applicationId?: true
    documentType?: true
    fileName?: true
    filePath?: true
    fileSize?: true
    uploadedById?: true
    isVerified?: true
    verifiedById?: true
    verificationNotes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    applicationId?: true
    documentType?: true
    fileName?: true
    filePath?: true
    fileSize?: true
    uploadedById?: true
    isVerified?: true
    verifiedById?: true
    verificationNotes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _avg?: DocumentAvgAggregateInputType
    _sum?: DocumentSumAggregateInputType
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    applicationId: string
    documentType: $Enums.DocumentType
    fileName: string
    filePath: string
    fileSize: number
    uploadedById: string
    isVerified: boolean
    verifiedById: string | null
    verificationNotes: string | null
    createdAt: Date
    updatedAt: Date
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    documentType?: boolean
    fileName?: boolean
    filePath?: boolean
    fileSize?: boolean
    uploadedById?: boolean
    isVerified?: boolean
    verifiedById?: boolean
    verificationNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
    verifiedBy?: boolean | Document$verifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    documentType?: boolean
    fileName?: boolean
    filePath?: boolean
    fileSize?: boolean
    uploadedById?: boolean
    isVerified?: boolean
    verifiedById?: boolean
    verificationNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
    verifiedBy?: boolean | Document$verifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    documentType?: boolean
    fileName?: boolean
    filePath?: boolean
    fileSize?: boolean
    uploadedById?: boolean
    isVerified?: boolean
    verifiedById?: boolean
    verificationNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
    verifiedBy?: boolean | Document$verifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    applicationId?: boolean
    documentType?: boolean
    fileName?: boolean
    filePath?: boolean
    fileSize?: boolean
    uploadedById?: boolean
    isVerified?: boolean
    verifiedById?: boolean
    verificationNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "applicationId" | "documentType" | "fileName" | "filePath" | "fileSize" | "uploadedById" | "isVerified" | "verifiedById" | "verificationNotes" | "createdAt" | "updatedAt", ExtArgs["result"]["document"]>
  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
    verifiedBy?: boolean | Document$verifiedByArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
    verifiedBy?: boolean | Document$verifiedByArgs<ExtArgs>
  }
  export type DocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
    verifiedBy?: boolean | Document$verifiedByArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
      uploadedBy: Prisma.$UserPayload<ExtArgs>
      verifiedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      applicationId: string
      documentType: $Enums.DocumentType
      fileName: string
      filePath: string
      fileSize: number
      uploadedById: string
      isVerified: boolean
      verifiedById: string | null
      verificationNotes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents and returns the data updated in the database.
     * @param {DocumentUpdateManyAndReturnArgs} args - Arguments to update many Documents.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    verifiedBy<T extends Document$verifiedByArgs<ExtArgs> = {}>(args?: Subset<T, Document$verifiedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly applicationId: FieldRef<"Document", 'String'>
    readonly documentType: FieldRef<"Document", 'DocumentType'>
    readonly fileName: FieldRef<"Document", 'String'>
    readonly filePath: FieldRef<"Document", 'String'>
    readonly fileSize: FieldRef<"Document", 'Int'>
    readonly uploadedById: FieldRef<"Document", 'String'>
    readonly isVerified: FieldRef<"Document", 'Boolean'>
    readonly verifiedById: FieldRef<"Document", 'String'>
    readonly verificationNotes: FieldRef<"Document", 'String'>
    readonly createdAt: FieldRef<"Document", 'DateTime'>
    readonly updatedAt: FieldRef<"Document", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
  }

  /**
   * Document updateManyAndReturn
   */
  export type DocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to delete.
     */
    limit?: number
  }

  /**
   * Document.verifiedBy
   */
  export type Document$verifiedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model DocumentRequest
   */

  export type AggregateDocumentRequest = {
    _count: DocumentRequestCountAggregateOutputType | null
    _min: DocumentRequestMinAggregateOutputType | null
    _max: DocumentRequestMaxAggregateOutputType | null
  }

  export type DocumentRequestMinAggregateOutputType = {
    id: string | null
    applicationId: string | null
    requestedById: string | null
    documentType: $Enums.DocumentType | null
    reason: string | null
    dueDate: Date | null
    isCompleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DocumentRequestMaxAggregateOutputType = {
    id: string | null
    applicationId: string | null
    requestedById: string | null
    documentType: $Enums.DocumentType | null
    reason: string | null
    dueDate: Date | null
    isCompleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DocumentRequestCountAggregateOutputType = {
    id: number
    applicationId: number
    requestedById: number
    documentType: number
    reason: number
    dueDate: number
    isCompleted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DocumentRequestMinAggregateInputType = {
    id?: true
    applicationId?: true
    requestedById?: true
    documentType?: true
    reason?: true
    dueDate?: true
    isCompleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DocumentRequestMaxAggregateInputType = {
    id?: true
    applicationId?: true
    requestedById?: true
    documentType?: true
    reason?: true
    dueDate?: true
    isCompleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DocumentRequestCountAggregateInputType = {
    id?: true
    applicationId?: true
    requestedById?: true
    documentType?: true
    reason?: true
    dueDate?: true
    isCompleted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DocumentRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentRequest to aggregate.
     */
    where?: DocumentRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentRequests to fetch.
     */
    orderBy?: DocumentRequestOrderByWithRelationInput | DocumentRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentRequests
    **/
    _count?: true | DocumentRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentRequestMaxAggregateInputType
  }

  export type GetDocumentRequestAggregateType<T extends DocumentRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentRequest[P]>
      : GetScalarType<T[P], AggregateDocumentRequest[P]>
  }




  export type DocumentRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentRequestWhereInput
    orderBy?: DocumentRequestOrderByWithAggregationInput | DocumentRequestOrderByWithAggregationInput[]
    by: DocumentRequestScalarFieldEnum[] | DocumentRequestScalarFieldEnum
    having?: DocumentRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentRequestCountAggregateInputType | true
    _min?: DocumentRequestMinAggregateInputType
    _max?: DocumentRequestMaxAggregateInputType
  }

  export type DocumentRequestGroupByOutputType = {
    id: string
    applicationId: string
    requestedById: string
    documentType: $Enums.DocumentType
    reason: string | null
    dueDate: Date | null
    isCompleted: boolean
    createdAt: Date
    updatedAt: Date
    _count: DocumentRequestCountAggregateOutputType | null
    _min: DocumentRequestMinAggregateOutputType | null
    _max: DocumentRequestMaxAggregateOutputType | null
  }

  type GetDocumentRequestGroupByPayload<T extends DocumentRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentRequestGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentRequestGroupByOutputType[P]>
        }
      >
    >


  export type DocumentRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    requestedById?: boolean
    documentType?: boolean
    reason?: boolean
    dueDate?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentRequest"]>

  export type DocumentRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    requestedById?: boolean
    documentType?: boolean
    reason?: boolean
    dueDate?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentRequest"]>

  export type DocumentRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    requestedById?: boolean
    documentType?: boolean
    reason?: boolean
    dueDate?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentRequest"]>

  export type DocumentRequestSelectScalar = {
    id?: boolean
    applicationId?: boolean
    requestedById?: boolean
    documentType?: boolean
    reason?: boolean
    dueDate?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DocumentRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "applicationId" | "requestedById" | "documentType" | "reason" | "dueDate" | "isCompleted" | "createdAt" | "updatedAt", ExtArgs["result"]["documentRequest"]>
  export type DocumentRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DocumentRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentRequest"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
      requestedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      applicationId: string
      requestedById: string
      documentType: $Enums.DocumentType
      reason: string | null
      dueDate: Date | null
      isCompleted: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["documentRequest"]>
    composites: {}
  }

  type DocumentRequestGetPayload<S extends boolean | null | undefined | DocumentRequestDefaultArgs> = $Result.GetResult<Prisma.$DocumentRequestPayload, S>

  type DocumentRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentRequestCountAggregateInputType | true
    }

  export interface DocumentRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentRequest'], meta: { name: 'DocumentRequest' } }
    /**
     * Find zero or one DocumentRequest that matches the filter.
     * @param {DocumentRequestFindUniqueArgs} args - Arguments to find a DocumentRequest
     * @example
     * // Get one DocumentRequest
     * const documentRequest = await prisma.documentRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentRequestFindUniqueArgs>(args: SelectSubset<T, DocumentRequestFindUniqueArgs<ExtArgs>>): Prisma__DocumentRequestClient<$Result.GetResult<Prisma.$DocumentRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DocumentRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentRequestFindUniqueOrThrowArgs} args - Arguments to find a DocumentRequest
     * @example
     * // Get one DocumentRequest
     * const documentRequest = await prisma.documentRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentRequestClient<$Result.GetResult<Prisma.$DocumentRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentRequestFindFirstArgs} args - Arguments to find a DocumentRequest
     * @example
     * // Get one DocumentRequest
     * const documentRequest = await prisma.documentRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentRequestFindFirstArgs>(args?: SelectSubset<T, DocumentRequestFindFirstArgs<ExtArgs>>): Prisma__DocumentRequestClient<$Result.GetResult<Prisma.$DocumentRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentRequestFindFirstOrThrowArgs} args - Arguments to find a DocumentRequest
     * @example
     * // Get one DocumentRequest
     * const documentRequest = await prisma.documentRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentRequestClient<$Result.GetResult<Prisma.$DocumentRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DocumentRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentRequests
     * const documentRequests = await prisma.documentRequest.findMany()
     * 
     * // Get first 10 DocumentRequests
     * const documentRequests = await prisma.documentRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentRequestWithIdOnly = await prisma.documentRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentRequestFindManyArgs>(args?: SelectSubset<T, DocumentRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DocumentRequest.
     * @param {DocumentRequestCreateArgs} args - Arguments to create a DocumentRequest.
     * @example
     * // Create one DocumentRequest
     * const DocumentRequest = await prisma.documentRequest.create({
     *   data: {
     *     // ... data to create a DocumentRequest
     *   }
     * })
     * 
     */
    create<T extends DocumentRequestCreateArgs>(args: SelectSubset<T, DocumentRequestCreateArgs<ExtArgs>>): Prisma__DocumentRequestClient<$Result.GetResult<Prisma.$DocumentRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DocumentRequests.
     * @param {DocumentRequestCreateManyArgs} args - Arguments to create many DocumentRequests.
     * @example
     * // Create many DocumentRequests
     * const documentRequest = await prisma.documentRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentRequestCreateManyArgs>(args?: SelectSubset<T, DocumentRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentRequests and returns the data saved in the database.
     * @param {DocumentRequestCreateManyAndReturnArgs} args - Arguments to create many DocumentRequests.
     * @example
     * // Create many DocumentRequests
     * const documentRequest = await prisma.documentRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentRequests and only return the `id`
     * const documentRequestWithIdOnly = await prisma.documentRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DocumentRequest.
     * @param {DocumentRequestDeleteArgs} args - Arguments to delete one DocumentRequest.
     * @example
     * // Delete one DocumentRequest
     * const DocumentRequest = await prisma.documentRequest.delete({
     *   where: {
     *     // ... filter to delete one DocumentRequest
     *   }
     * })
     * 
     */
    delete<T extends DocumentRequestDeleteArgs>(args: SelectSubset<T, DocumentRequestDeleteArgs<ExtArgs>>): Prisma__DocumentRequestClient<$Result.GetResult<Prisma.$DocumentRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DocumentRequest.
     * @param {DocumentRequestUpdateArgs} args - Arguments to update one DocumentRequest.
     * @example
     * // Update one DocumentRequest
     * const documentRequest = await prisma.documentRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentRequestUpdateArgs>(args: SelectSubset<T, DocumentRequestUpdateArgs<ExtArgs>>): Prisma__DocumentRequestClient<$Result.GetResult<Prisma.$DocumentRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DocumentRequests.
     * @param {DocumentRequestDeleteManyArgs} args - Arguments to filter DocumentRequests to delete.
     * @example
     * // Delete a few DocumentRequests
     * const { count } = await prisma.documentRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentRequestDeleteManyArgs>(args?: SelectSubset<T, DocumentRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentRequests
     * const documentRequest = await prisma.documentRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentRequestUpdateManyArgs>(args: SelectSubset<T, DocumentRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentRequests and returns the data updated in the database.
     * @param {DocumentRequestUpdateManyAndReturnArgs} args - Arguments to update many DocumentRequests.
     * @example
     * // Update many DocumentRequests
     * const documentRequest = await prisma.documentRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DocumentRequests and only return the `id`
     * const documentRequestWithIdOnly = await prisma.documentRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DocumentRequest.
     * @param {DocumentRequestUpsertArgs} args - Arguments to update or create a DocumentRequest.
     * @example
     * // Update or create a DocumentRequest
     * const documentRequest = await prisma.documentRequest.upsert({
     *   create: {
     *     // ... data to create a DocumentRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentRequest we want to update
     *   }
     * })
     */
    upsert<T extends DocumentRequestUpsertArgs>(args: SelectSubset<T, DocumentRequestUpsertArgs<ExtArgs>>): Prisma__DocumentRequestClient<$Result.GetResult<Prisma.$DocumentRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DocumentRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentRequestCountArgs} args - Arguments to filter DocumentRequests to count.
     * @example
     * // Count the number of DocumentRequests
     * const count = await prisma.documentRequest.count({
     *   where: {
     *     // ... the filter for the DocumentRequests we want to count
     *   }
     * })
    **/
    count<T extends DocumentRequestCountArgs>(
      args?: Subset<T, DocumentRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentRequestAggregateArgs>(args: Subset<T, DocumentRequestAggregateArgs>): Prisma.PrismaPromise<GetDocumentRequestAggregateType<T>>

    /**
     * Group by DocumentRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentRequestGroupByArgs['orderBy'] }
        : { orderBy?: DocumentRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentRequest model
   */
  readonly fields: DocumentRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    requestedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentRequest model
   */
  interface DocumentRequestFieldRefs {
    readonly id: FieldRef<"DocumentRequest", 'String'>
    readonly applicationId: FieldRef<"DocumentRequest", 'String'>
    readonly requestedById: FieldRef<"DocumentRequest", 'String'>
    readonly documentType: FieldRef<"DocumentRequest", 'DocumentType'>
    readonly reason: FieldRef<"DocumentRequest", 'String'>
    readonly dueDate: FieldRef<"DocumentRequest", 'DateTime'>
    readonly isCompleted: FieldRef<"DocumentRequest", 'Boolean'>
    readonly createdAt: FieldRef<"DocumentRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"DocumentRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DocumentRequest findUnique
   */
  export type DocumentRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentRequest
     */
    select?: DocumentRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentRequest
     */
    omit?: DocumentRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentRequestInclude<ExtArgs> | null
    /**
     * Filter, which DocumentRequest to fetch.
     */
    where: DocumentRequestWhereUniqueInput
  }

  /**
   * DocumentRequest findUniqueOrThrow
   */
  export type DocumentRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentRequest
     */
    select?: DocumentRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentRequest
     */
    omit?: DocumentRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentRequestInclude<ExtArgs> | null
    /**
     * Filter, which DocumentRequest to fetch.
     */
    where: DocumentRequestWhereUniqueInput
  }

  /**
   * DocumentRequest findFirst
   */
  export type DocumentRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentRequest
     */
    select?: DocumentRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentRequest
     */
    omit?: DocumentRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentRequestInclude<ExtArgs> | null
    /**
     * Filter, which DocumentRequest to fetch.
     */
    where?: DocumentRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentRequests to fetch.
     */
    orderBy?: DocumentRequestOrderByWithRelationInput | DocumentRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentRequests.
     */
    cursor?: DocumentRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentRequests.
     */
    distinct?: DocumentRequestScalarFieldEnum | DocumentRequestScalarFieldEnum[]
  }

  /**
   * DocumentRequest findFirstOrThrow
   */
  export type DocumentRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentRequest
     */
    select?: DocumentRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentRequest
     */
    omit?: DocumentRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentRequestInclude<ExtArgs> | null
    /**
     * Filter, which DocumentRequest to fetch.
     */
    where?: DocumentRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentRequests to fetch.
     */
    orderBy?: DocumentRequestOrderByWithRelationInput | DocumentRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentRequests.
     */
    cursor?: DocumentRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentRequests.
     */
    distinct?: DocumentRequestScalarFieldEnum | DocumentRequestScalarFieldEnum[]
  }

  /**
   * DocumentRequest findMany
   */
  export type DocumentRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentRequest
     */
    select?: DocumentRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentRequest
     */
    omit?: DocumentRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentRequestInclude<ExtArgs> | null
    /**
     * Filter, which DocumentRequests to fetch.
     */
    where?: DocumentRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentRequests to fetch.
     */
    orderBy?: DocumentRequestOrderByWithRelationInput | DocumentRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentRequests.
     */
    cursor?: DocumentRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentRequests.
     */
    skip?: number
    distinct?: DocumentRequestScalarFieldEnum | DocumentRequestScalarFieldEnum[]
  }

  /**
   * DocumentRequest create
   */
  export type DocumentRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentRequest
     */
    select?: DocumentRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentRequest
     */
    omit?: DocumentRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentRequest.
     */
    data: XOR<DocumentRequestCreateInput, DocumentRequestUncheckedCreateInput>
  }

  /**
   * DocumentRequest createMany
   */
  export type DocumentRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentRequests.
     */
    data: DocumentRequestCreateManyInput | DocumentRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentRequest createManyAndReturn
   */
  export type DocumentRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentRequest
     */
    select?: DocumentRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentRequest
     */
    omit?: DocumentRequestOmit<ExtArgs> | null
    /**
     * The data used to create many DocumentRequests.
     */
    data: DocumentRequestCreateManyInput | DocumentRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentRequest update
   */
  export type DocumentRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentRequest
     */
    select?: DocumentRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentRequest
     */
    omit?: DocumentRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentRequest.
     */
    data: XOR<DocumentRequestUpdateInput, DocumentRequestUncheckedUpdateInput>
    /**
     * Choose, which DocumentRequest to update.
     */
    where: DocumentRequestWhereUniqueInput
  }

  /**
   * DocumentRequest updateMany
   */
  export type DocumentRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentRequests.
     */
    data: XOR<DocumentRequestUpdateManyMutationInput, DocumentRequestUncheckedUpdateManyInput>
    /**
     * Filter which DocumentRequests to update
     */
    where?: DocumentRequestWhereInput
    /**
     * Limit how many DocumentRequests to update.
     */
    limit?: number
  }

  /**
   * DocumentRequest updateManyAndReturn
   */
  export type DocumentRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentRequest
     */
    select?: DocumentRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentRequest
     */
    omit?: DocumentRequestOmit<ExtArgs> | null
    /**
     * The data used to update DocumentRequests.
     */
    data: XOR<DocumentRequestUpdateManyMutationInput, DocumentRequestUncheckedUpdateManyInput>
    /**
     * Filter which DocumentRequests to update
     */
    where?: DocumentRequestWhereInput
    /**
     * Limit how many DocumentRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentRequest upsert
   */
  export type DocumentRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentRequest
     */
    select?: DocumentRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentRequest
     */
    omit?: DocumentRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentRequest to update in case it exists.
     */
    where: DocumentRequestWhereUniqueInput
    /**
     * In case the DocumentRequest found by the `where` argument doesn't exist, create a new DocumentRequest with this data.
     */
    create: XOR<DocumentRequestCreateInput, DocumentRequestUncheckedCreateInput>
    /**
     * In case the DocumentRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentRequestUpdateInput, DocumentRequestUncheckedUpdateInput>
  }

  /**
   * DocumentRequest delete
   */
  export type DocumentRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentRequest
     */
    select?: DocumentRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentRequest
     */
    omit?: DocumentRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentRequestInclude<ExtArgs> | null
    /**
     * Filter which DocumentRequest to delete.
     */
    where: DocumentRequestWhereUniqueInput
  }

  /**
   * DocumentRequest deleteMany
   */
  export type DocumentRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentRequests to delete
     */
    where?: DocumentRequestWhereInput
    /**
     * Limit how many DocumentRequests to delete.
     */
    limit?: number
  }

  /**
   * DocumentRequest without action
   */
  export type DocumentRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentRequest
     */
    select?: DocumentRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentRequest
     */
    omit?: DocumentRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentRequestInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    notificationType: $Enums.NotificationType | null
    applicationId: string | null
    title: string | null
    message: string | null
    isRead: boolean | null
    readAt: Date | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    notificationType: $Enums.NotificationType | null
    applicationId: string | null
    title: string | null
    message: string | null
    isRead: boolean | null
    readAt: Date | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    notificationType: number
    applicationId: number
    title: number
    message: number
    isRead: number
    readAt: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    notificationType?: true
    applicationId?: true
    title?: true
    message?: true
    isRead?: true
    readAt?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    notificationType?: true
    applicationId?: true
    title?: true
    message?: true
    isRead?: true
    readAt?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    notificationType?: true
    applicationId?: true
    title?: true
    message?: true
    isRead?: true
    readAt?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    notificationType: $Enums.NotificationType
    applicationId: string | null
    title: string
    message: string
    isRead: boolean
    readAt: Date | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    notificationType?: boolean
    applicationId?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    readAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    application?: boolean | Notification$applicationArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    notificationType?: boolean
    applicationId?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    readAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    application?: boolean | Notification$applicationArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    notificationType?: boolean
    applicationId?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    readAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    application?: boolean | Notification$applicationArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    notificationType?: boolean
    applicationId?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    readAt?: boolean
    createdAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "notificationType" | "applicationId" | "title" | "message" | "isRead" | "readAt" | "createdAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    application?: boolean | Notification$applicationArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    application?: boolean | Notification$applicationArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    application?: boolean | Notification$applicationArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      application: Prisma.$ApplicationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      notificationType: $Enums.NotificationType
      applicationId: string | null
      title: string
      message: string
      isRead: boolean
      readAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    application<T extends Notification$applicationArgs<ExtArgs> = {}>(args?: Subset<T, Notification$applicationArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly notificationType: FieldRef<"Notification", 'NotificationType'>
    readonly applicationId: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly readAt: FieldRef<"Notification", 'DateTime'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification.application
   */
  export type Notification$applicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model ApplicationAuditLog
   */

  export type AggregateApplicationAuditLog = {
    _count: ApplicationAuditLogCountAggregateOutputType | null
    _min: ApplicationAuditLogMinAggregateOutputType | null
    _max: ApplicationAuditLogMaxAggregateOutputType | null
  }

  export type ApplicationAuditLogMinAggregateOutputType = {
    id: string | null
    applicationId: string | null
    action: string | null
    performedById: string | null
    ipAddress: string | null
    createdAt: Date | null
  }

  export type ApplicationAuditLogMaxAggregateOutputType = {
    id: string | null
    applicationId: string | null
    action: string | null
    performedById: string | null
    ipAddress: string | null
    createdAt: Date | null
  }

  export type ApplicationAuditLogCountAggregateOutputType = {
    id: number
    applicationId: number
    action: number
    performedById: number
    oldValues: number
    newValues: number
    ipAddress: number
    createdAt: number
    _all: number
  }


  export type ApplicationAuditLogMinAggregateInputType = {
    id?: true
    applicationId?: true
    action?: true
    performedById?: true
    ipAddress?: true
    createdAt?: true
  }

  export type ApplicationAuditLogMaxAggregateInputType = {
    id?: true
    applicationId?: true
    action?: true
    performedById?: true
    ipAddress?: true
    createdAt?: true
  }

  export type ApplicationAuditLogCountAggregateInputType = {
    id?: true
    applicationId?: true
    action?: true
    performedById?: true
    oldValues?: true
    newValues?: true
    ipAddress?: true
    createdAt?: true
    _all?: true
  }

  export type ApplicationAuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicationAuditLog to aggregate.
     */
    where?: ApplicationAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationAuditLogs to fetch.
     */
    orderBy?: ApplicationAuditLogOrderByWithRelationInput | ApplicationAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationAuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApplicationAuditLogs
    **/
    _count?: true | ApplicationAuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationAuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationAuditLogMaxAggregateInputType
  }

  export type GetApplicationAuditLogAggregateType<T extends ApplicationAuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateApplicationAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplicationAuditLog[P]>
      : GetScalarType<T[P], AggregateApplicationAuditLog[P]>
  }




  export type ApplicationAuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationAuditLogWhereInput
    orderBy?: ApplicationAuditLogOrderByWithAggregationInput | ApplicationAuditLogOrderByWithAggregationInput[]
    by: ApplicationAuditLogScalarFieldEnum[] | ApplicationAuditLogScalarFieldEnum
    having?: ApplicationAuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationAuditLogCountAggregateInputType | true
    _min?: ApplicationAuditLogMinAggregateInputType
    _max?: ApplicationAuditLogMaxAggregateInputType
  }

  export type ApplicationAuditLogGroupByOutputType = {
    id: string
    applicationId: string
    action: string
    performedById: string
    oldValues: JsonValue | null
    newValues: JsonValue | null
    ipAddress: string | null
    createdAt: Date
    _count: ApplicationAuditLogCountAggregateOutputType | null
    _min: ApplicationAuditLogMinAggregateOutputType | null
    _max: ApplicationAuditLogMaxAggregateOutputType | null
  }

  type GetApplicationAuditLogGroupByPayload<T extends ApplicationAuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationAuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationAuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationAuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationAuditLogGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationAuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    action?: boolean
    performedById?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    performedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicationAuditLog"]>

  export type ApplicationAuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    action?: boolean
    performedById?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    performedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicationAuditLog"]>

  export type ApplicationAuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    action?: boolean
    performedById?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    performedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicationAuditLog"]>

  export type ApplicationAuditLogSelectScalar = {
    id?: boolean
    applicationId?: boolean
    action?: boolean
    performedById?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    createdAt?: boolean
  }

  export type ApplicationAuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "applicationId" | "action" | "performedById" | "oldValues" | "newValues" | "ipAddress" | "createdAt", ExtArgs["result"]["applicationAuditLog"]>
  export type ApplicationAuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    performedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ApplicationAuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    performedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ApplicationAuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    performedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ApplicationAuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApplicationAuditLog"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
      performedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      applicationId: string
      action: string
      performedById: string
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      ipAddress: string | null
      createdAt: Date
    }, ExtArgs["result"]["applicationAuditLog"]>
    composites: {}
  }

  type ApplicationAuditLogGetPayload<S extends boolean | null | undefined | ApplicationAuditLogDefaultArgs> = $Result.GetResult<Prisma.$ApplicationAuditLogPayload, S>

  type ApplicationAuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApplicationAuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApplicationAuditLogCountAggregateInputType | true
    }

  export interface ApplicationAuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApplicationAuditLog'], meta: { name: 'ApplicationAuditLog' } }
    /**
     * Find zero or one ApplicationAuditLog that matches the filter.
     * @param {ApplicationAuditLogFindUniqueArgs} args - Arguments to find a ApplicationAuditLog
     * @example
     * // Get one ApplicationAuditLog
     * const applicationAuditLog = await prisma.applicationAuditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicationAuditLogFindUniqueArgs>(args: SelectSubset<T, ApplicationAuditLogFindUniqueArgs<ExtArgs>>): Prisma__ApplicationAuditLogClient<$Result.GetResult<Prisma.$ApplicationAuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ApplicationAuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApplicationAuditLogFindUniqueOrThrowArgs} args - Arguments to find a ApplicationAuditLog
     * @example
     * // Get one ApplicationAuditLog
     * const applicationAuditLog = await prisma.applicationAuditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicationAuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicationAuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicationAuditLogClient<$Result.GetResult<Prisma.$ApplicationAuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApplicationAuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAuditLogFindFirstArgs} args - Arguments to find a ApplicationAuditLog
     * @example
     * // Get one ApplicationAuditLog
     * const applicationAuditLog = await prisma.applicationAuditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicationAuditLogFindFirstArgs>(args?: SelectSubset<T, ApplicationAuditLogFindFirstArgs<ExtArgs>>): Prisma__ApplicationAuditLogClient<$Result.GetResult<Prisma.$ApplicationAuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApplicationAuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAuditLogFindFirstOrThrowArgs} args - Arguments to find a ApplicationAuditLog
     * @example
     * // Get one ApplicationAuditLog
     * const applicationAuditLog = await prisma.applicationAuditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicationAuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicationAuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicationAuditLogClient<$Result.GetResult<Prisma.$ApplicationAuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ApplicationAuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApplicationAuditLogs
     * const applicationAuditLogs = await prisma.applicationAuditLog.findMany()
     * 
     * // Get first 10 ApplicationAuditLogs
     * const applicationAuditLogs = await prisma.applicationAuditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationAuditLogWithIdOnly = await prisma.applicationAuditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicationAuditLogFindManyArgs>(args?: SelectSubset<T, ApplicationAuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationAuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ApplicationAuditLog.
     * @param {ApplicationAuditLogCreateArgs} args - Arguments to create a ApplicationAuditLog.
     * @example
     * // Create one ApplicationAuditLog
     * const ApplicationAuditLog = await prisma.applicationAuditLog.create({
     *   data: {
     *     // ... data to create a ApplicationAuditLog
     *   }
     * })
     * 
     */
    create<T extends ApplicationAuditLogCreateArgs>(args: SelectSubset<T, ApplicationAuditLogCreateArgs<ExtArgs>>): Prisma__ApplicationAuditLogClient<$Result.GetResult<Prisma.$ApplicationAuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ApplicationAuditLogs.
     * @param {ApplicationAuditLogCreateManyArgs} args - Arguments to create many ApplicationAuditLogs.
     * @example
     * // Create many ApplicationAuditLogs
     * const applicationAuditLog = await prisma.applicationAuditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicationAuditLogCreateManyArgs>(args?: SelectSubset<T, ApplicationAuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApplicationAuditLogs and returns the data saved in the database.
     * @param {ApplicationAuditLogCreateManyAndReturnArgs} args - Arguments to create many ApplicationAuditLogs.
     * @example
     * // Create many ApplicationAuditLogs
     * const applicationAuditLog = await prisma.applicationAuditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApplicationAuditLogs and only return the `id`
     * const applicationAuditLogWithIdOnly = await prisma.applicationAuditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApplicationAuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ApplicationAuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationAuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ApplicationAuditLog.
     * @param {ApplicationAuditLogDeleteArgs} args - Arguments to delete one ApplicationAuditLog.
     * @example
     * // Delete one ApplicationAuditLog
     * const ApplicationAuditLog = await prisma.applicationAuditLog.delete({
     *   where: {
     *     // ... filter to delete one ApplicationAuditLog
     *   }
     * })
     * 
     */
    delete<T extends ApplicationAuditLogDeleteArgs>(args: SelectSubset<T, ApplicationAuditLogDeleteArgs<ExtArgs>>): Prisma__ApplicationAuditLogClient<$Result.GetResult<Prisma.$ApplicationAuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ApplicationAuditLog.
     * @param {ApplicationAuditLogUpdateArgs} args - Arguments to update one ApplicationAuditLog.
     * @example
     * // Update one ApplicationAuditLog
     * const applicationAuditLog = await prisma.applicationAuditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicationAuditLogUpdateArgs>(args: SelectSubset<T, ApplicationAuditLogUpdateArgs<ExtArgs>>): Prisma__ApplicationAuditLogClient<$Result.GetResult<Prisma.$ApplicationAuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ApplicationAuditLogs.
     * @param {ApplicationAuditLogDeleteManyArgs} args - Arguments to filter ApplicationAuditLogs to delete.
     * @example
     * // Delete a few ApplicationAuditLogs
     * const { count } = await prisma.applicationAuditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicationAuditLogDeleteManyArgs>(args?: SelectSubset<T, ApplicationAuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApplicationAuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApplicationAuditLogs
     * const applicationAuditLog = await prisma.applicationAuditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicationAuditLogUpdateManyArgs>(args: SelectSubset<T, ApplicationAuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApplicationAuditLogs and returns the data updated in the database.
     * @param {ApplicationAuditLogUpdateManyAndReturnArgs} args - Arguments to update many ApplicationAuditLogs.
     * @example
     * // Update many ApplicationAuditLogs
     * const applicationAuditLog = await prisma.applicationAuditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ApplicationAuditLogs and only return the `id`
     * const applicationAuditLogWithIdOnly = await prisma.applicationAuditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApplicationAuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, ApplicationAuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationAuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ApplicationAuditLog.
     * @param {ApplicationAuditLogUpsertArgs} args - Arguments to update or create a ApplicationAuditLog.
     * @example
     * // Update or create a ApplicationAuditLog
     * const applicationAuditLog = await prisma.applicationAuditLog.upsert({
     *   create: {
     *     // ... data to create a ApplicationAuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApplicationAuditLog we want to update
     *   }
     * })
     */
    upsert<T extends ApplicationAuditLogUpsertArgs>(args: SelectSubset<T, ApplicationAuditLogUpsertArgs<ExtArgs>>): Prisma__ApplicationAuditLogClient<$Result.GetResult<Prisma.$ApplicationAuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ApplicationAuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAuditLogCountArgs} args - Arguments to filter ApplicationAuditLogs to count.
     * @example
     * // Count the number of ApplicationAuditLogs
     * const count = await prisma.applicationAuditLog.count({
     *   where: {
     *     // ... the filter for the ApplicationAuditLogs we want to count
     *   }
     * })
    **/
    count<T extends ApplicationAuditLogCountArgs>(
      args?: Subset<T, ApplicationAuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationAuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApplicationAuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationAuditLogAggregateArgs>(args: Subset<T, ApplicationAuditLogAggregateArgs>): Prisma.PrismaPromise<GetApplicationAuditLogAggregateType<T>>

    /**
     * Group by ApplicationAuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationAuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationAuditLogGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationAuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationAuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApplicationAuditLog model
   */
  readonly fields: ApplicationAuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApplicationAuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationAuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    performedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApplicationAuditLog model
   */
  interface ApplicationAuditLogFieldRefs {
    readonly id: FieldRef<"ApplicationAuditLog", 'String'>
    readonly applicationId: FieldRef<"ApplicationAuditLog", 'String'>
    readonly action: FieldRef<"ApplicationAuditLog", 'String'>
    readonly performedById: FieldRef<"ApplicationAuditLog", 'String'>
    readonly oldValues: FieldRef<"ApplicationAuditLog", 'Json'>
    readonly newValues: FieldRef<"ApplicationAuditLog", 'Json'>
    readonly ipAddress: FieldRef<"ApplicationAuditLog", 'String'>
    readonly createdAt: FieldRef<"ApplicationAuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ApplicationAuditLog findUnique
   */
  export type ApplicationAuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationAuditLog
     */
    select?: ApplicationAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationAuditLog
     */
    omit?: ApplicationAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationAuditLog to fetch.
     */
    where: ApplicationAuditLogWhereUniqueInput
  }

  /**
   * ApplicationAuditLog findUniqueOrThrow
   */
  export type ApplicationAuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationAuditLog
     */
    select?: ApplicationAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationAuditLog
     */
    omit?: ApplicationAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationAuditLog to fetch.
     */
    where: ApplicationAuditLogWhereUniqueInput
  }

  /**
   * ApplicationAuditLog findFirst
   */
  export type ApplicationAuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationAuditLog
     */
    select?: ApplicationAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationAuditLog
     */
    omit?: ApplicationAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationAuditLog to fetch.
     */
    where?: ApplicationAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationAuditLogs to fetch.
     */
    orderBy?: ApplicationAuditLogOrderByWithRelationInput | ApplicationAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicationAuditLogs.
     */
    cursor?: ApplicationAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationAuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicationAuditLogs.
     */
    distinct?: ApplicationAuditLogScalarFieldEnum | ApplicationAuditLogScalarFieldEnum[]
  }

  /**
   * ApplicationAuditLog findFirstOrThrow
   */
  export type ApplicationAuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationAuditLog
     */
    select?: ApplicationAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationAuditLog
     */
    omit?: ApplicationAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationAuditLog to fetch.
     */
    where?: ApplicationAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationAuditLogs to fetch.
     */
    orderBy?: ApplicationAuditLogOrderByWithRelationInput | ApplicationAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicationAuditLogs.
     */
    cursor?: ApplicationAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationAuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicationAuditLogs.
     */
    distinct?: ApplicationAuditLogScalarFieldEnum | ApplicationAuditLogScalarFieldEnum[]
  }

  /**
   * ApplicationAuditLog findMany
   */
  export type ApplicationAuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationAuditLog
     */
    select?: ApplicationAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationAuditLog
     */
    omit?: ApplicationAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationAuditLogs to fetch.
     */
    where?: ApplicationAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationAuditLogs to fetch.
     */
    orderBy?: ApplicationAuditLogOrderByWithRelationInput | ApplicationAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApplicationAuditLogs.
     */
    cursor?: ApplicationAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationAuditLogs.
     */
    skip?: number
    distinct?: ApplicationAuditLogScalarFieldEnum | ApplicationAuditLogScalarFieldEnum[]
  }

  /**
   * ApplicationAuditLog create
   */
  export type ApplicationAuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationAuditLog
     */
    select?: ApplicationAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationAuditLog
     */
    omit?: ApplicationAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationAuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ApplicationAuditLog.
     */
    data: XOR<ApplicationAuditLogCreateInput, ApplicationAuditLogUncheckedCreateInput>
  }

  /**
   * ApplicationAuditLog createMany
   */
  export type ApplicationAuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApplicationAuditLogs.
     */
    data: ApplicationAuditLogCreateManyInput | ApplicationAuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApplicationAuditLog createManyAndReturn
   */
  export type ApplicationAuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationAuditLog
     */
    select?: ApplicationAuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationAuditLog
     */
    omit?: ApplicationAuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many ApplicationAuditLogs.
     */
    data: ApplicationAuditLogCreateManyInput | ApplicationAuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationAuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApplicationAuditLog update
   */
  export type ApplicationAuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationAuditLog
     */
    select?: ApplicationAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationAuditLog
     */
    omit?: ApplicationAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationAuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ApplicationAuditLog.
     */
    data: XOR<ApplicationAuditLogUpdateInput, ApplicationAuditLogUncheckedUpdateInput>
    /**
     * Choose, which ApplicationAuditLog to update.
     */
    where: ApplicationAuditLogWhereUniqueInput
  }

  /**
   * ApplicationAuditLog updateMany
   */
  export type ApplicationAuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApplicationAuditLogs.
     */
    data: XOR<ApplicationAuditLogUpdateManyMutationInput, ApplicationAuditLogUncheckedUpdateManyInput>
    /**
     * Filter which ApplicationAuditLogs to update
     */
    where?: ApplicationAuditLogWhereInput
    /**
     * Limit how many ApplicationAuditLogs to update.
     */
    limit?: number
  }

  /**
   * ApplicationAuditLog updateManyAndReturn
   */
  export type ApplicationAuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationAuditLog
     */
    select?: ApplicationAuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationAuditLog
     */
    omit?: ApplicationAuditLogOmit<ExtArgs> | null
    /**
     * The data used to update ApplicationAuditLogs.
     */
    data: XOR<ApplicationAuditLogUpdateManyMutationInput, ApplicationAuditLogUncheckedUpdateManyInput>
    /**
     * Filter which ApplicationAuditLogs to update
     */
    where?: ApplicationAuditLogWhereInput
    /**
     * Limit how many ApplicationAuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationAuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApplicationAuditLog upsert
   */
  export type ApplicationAuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationAuditLog
     */
    select?: ApplicationAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationAuditLog
     */
    omit?: ApplicationAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationAuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ApplicationAuditLog to update in case it exists.
     */
    where: ApplicationAuditLogWhereUniqueInput
    /**
     * In case the ApplicationAuditLog found by the `where` argument doesn't exist, create a new ApplicationAuditLog with this data.
     */
    create: XOR<ApplicationAuditLogCreateInput, ApplicationAuditLogUncheckedCreateInput>
    /**
     * In case the ApplicationAuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationAuditLogUpdateInput, ApplicationAuditLogUncheckedUpdateInput>
  }

  /**
   * ApplicationAuditLog delete
   */
  export type ApplicationAuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationAuditLog
     */
    select?: ApplicationAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationAuditLog
     */
    omit?: ApplicationAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationAuditLogInclude<ExtArgs> | null
    /**
     * Filter which ApplicationAuditLog to delete.
     */
    where: ApplicationAuditLogWhereUniqueInput
  }

  /**
   * ApplicationAuditLog deleteMany
   */
  export type ApplicationAuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicationAuditLogs to delete
     */
    where?: ApplicationAuditLogWhereInput
    /**
     * Limit how many ApplicationAuditLogs to delete.
     */
    limit?: number
  }

  /**
   * ApplicationAuditLog without action
   */
  export type ApplicationAuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationAuditLog
     */
    select?: ApplicationAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationAuditLog
     */
    omit?: ApplicationAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationAuditLogInclude<ExtArgs> | null
  }


  /**
   * Model DailyReport
   */

  export type AggregateDailyReport = {
    _count: DailyReportCountAggregateOutputType | null
    _avg: DailyReportAvgAggregateOutputType | null
    _sum: DailyReportSumAggregateOutputType | null
    _min: DailyReportMinAggregateOutputType | null
    _max: DailyReportMaxAggregateOutputType | null
  }

  export type DailyReportAvgAggregateOutputType = {
    totalApplications: number | null
    pendingValidation: number | null
    inProgress: number | null
    completed: number | null
    avgProcessingTime: number | null
  }

  export type DailyReportSumAggregateOutputType = {
    totalApplications: number | null
    pendingValidation: number | null
    inProgress: number | null
    completed: number | null
    avgProcessingTime: number | null
  }

  export type DailyReportMinAggregateOutputType = {
    id: string | null
    reportDate: Date | null
    totalApplications: number | null
    pendingValidation: number | null
    inProgress: number | null
    completed: number | null
    avgProcessingTime: number | null
    createdAt: Date | null
  }

  export type DailyReportMaxAggregateOutputType = {
    id: string | null
    reportDate: Date | null
    totalApplications: number | null
    pendingValidation: number | null
    inProgress: number | null
    completed: number | null
    avgProcessingTime: number | null
    createdAt: Date | null
  }

  export type DailyReportCountAggregateOutputType = {
    id: number
    reportDate: number
    totalApplications: number
    pendingValidation: number
    inProgress: number
    completed: number
    avgProcessingTime: number
    createdAt: number
    _all: number
  }


  export type DailyReportAvgAggregateInputType = {
    totalApplications?: true
    pendingValidation?: true
    inProgress?: true
    completed?: true
    avgProcessingTime?: true
  }

  export type DailyReportSumAggregateInputType = {
    totalApplications?: true
    pendingValidation?: true
    inProgress?: true
    completed?: true
    avgProcessingTime?: true
  }

  export type DailyReportMinAggregateInputType = {
    id?: true
    reportDate?: true
    totalApplications?: true
    pendingValidation?: true
    inProgress?: true
    completed?: true
    avgProcessingTime?: true
    createdAt?: true
  }

  export type DailyReportMaxAggregateInputType = {
    id?: true
    reportDate?: true
    totalApplications?: true
    pendingValidation?: true
    inProgress?: true
    completed?: true
    avgProcessingTime?: true
    createdAt?: true
  }

  export type DailyReportCountAggregateInputType = {
    id?: true
    reportDate?: true
    totalApplications?: true
    pendingValidation?: true
    inProgress?: true
    completed?: true
    avgProcessingTime?: true
    createdAt?: true
    _all?: true
  }

  export type DailyReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyReport to aggregate.
     */
    where?: DailyReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyReports to fetch.
     */
    orderBy?: DailyReportOrderByWithRelationInput | DailyReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DailyReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailyReports
    **/
    _count?: true | DailyReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DailyReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DailyReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyReportMaxAggregateInputType
  }

  export type GetDailyReportAggregateType<T extends DailyReportAggregateArgs> = {
        [P in keyof T & keyof AggregateDailyReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailyReport[P]>
      : GetScalarType<T[P], AggregateDailyReport[P]>
  }




  export type DailyReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyReportWhereInput
    orderBy?: DailyReportOrderByWithAggregationInput | DailyReportOrderByWithAggregationInput[]
    by: DailyReportScalarFieldEnum[] | DailyReportScalarFieldEnum
    having?: DailyReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyReportCountAggregateInputType | true
    _avg?: DailyReportAvgAggregateInputType
    _sum?: DailyReportSumAggregateInputType
    _min?: DailyReportMinAggregateInputType
    _max?: DailyReportMaxAggregateInputType
  }

  export type DailyReportGroupByOutputType = {
    id: string
    reportDate: Date
    totalApplications: number
    pendingValidation: number
    inProgress: number
    completed: number
    avgProcessingTime: number | null
    createdAt: Date
    _count: DailyReportCountAggregateOutputType | null
    _avg: DailyReportAvgAggregateOutputType | null
    _sum: DailyReportSumAggregateOutputType | null
    _min: DailyReportMinAggregateOutputType | null
    _max: DailyReportMaxAggregateOutputType | null
  }

  type GetDailyReportGroupByPayload<T extends DailyReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DailyReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyReportGroupByOutputType[P]>
            : GetScalarType<T[P], DailyReportGroupByOutputType[P]>
        }
      >
    >


  export type DailyReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportDate?: boolean
    totalApplications?: boolean
    pendingValidation?: boolean
    inProgress?: boolean
    completed?: boolean
    avgProcessingTime?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["dailyReport"]>

  export type DailyReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportDate?: boolean
    totalApplications?: boolean
    pendingValidation?: boolean
    inProgress?: boolean
    completed?: boolean
    avgProcessingTime?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["dailyReport"]>

  export type DailyReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportDate?: boolean
    totalApplications?: boolean
    pendingValidation?: boolean
    inProgress?: boolean
    completed?: boolean
    avgProcessingTime?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["dailyReport"]>

  export type DailyReportSelectScalar = {
    id?: boolean
    reportDate?: boolean
    totalApplications?: boolean
    pendingValidation?: boolean
    inProgress?: boolean
    completed?: boolean
    avgProcessingTime?: boolean
    createdAt?: boolean
  }

  export type DailyReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reportDate" | "totalApplications" | "pendingValidation" | "inProgress" | "completed" | "avgProcessingTime" | "createdAt", ExtArgs["result"]["dailyReport"]>

  export type $DailyReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DailyReport"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reportDate: Date
      totalApplications: number
      pendingValidation: number
      inProgress: number
      completed: number
      avgProcessingTime: number | null
      createdAt: Date
    }, ExtArgs["result"]["dailyReport"]>
    composites: {}
  }

  type DailyReportGetPayload<S extends boolean | null | undefined | DailyReportDefaultArgs> = $Result.GetResult<Prisma.$DailyReportPayload, S>

  type DailyReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DailyReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DailyReportCountAggregateInputType | true
    }

  export interface DailyReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DailyReport'], meta: { name: 'DailyReport' } }
    /**
     * Find zero or one DailyReport that matches the filter.
     * @param {DailyReportFindUniqueArgs} args - Arguments to find a DailyReport
     * @example
     * // Get one DailyReport
     * const dailyReport = await prisma.dailyReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DailyReportFindUniqueArgs>(args: SelectSubset<T, DailyReportFindUniqueArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DailyReport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DailyReportFindUniqueOrThrowArgs} args - Arguments to find a DailyReport
     * @example
     * // Get one DailyReport
     * const dailyReport = await prisma.dailyReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DailyReportFindUniqueOrThrowArgs>(args: SelectSubset<T, DailyReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReportFindFirstArgs} args - Arguments to find a DailyReport
     * @example
     * // Get one DailyReport
     * const dailyReport = await prisma.dailyReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DailyReportFindFirstArgs>(args?: SelectSubset<T, DailyReportFindFirstArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReportFindFirstOrThrowArgs} args - Arguments to find a DailyReport
     * @example
     * // Get one DailyReport
     * const dailyReport = await prisma.dailyReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DailyReportFindFirstOrThrowArgs>(args?: SelectSubset<T, DailyReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DailyReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailyReports
     * const dailyReports = await prisma.dailyReport.findMany()
     * 
     * // Get first 10 DailyReports
     * const dailyReports = await prisma.dailyReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyReportWithIdOnly = await prisma.dailyReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DailyReportFindManyArgs>(args?: SelectSubset<T, DailyReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DailyReport.
     * @param {DailyReportCreateArgs} args - Arguments to create a DailyReport.
     * @example
     * // Create one DailyReport
     * const DailyReport = await prisma.dailyReport.create({
     *   data: {
     *     // ... data to create a DailyReport
     *   }
     * })
     * 
     */
    create<T extends DailyReportCreateArgs>(args: SelectSubset<T, DailyReportCreateArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DailyReports.
     * @param {DailyReportCreateManyArgs} args - Arguments to create many DailyReports.
     * @example
     * // Create many DailyReports
     * const dailyReport = await prisma.dailyReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DailyReportCreateManyArgs>(args?: SelectSubset<T, DailyReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DailyReports and returns the data saved in the database.
     * @param {DailyReportCreateManyAndReturnArgs} args - Arguments to create many DailyReports.
     * @example
     * // Create many DailyReports
     * const dailyReport = await prisma.dailyReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DailyReports and only return the `id`
     * const dailyReportWithIdOnly = await prisma.dailyReport.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DailyReportCreateManyAndReturnArgs>(args?: SelectSubset<T, DailyReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DailyReport.
     * @param {DailyReportDeleteArgs} args - Arguments to delete one DailyReport.
     * @example
     * // Delete one DailyReport
     * const DailyReport = await prisma.dailyReport.delete({
     *   where: {
     *     // ... filter to delete one DailyReport
     *   }
     * })
     * 
     */
    delete<T extends DailyReportDeleteArgs>(args: SelectSubset<T, DailyReportDeleteArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DailyReport.
     * @param {DailyReportUpdateArgs} args - Arguments to update one DailyReport.
     * @example
     * // Update one DailyReport
     * const dailyReport = await prisma.dailyReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DailyReportUpdateArgs>(args: SelectSubset<T, DailyReportUpdateArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DailyReports.
     * @param {DailyReportDeleteManyArgs} args - Arguments to filter DailyReports to delete.
     * @example
     * // Delete a few DailyReports
     * const { count } = await prisma.dailyReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DailyReportDeleteManyArgs>(args?: SelectSubset<T, DailyReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailyReports
     * const dailyReport = await prisma.dailyReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DailyReportUpdateManyArgs>(args: SelectSubset<T, DailyReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyReports and returns the data updated in the database.
     * @param {DailyReportUpdateManyAndReturnArgs} args - Arguments to update many DailyReports.
     * @example
     * // Update many DailyReports
     * const dailyReport = await prisma.dailyReport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DailyReports and only return the `id`
     * const dailyReportWithIdOnly = await prisma.dailyReport.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DailyReportUpdateManyAndReturnArgs>(args: SelectSubset<T, DailyReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DailyReport.
     * @param {DailyReportUpsertArgs} args - Arguments to update or create a DailyReport.
     * @example
     * // Update or create a DailyReport
     * const dailyReport = await prisma.dailyReport.upsert({
     *   create: {
     *     // ... data to create a DailyReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailyReport we want to update
     *   }
     * })
     */
    upsert<T extends DailyReportUpsertArgs>(args: SelectSubset<T, DailyReportUpsertArgs<ExtArgs>>): Prisma__DailyReportClient<$Result.GetResult<Prisma.$DailyReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DailyReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReportCountArgs} args - Arguments to filter DailyReports to count.
     * @example
     * // Count the number of DailyReports
     * const count = await prisma.dailyReport.count({
     *   where: {
     *     // ... the filter for the DailyReports we want to count
     *   }
     * })
    **/
    count<T extends DailyReportCountArgs>(
      args?: Subset<T, DailyReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailyReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyReportAggregateArgs>(args: Subset<T, DailyReportAggregateArgs>): Prisma.PrismaPromise<GetDailyReportAggregateType<T>>

    /**
     * Group by DailyReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyReportGroupByArgs['orderBy'] }
        : { orderBy?: DailyReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DailyReport model
   */
  readonly fields: DailyReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DailyReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DailyReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DailyReport model
   */
  interface DailyReportFieldRefs {
    readonly id: FieldRef<"DailyReport", 'String'>
    readonly reportDate: FieldRef<"DailyReport", 'DateTime'>
    readonly totalApplications: FieldRef<"DailyReport", 'Int'>
    readonly pendingValidation: FieldRef<"DailyReport", 'Int'>
    readonly inProgress: FieldRef<"DailyReport", 'Int'>
    readonly completed: FieldRef<"DailyReport", 'Int'>
    readonly avgProcessingTime: FieldRef<"DailyReport", 'Int'>
    readonly createdAt: FieldRef<"DailyReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DailyReport findUnique
   */
  export type DailyReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Filter, which DailyReport to fetch.
     */
    where: DailyReportWhereUniqueInput
  }

  /**
   * DailyReport findUniqueOrThrow
   */
  export type DailyReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Filter, which DailyReport to fetch.
     */
    where: DailyReportWhereUniqueInput
  }

  /**
   * DailyReport findFirst
   */
  export type DailyReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Filter, which DailyReport to fetch.
     */
    where?: DailyReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyReports to fetch.
     */
    orderBy?: DailyReportOrderByWithRelationInput | DailyReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyReports.
     */
    cursor?: DailyReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyReports.
     */
    distinct?: DailyReportScalarFieldEnum | DailyReportScalarFieldEnum[]
  }

  /**
   * DailyReport findFirstOrThrow
   */
  export type DailyReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Filter, which DailyReport to fetch.
     */
    where?: DailyReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyReports to fetch.
     */
    orderBy?: DailyReportOrderByWithRelationInput | DailyReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyReports.
     */
    cursor?: DailyReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyReports.
     */
    distinct?: DailyReportScalarFieldEnum | DailyReportScalarFieldEnum[]
  }

  /**
   * DailyReport findMany
   */
  export type DailyReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Filter, which DailyReports to fetch.
     */
    where?: DailyReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyReports to fetch.
     */
    orderBy?: DailyReportOrderByWithRelationInput | DailyReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailyReports.
     */
    cursor?: DailyReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyReports.
     */
    skip?: number
    distinct?: DailyReportScalarFieldEnum | DailyReportScalarFieldEnum[]
  }

  /**
   * DailyReport create
   */
  export type DailyReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * The data needed to create a DailyReport.
     */
    data: XOR<DailyReportCreateInput, DailyReportUncheckedCreateInput>
  }

  /**
   * DailyReport createMany
   */
  export type DailyReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DailyReports.
     */
    data: DailyReportCreateManyInput | DailyReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DailyReport createManyAndReturn
   */
  export type DailyReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * The data used to create many DailyReports.
     */
    data: DailyReportCreateManyInput | DailyReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DailyReport update
   */
  export type DailyReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * The data needed to update a DailyReport.
     */
    data: XOR<DailyReportUpdateInput, DailyReportUncheckedUpdateInput>
    /**
     * Choose, which DailyReport to update.
     */
    where: DailyReportWhereUniqueInput
  }

  /**
   * DailyReport updateMany
   */
  export type DailyReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DailyReports.
     */
    data: XOR<DailyReportUpdateManyMutationInput, DailyReportUncheckedUpdateManyInput>
    /**
     * Filter which DailyReports to update
     */
    where?: DailyReportWhereInput
    /**
     * Limit how many DailyReports to update.
     */
    limit?: number
  }

  /**
   * DailyReport updateManyAndReturn
   */
  export type DailyReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * The data used to update DailyReports.
     */
    data: XOR<DailyReportUpdateManyMutationInput, DailyReportUncheckedUpdateManyInput>
    /**
     * Filter which DailyReports to update
     */
    where?: DailyReportWhereInput
    /**
     * Limit how many DailyReports to update.
     */
    limit?: number
  }

  /**
   * DailyReport upsert
   */
  export type DailyReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * The filter to search for the DailyReport to update in case it exists.
     */
    where: DailyReportWhereUniqueInput
    /**
     * In case the DailyReport found by the `where` argument doesn't exist, create a new DailyReport with this data.
     */
    create: XOR<DailyReportCreateInput, DailyReportUncheckedCreateInput>
    /**
     * In case the DailyReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DailyReportUpdateInput, DailyReportUncheckedUpdateInput>
  }

  /**
   * DailyReport delete
   */
  export type DailyReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
    /**
     * Filter which DailyReport to delete.
     */
    where: DailyReportWhereUniqueInput
  }

  /**
   * DailyReport deleteMany
   */
  export type DailyReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyReports to delete
     */
    where?: DailyReportWhereInput
    /**
     * Limit how many DailyReports to delete.
     */
    limit?: number
  }

  /**
   * DailyReport without action
   */
  export type DailyReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyReport
     */
    select?: DailyReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyReport
     */
    omit?: DailyReportOmit<ExtArgs> | null
  }


  /**
   * Model SystemSetting
   */

  export type AggregateSystemSetting = {
    _count: SystemSettingCountAggregateOutputType | null
    _min: SystemSettingMinAggregateOutputType | null
    _max: SystemSettingMaxAggregateOutputType | null
  }

  export type SystemSettingMinAggregateOutputType = {
    id: string | null
    settingKey: string | null
    settingValue: string | null
    description: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemSettingMaxAggregateOutputType = {
    id: string | null
    settingKey: string | null
    settingValue: string | null
    description: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemSettingCountAggregateOutputType = {
    id: number
    settingKey: number
    settingValue: number
    description: number
    isPublic: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SystemSettingMinAggregateInputType = {
    id?: true
    settingKey?: true
    settingValue?: true
    description?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemSettingMaxAggregateInputType = {
    id?: true
    settingKey?: true
    settingValue?: true
    description?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemSettingCountAggregateInputType = {
    id?: true
    settingKey?: true
    settingValue?: true
    description?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SystemSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSetting to aggregate.
     */
    where?: SystemSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingOrderByWithRelationInput | SystemSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemSettings
    **/
    _count?: true | SystemSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemSettingMaxAggregateInputType
  }

  export type GetSystemSettingAggregateType<T extends SystemSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemSetting[P]>
      : GetScalarType<T[P], AggregateSystemSetting[P]>
  }




  export type SystemSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemSettingWhereInput
    orderBy?: SystemSettingOrderByWithAggregationInput | SystemSettingOrderByWithAggregationInput[]
    by: SystemSettingScalarFieldEnum[] | SystemSettingScalarFieldEnum
    having?: SystemSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemSettingCountAggregateInputType | true
    _min?: SystemSettingMinAggregateInputType
    _max?: SystemSettingMaxAggregateInputType
  }

  export type SystemSettingGroupByOutputType = {
    id: string
    settingKey: string
    settingValue: string
    description: string | null
    isPublic: boolean
    createdAt: Date
    updatedAt: Date
    _count: SystemSettingCountAggregateOutputType | null
    _min: SystemSettingMinAggregateOutputType | null
    _max: SystemSettingMaxAggregateOutputType | null
  }

  type GetSystemSettingGroupByPayload<T extends SystemSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemSettingGroupByOutputType[P]>
            : GetScalarType<T[P], SystemSettingGroupByOutputType[P]>
        }
      >
    >


  export type SystemSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    settingKey?: boolean
    settingValue?: boolean
    description?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSetting"]>

  export type SystemSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    settingKey?: boolean
    settingValue?: boolean
    description?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSetting"]>

  export type SystemSettingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    settingKey?: boolean
    settingValue?: boolean
    description?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSetting"]>

  export type SystemSettingSelectScalar = {
    id?: boolean
    settingKey?: boolean
    settingValue?: boolean
    description?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SystemSettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "settingKey" | "settingValue" | "description" | "isPublic" | "createdAt" | "updatedAt", ExtArgs["result"]["systemSetting"]>

  export type $SystemSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemSetting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      settingKey: string
      settingValue: string
      description: string | null
      isPublic: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["systemSetting"]>
    composites: {}
  }

  type SystemSettingGetPayload<S extends boolean | null | undefined | SystemSettingDefaultArgs> = $Result.GetResult<Prisma.$SystemSettingPayload, S>

  type SystemSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemSettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemSettingCountAggregateInputType | true
    }

  export interface SystemSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemSetting'], meta: { name: 'SystemSetting' } }
    /**
     * Find zero or one SystemSetting that matches the filter.
     * @param {SystemSettingFindUniqueArgs} args - Arguments to find a SystemSetting
     * @example
     * // Get one SystemSetting
     * const systemSetting = await prisma.systemSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemSettingFindUniqueArgs>(args: SelectSubset<T, SystemSettingFindUniqueArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemSetting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemSettingFindUniqueOrThrowArgs} args - Arguments to find a SystemSetting
     * @example
     * // Get one SystemSetting
     * const systemSetting = await prisma.systemSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingFindFirstArgs} args - Arguments to find a SystemSetting
     * @example
     * // Get one SystemSetting
     * const systemSetting = await prisma.systemSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemSettingFindFirstArgs>(args?: SelectSubset<T, SystemSettingFindFirstArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingFindFirstOrThrowArgs} args - Arguments to find a SystemSetting
     * @example
     * // Get one SystemSetting
     * const systemSetting = await prisma.systemSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemSettings
     * const systemSettings = await prisma.systemSetting.findMany()
     * 
     * // Get first 10 SystemSettings
     * const systemSettings = await prisma.systemSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemSettingWithIdOnly = await prisma.systemSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemSettingFindManyArgs>(args?: SelectSubset<T, SystemSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemSetting.
     * @param {SystemSettingCreateArgs} args - Arguments to create a SystemSetting.
     * @example
     * // Create one SystemSetting
     * const SystemSetting = await prisma.systemSetting.create({
     *   data: {
     *     // ... data to create a SystemSetting
     *   }
     * })
     * 
     */
    create<T extends SystemSettingCreateArgs>(args: SelectSubset<T, SystemSettingCreateArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemSettings.
     * @param {SystemSettingCreateManyArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSetting = await prisma.systemSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemSettingCreateManyArgs>(args?: SelectSubset<T, SystemSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemSettings and returns the data saved in the database.
     * @param {SystemSettingCreateManyAndReturnArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSetting = await prisma.systemSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemSettings and only return the `id`
     * const systemSettingWithIdOnly = await prisma.systemSetting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SystemSetting.
     * @param {SystemSettingDeleteArgs} args - Arguments to delete one SystemSetting.
     * @example
     * // Delete one SystemSetting
     * const SystemSetting = await prisma.systemSetting.delete({
     *   where: {
     *     // ... filter to delete one SystemSetting
     *   }
     * })
     * 
     */
    delete<T extends SystemSettingDeleteArgs>(args: SelectSubset<T, SystemSettingDeleteArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemSetting.
     * @param {SystemSettingUpdateArgs} args - Arguments to update one SystemSetting.
     * @example
     * // Update one SystemSetting
     * const systemSetting = await prisma.systemSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemSettingUpdateArgs>(args: SelectSubset<T, SystemSettingUpdateArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemSettings.
     * @param {SystemSettingDeleteManyArgs} args - Arguments to filter SystemSettings to delete.
     * @example
     * // Delete a few SystemSettings
     * const { count } = await prisma.systemSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemSettingDeleteManyArgs>(args?: SelectSubset<T, SystemSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemSettings
     * const systemSetting = await prisma.systemSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemSettingUpdateManyArgs>(args: SelectSubset<T, SystemSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemSettings and returns the data updated in the database.
     * @param {SystemSettingUpdateManyAndReturnArgs} args - Arguments to update many SystemSettings.
     * @example
     * // Update many SystemSettings
     * const systemSetting = await prisma.systemSetting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SystemSettings and only return the `id`
     * const systemSettingWithIdOnly = await prisma.systemSetting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemSettingUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemSettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SystemSetting.
     * @param {SystemSettingUpsertArgs} args - Arguments to update or create a SystemSetting.
     * @example
     * // Update or create a SystemSetting
     * const systemSetting = await prisma.systemSetting.upsert({
     *   create: {
     *     // ... data to create a SystemSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemSetting we want to update
     *   }
     * })
     */
    upsert<T extends SystemSettingUpsertArgs>(args: SelectSubset<T, SystemSettingUpsertArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingCountArgs} args - Arguments to filter SystemSettings to count.
     * @example
     * // Count the number of SystemSettings
     * const count = await prisma.systemSetting.count({
     *   where: {
     *     // ... the filter for the SystemSettings we want to count
     *   }
     * })
    **/
    count<T extends SystemSettingCountArgs>(
      args?: Subset<T, SystemSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemSettingAggregateArgs>(args: Subset<T, SystemSettingAggregateArgs>): Prisma.PrismaPromise<GetSystemSettingAggregateType<T>>

    /**
     * Group by SystemSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemSettingGroupByArgs['orderBy'] }
        : { orderBy?: SystemSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemSetting model
   */
  readonly fields: SystemSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemSetting model
   */
  interface SystemSettingFieldRefs {
    readonly id: FieldRef<"SystemSetting", 'String'>
    readonly settingKey: FieldRef<"SystemSetting", 'String'>
    readonly settingValue: FieldRef<"SystemSetting", 'String'>
    readonly description: FieldRef<"SystemSetting", 'String'>
    readonly isPublic: FieldRef<"SystemSetting", 'Boolean'>
    readonly createdAt: FieldRef<"SystemSetting", 'DateTime'>
    readonly updatedAt: FieldRef<"SystemSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemSetting findUnique
   */
  export type SystemSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * Filter, which SystemSetting to fetch.
     */
    where: SystemSettingWhereUniqueInput
  }

  /**
   * SystemSetting findUniqueOrThrow
   */
  export type SystemSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * Filter, which SystemSetting to fetch.
     */
    where: SystemSettingWhereUniqueInput
  }

  /**
   * SystemSetting findFirst
   */
  export type SystemSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * Filter, which SystemSetting to fetch.
     */
    where?: SystemSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingOrderByWithRelationInput | SystemSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingScalarFieldEnum | SystemSettingScalarFieldEnum[]
  }

  /**
   * SystemSetting findFirstOrThrow
   */
  export type SystemSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * Filter, which SystemSetting to fetch.
     */
    where?: SystemSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingOrderByWithRelationInput | SystemSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingScalarFieldEnum | SystemSettingScalarFieldEnum[]
  }

  /**
   * SystemSetting findMany
   */
  export type SystemSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingOrderByWithRelationInput | SystemSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemSettings.
     */
    cursor?: SystemSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    distinct?: SystemSettingScalarFieldEnum | SystemSettingScalarFieldEnum[]
  }

  /**
   * SystemSetting create
   */
  export type SystemSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * The data needed to create a SystemSetting.
     */
    data: XOR<SystemSettingCreateInput, SystemSettingUncheckedCreateInput>
  }

  /**
   * SystemSetting createMany
   */
  export type SystemSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingCreateManyInput | SystemSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemSetting createManyAndReturn
   */
  export type SystemSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingCreateManyInput | SystemSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemSetting update
   */
  export type SystemSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * The data needed to update a SystemSetting.
     */
    data: XOR<SystemSettingUpdateInput, SystemSettingUncheckedUpdateInput>
    /**
     * Choose, which SystemSetting to update.
     */
    where: SystemSettingWhereUniqueInput
  }

  /**
   * SystemSetting updateMany
   */
  export type SystemSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemSettings.
     */
    data: XOR<SystemSettingUpdateManyMutationInput, SystemSettingUncheckedUpdateManyInput>
    /**
     * Filter which SystemSettings to update
     */
    where?: SystemSettingWhereInput
    /**
     * Limit how many SystemSettings to update.
     */
    limit?: number
  }

  /**
   * SystemSetting updateManyAndReturn
   */
  export type SystemSettingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * The data used to update SystemSettings.
     */
    data: XOR<SystemSettingUpdateManyMutationInput, SystemSettingUncheckedUpdateManyInput>
    /**
     * Filter which SystemSettings to update
     */
    where?: SystemSettingWhereInput
    /**
     * Limit how many SystemSettings to update.
     */
    limit?: number
  }

  /**
   * SystemSetting upsert
   */
  export type SystemSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * The filter to search for the SystemSetting to update in case it exists.
     */
    where: SystemSettingWhereUniqueInput
    /**
     * In case the SystemSetting found by the `where` argument doesn't exist, create a new SystemSetting with this data.
     */
    create: XOR<SystemSettingCreateInput, SystemSettingUncheckedCreateInput>
    /**
     * In case the SystemSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemSettingUpdateInput, SystemSettingUncheckedUpdateInput>
  }

  /**
   * SystemSetting delete
   */
  export type SystemSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * Filter which SystemSetting to delete.
     */
    where: SystemSettingWhereUniqueInput
  }

  /**
   * SystemSetting deleteMany
   */
  export type SystemSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSettings to delete
     */
    where?: SystemSettingWhereInput
    /**
     * Limit how many SystemSettings to delete.
     */
    limit?: number
  }

  /**
   * SystemSetting without action
   */
  export type SystemSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    id: string | null
    identifier: string | null
    token: string | null
    expires: Date | null
    type: string | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    id: string | null
    identifier: string | null
    token: string | null
    expires: Date | null
    type: string | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    id: number
    identifier: number
    token: number
    expires: number
    type: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    id?: true
    identifier?: true
    token?: true
    expires?: true
    type?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    id?: true
    identifier?: true
    token?: true
    expires?: true
    type?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    id?: true
    identifier?: true
    token?: true
    expires?: true
    type?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    id: string
    identifier: string
    token: string
    expires: Date
    type: string
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    token?: boolean
    expires?: boolean
    type?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    token?: boolean
    expires?: boolean
    type?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    token?: boolean
    expires?: boolean
    type?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    id?: boolean
    identifier?: boolean
    token?: boolean
    expires?: boolean
    type?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "identifier" | "token" | "expires" | "type", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      identifier: string
      token: string
      expires: Date
      type: string
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationTokenWithIdOnly = await prisma.verificationToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `id`
     * const verificationTokenWithIdOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `id`
     * const verificationTokenWithIdOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly id: FieldRef<"VerificationToken", 'String'>
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
    readonly type: FieldRef<"VerificationToken", 'String'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    phone: 'phone',
    passwordHash: 'passwordHash',
    role: 'role',
    isActive: 'isActive',
    lastLoginAt: 'lastLoginAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CitizenProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    fullName: 'fullName',
    phone: 'phone',
    address: 'address',
    aadhaarNumber: 'aadhaarNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CitizenProfileScalarFieldEnum = (typeof CitizenProfileScalarFieldEnum)[keyof typeof CitizenProfileScalarFieldEnum]


  export const OfficerProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    fullName: 'fullName',
    designation: 'designation',
    department: 'department',
    officeLocation: 'officeLocation',
    isAvailable: 'isAvailable',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OfficerProfileScalarFieldEnum = (typeof OfficerProfileScalarFieldEnum)[keyof typeof OfficerProfileScalarFieldEnum]


  export const ServiceCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    slaDays: 'slaDays',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServiceCategoryScalarFieldEnum = (typeof ServiceCategoryScalarFieldEnum)[keyof typeof ServiceCategoryScalarFieldEnum]


  export const ApplicationScalarFieldEnum: {
    id: 'id',
    rrNumber: 'rrNumber',
    serviceCategoryId: 'serviceCategoryId',
    citizenId: 'citizenId',
    status: 'status',
    currentHolderId: 'currentHolderId',
    submittedAt: 'submittedAt',
    validatedAt: 'validatedAt',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ApplicationScalarFieldEnum = (typeof ApplicationScalarFieldEnum)[keyof typeof ApplicationScalarFieldEnum]


  export const ApplicationWorkflowScalarFieldEnum: {
    id: 'id',
    applicationId: 'applicationId',
    fromStatus: 'fromStatus',
    toStatus: 'toStatus',
    changedById: 'changedById',
    comments: 'comments',
    createdAt: 'createdAt'
  };

  export type ApplicationWorkflowScalarFieldEnum = (typeof ApplicationWorkflowScalarFieldEnum)[keyof typeof ApplicationWorkflowScalarFieldEnum]


  export const ApplicationValidationScalarFieldEnum: {
    id: 'id',
    applicationId: 'applicationId',
    validatedById: 'validatedById',
    rrNumber: 'rrNumber',
    isDocumentsComplete: 'isDocumentsComplete',
    isEligibilityVerified: 'isEligibilityVerified',
    validationNotes: 'validationNotes',
    createdAt: 'createdAt'
  };

  export type ApplicationValidationScalarFieldEnum = (typeof ApplicationValidationScalarFieldEnum)[keyof typeof ApplicationValidationScalarFieldEnum]


  export const OfficerAssignmentScalarFieldEnum: {
    id: 'id',
    applicationId: 'applicationId',
    assignedById: 'assignedById',
    assignedToId: 'assignedToId',
    expectedCompletionDate: 'expectedCompletionDate',
    priority: 'priority',
    instructions: 'instructions',
    createdAt: 'createdAt'
  };

  export type OfficerAssignmentScalarFieldEnum = (typeof OfficerAssignmentScalarFieldEnum)[keyof typeof OfficerAssignmentScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    applicationId: 'applicationId',
    documentType: 'documentType',
    fileName: 'fileName',
    filePath: 'filePath',
    fileSize: 'fileSize',
    uploadedById: 'uploadedById',
    isVerified: 'isVerified',
    verifiedById: 'verifiedById',
    verificationNotes: 'verificationNotes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const DocumentRequestScalarFieldEnum: {
    id: 'id',
    applicationId: 'applicationId',
    requestedById: 'requestedById',
    documentType: 'documentType',
    reason: 'reason',
    dueDate: 'dueDate',
    isCompleted: 'isCompleted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DocumentRequestScalarFieldEnum = (typeof DocumentRequestScalarFieldEnum)[keyof typeof DocumentRequestScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    notificationType: 'notificationType',
    applicationId: 'applicationId',
    title: 'title',
    message: 'message',
    isRead: 'isRead',
    readAt: 'readAt',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const ApplicationAuditLogScalarFieldEnum: {
    id: 'id',
    applicationId: 'applicationId',
    action: 'action',
    performedById: 'performedById',
    oldValues: 'oldValues',
    newValues: 'newValues',
    ipAddress: 'ipAddress',
    createdAt: 'createdAt'
  };

  export type ApplicationAuditLogScalarFieldEnum = (typeof ApplicationAuditLogScalarFieldEnum)[keyof typeof ApplicationAuditLogScalarFieldEnum]


  export const DailyReportScalarFieldEnum: {
    id: 'id',
    reportDate: 'reportDate',
    totalApplications: 'totalApplications',
    pendingValidation: 'pendingValidation',
    inProgress: 'inProgress',
    completed: 'completed',
    avgProcessingTime: 'avgProcessingTime',
    createdAt: 'createdAt'
  };

  export type DailyReportScalarFieldEnum = (typeof DailyReportScalarFieldEnum)[keyof typeof DailyReportScalarFieldEnum]


  export const SystemSettingScalarFieldEnum: {
    id: 'id',
    settingKey: 'settingKey',
    settingValue: 'settingValue',
    description: 'description',
    isPublic: 'isPublic',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SystemSettingScalarFieldEnum = (typeof SystemSettingScalarFieldEnum)[keyof typeof SystemSettingScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    token: 'token',
    expires: 'expires',
    type: 'type'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'ApplicationStatus'
   */
  export type EnumApplicationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApplicationStatus'>
    


  /**
   * Reference to a field of type 'ApplicationStatus[]'
   */
  export type ListEnumApplicationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApplicationStatus[]'>
    


  /**
   * Reference to a field of type 'DocumentType'
   */
  export type EnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType'>
    


  /**
   * Reference to a field of type 'DocumentType[]'
   */
  export type ListEnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    passwordHash?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    citizenProfile?: XOR<CitizenProfileNullableScalarRelationFilter, CitizenProfileWhereInput> | null
    officerProfile?: XOR<OfficerProfileNullableScalarRelationFilter, OfficerProfileWhereInput> | null
    applications?: ApplicationListRelationFilter
    currentHolderFiles?: ApplicationListRelationFilter
    workflowChanges?: ApplicationWorkflowListRelationFilter
    validations?: ApplicationValidationListRelationFilter
    verifiedDocuments?: DocumentListRelationFilter
    uploadedDocuments?: DocumentListRelationFilter
    assignmentsGiven?: OfficerAssignmentListRelationFilter
    assignmentsReceived?: OfficerAssignmentListRelationFilter
    documentRequests?: DocumentRequestListRelationFilter
    notifications?: NotificationListRelationFilter
    auditLogs?: ApplicationAuditLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    passwordHash?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    citizenProfile?: CitizenProfileOrderByWithRelationInput
    officerProfile?: OfficerProfileOrderByWithRelationInput
    applications?: ApplicationOrderByRelationAggregateInput
    currentHolderFiles?: ApplicationOrderByRelationAggregateInput
    workflowChanges?: ApplicationWorkflowOrderByRelationAggregateInput
    validations?: ApplicationValidationOrderByRelationAggregateInput
    verifiedDocuments?: DocumentOrderByRelationAggregateInput
    uploadedDocuments?: DocumentOrderByRelationAggregateInput
    assignmentsGiven?: OfficerAssignmentOrderByRelationAggregateInput
    assignmentsReceived?: OfficerAssignmentOrderByRelationAggregateInput
    documentRequests?: DocumentRequestOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    auditLogs?: ApplicationAuditLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    citizenProfile?: XOR<CitizenProfileNullableScalarRelationFilter, CitizenProfileWhereInput> | null
    officerProfile?: XOR<OfficerProfileNullableScalarRelationFilter, OfficerProfileWhereInput> | null
    applications?: ApplicationListRelationFilter
    currentHolderFiles?: ApplicationListRelationFilter
    workflowChanges?: ApplicationWorkflowListRelationFilter
    validations?: ApplicationValidationListRelationFilter
    verifiedDocuments?: DocumentListRelationFilter
    uploadedDocuments?: DocumentListRelationFilter
    assignmentsGiven?: OfficerAssignmentListRelationFilter
    assignmentsReceived?: OfficerAssignmentListRelationFilter
    documentRequests?: DocumentRequestListRelationFilter
    notifications?: NotificationListRelationFilter
    auditLogs?: ApplicationAuditLogListRelationFilter
  }, "id" | "email" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    passwordHash?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CitizenProfileWhereInput = {
    AND?: CitizenProfileWhereInput | CitizenProfileWhereInput[]
    OR?: CitizenProfileWhereInput[]
    NOT?: CitizenProfileWhereInput | CitizenProfileWhereInput[]
    id?: StringFilter<"CitizenProfile"> | string
    userId?: StringFilter<"CitizenProfile"> | string
    fullName?: StringFilter<"CitizenProfile"> | string
    phone?: StringFilter<"CitizenProfile"> | string
    address?: StringFilter<"CitizenProfile"> | string
    aadhaarNumber?: StringNullableFilter<"CitizenProfile"> | string | null
    createdAt?: DateTimeFilter<"CitizenProfile"> | Date | string
    updatedAt?: DateTimeFilter<"CitizenProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CitizenProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    aadhaarNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CitizenProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: CitizenProfileWhereInput | CitizenProfileWhereInput[]
    OR?: CitizenProfileWhereInput[]
    NOT?: CitizenProfileWhereInput | CitizenProfileWhereInput[]
    fullName?: StringFilter<"CitizenProfile"> | string
    phone?: StringFilter<"CitizenProfile"> | string
    address?: StringFilter<"CitizenProfile"> | string
    aadhaarNumber?: StringNullableFilter<"CitizenProfile"> | string | null
    createdAt?: DateTimeFilter<"CitizenProfile"> | Date | string
    updatedAt?: DateTimeFilter<"CitizenProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type CitizenProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    aadhaarNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CitizenProfileCountOrderByAggregateInput
    _max?: CitizenProfileMaxOrderByAggregateInput
    _min?: CitizenProfileMinOrderByAggregateInput
  }

  export type CitizenProfileScalarWhereWithAggregatesInput = {
    AND?: CitizenProfileScalarWhereWithAggregatesInput | CitizenProfileScalarWhereWithAggregatesInput[]
    OR?: CitizenProfileScalarWhereWithAggregatesInput[]
    NOT?: CitizenProfileScalarWhereWithAggregatesInput | CitizenProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CitizenProfile"> | string
    userId?: StringWithAggregatesFilter<"CitizenProfile"> | string
    fullName?: StringWithAggregatesFilter<"CitizenProfile"> | string
    phone?: StringWithAggregatesFilter<"CitizenProfile"> | string
    address?: StringWithAggregatesFilter<"CitizenProfile"> | string
    aadhaarNumber?: StringNullableWithAggregatesFilter<"CitizenProfile"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CitizenProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CitizenProfile"> | Date | string
  }

  export type OfficerProfileWhereInput = {
    AND?: OfficerProfileWhereInput | OfficerProfileWhereInput[]
    OR?: OfficerProfileWhereInput[]
    NOT?: OfficerProfileWhereInput | OfficerProfileWhereInput[]
    id?: StringFilter<"OfficerProfile"> | string
    userId?: StringFilter<"OfficerProfile"> | string
    fullName?: StringFilter<"OfficerProfile"> | string
    designation?: StringFilter<"OfficerProfile"> | string
    department?: StringFilter<"OfficerProfile"> | string
    officeLocation?: StringNullableFilter<"OfficerProfile"> | string | null
    isAvailable?: BoolFilter<"OfficerProfile"> | boolean
    createdAt?: DateTimeFilter<"OfficerProfile"> | Date | string
    updatedAt?: DateTimeFilter<"OfficerProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type OfficerProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    designation?: SortOrder
    department?: SortOrder
    officeLocation?: SortOrderInput | SortOrder
    isAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type OfficerProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: OfficerProfileWhereInput | OfficerProfileWhereInput[]
    OR?: OfficerProfileWhereInput[]
    NOT?: OfficerProfileWhereInput | OfficerProfileWhereInput[]
    fullName?: StringFilter<"OfficerProfile"> | string
    designation?: StringFilter<"OfficerProfile"> | string
    department?: StringFilter<"OfficerProfile"> | string
    officeLocation?: StringNullableFilter<"OfficerProfile"> | string | null
    isAvailable?: BoolFilter<"OfficerProfile"> | boolean
    createdAt?: DateTimeFilter<"OfficerProfile"> | Date | string
    updatedAt?: DateTimeFilter<"OfficerProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type OfficerProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    designation?: SortOrder
    department?: SortOrder
    officeLocation?: SortOrderInput | SortOrder
    isAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OfficerProfileCountOrderByAggregateInput
    _max?: OfficerProfileMaxOrderByAggregateInput
    _min?: OfficerProfileMinOrderByAggregateInput
  }

  export type OfficerProfileScalarWhereWithAggregatesInput = {
    AND?: OfficerProfileScalarWhereWithAggregatesInput | OfficerProfileScalarWhereWithAggregatesInput[]
    OR?: OfficerProfileScalarWhereWithAggregatesInput[]
    NOT?: OfficerProfileScalarWhereWithAggregatesInput | OfficerProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OfficerProfile"> | string
    userId?: StringWithAggregatesFilter<"OfficerProfile"> | string
    fullName?: StringWithAggregatesFilter<"OfficerProfile"> | string
    designation?: StringWithAggregatesFilter<"OfficerProfile"> | string
    department?: StringWithAggregatesFilter<"OfficerProfile"> | string
    officeLocation?: StringNullableWithAggregatesFilter<"OfficerProfile"> | string | null
    isAvailable?: BoolWithAggregatesFilter<"OfficerProfile"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"OfficerProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OfficerProfile"> | Date | string
  }

  export type ServiceCategoryWhereInput = {
    AND?: ServiceCategoryWhereInput | ServiceCategoryWhereInput[]
    OR?: ServiceCategoryWhereInput[]
    NOT?: ServiceCategoryWhereInput | ServiceCategoryWhereInput[]
    id?: StringFilter<"ServiceCategory"> | string
    name?: StringFilter<"ServiceCategory"> | string
    description?: StringNullableFilter<"ServiceCategory"> | string | null
    slaDays?: IntFilter<"ServiceCategory"> | number
    isActive?: BoolFilter<"ServiceCategory"> | boolean
    createdAt?: DateTimeFilter<"ServiceCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceCategory"> | Date | string
    applications?: ApplicationListRelationFilter
  }

  export type ServiceCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    slaDays?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applications?: ApplicationOrderByRelationAggregateInput
  }

  export type ServiceCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ServiceCategoryWhereInput | ServiceCategoryWhereInput[]
    OR?: ServiceCategoryWhereInput[]
    NOT?: ServiceCategoryWhereInput | ServiceCategoryWhereInput[]
    description?: StringNullableFilter<"ServiceCategory"> | string | null
    slaDays?: IntFilter<"ServiceCategory"> | number
    isActive?: BoolFilter<"ServiceCategory"> | boolean
    createdAt?: DateTimeFilter<"ServiceCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceCategory"> | Date | string
    applications?: ApplicationListRelationFilter
  }, "id" | "name">

  export type ServiceCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    slaDays?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServiceCategoryCountOrderByAggregateInput
    _avg?: ServiceCategoryAvgOrderByAggregateInput
    _max?: ServiceCategoryMaxOrderByAggregateInput
    _min?: ServiceCategoryMinOrderByAggregateInput
    _sum?: ServiceCategorySumOrderByAggregateInput
  }

  export type ServiceCategoryScalarWhereWithAggregatesInput = {
    AND?: ServiceCategoryScalarWhereWithAggregatesInput | ServiceCategoryScalarWhereWithAggregatesInput[]
    OR?: ServiceCategoryScalarWhereWithAggregatesInput[]
    NOT?: ServiceCategoryScalarWhereWithAggregatesInput | ServiceCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ServiceCategory"> | string
    name?: StringWithAggregatesFilter<"ServiceCategory"> | string
    description?: StringNullableWithAggregatesFilter<"ServiceCategory"> | string | null
    slaDays?: IntWithAggregatesFilter<"ServiceCategory"> | number
    isActive?: BoolWithAggregatesFilter<"ServiceCategory"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ServiceCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ServiceCategory"> | Date | string
  }

  export type ApplicationWhereInput = {
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    id?: StringFilter<"Application"> | string
    rrNumber?: StringNullableFilter<"Application"> | string | null
    serviceCategoryId?: StringFilter<"Application"> | string
    citizenId?: StringFilter<"Application"> | string
    status?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    currentHolderId?: StringNullableFilter<"Application"> | string | null
    submittedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    validatedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    serviceCategory?: XOR<ServiceCategoryScalarRelationFilter, ServiceCategoryWhereInput>
    citizen?: XOR<UserScalarRelationFilter, UserWhereInput>
    currentHolder?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    workflow?: ApplicationWorkflowListRelationFilter
    validation?: XOR<ApplicationValidationNullableScalarRelationFilter, ApplicationValidationWhereInput> | null
    officerAssignments?: OfficerAssignmentListRelationFilter
    documents?: DocumentListRelationFilter
    documentRequests?: DocumentRequestListRelationFilter
    notifications?: NotificationListRelationFilter
    auditLogs?: ApplicationAuditLogListRelationFilter
  }

  export type ApplicationOrderByWithRelationInput = {
    id?: SortOrder
    rrNumber?: SortOrderInput | SortOrder
    serviceCategoryId?: SortOrder
    citizenId?: SortOrder
    status?: SortOrder
    currentHolderId?: SortOrderInput | SortOrder
    submittedAt?: SortOrderInput | SortOrder
    validatedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceCategory?: ServiceCategoryOrderByWithRelationInput
    citizen?: UserOrderByWithRelationInput
    currentHolder?: UserOrderByWithRelationInput
    workflow?: ApplicationWorkflowOrderByRelationAggregateInput
    validation?: ApplicationValidationOrderByWithRelationInput
    officerAssignments?: OfficerAssignmentOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    documentRequests?: DocumentRequestOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    auditLogs?: ApplicationAuditLogOrderByRelationAggregateInput
  }

  export type ApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    rrNumber?: string
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    serviceCategoryId?: StringFilter<"Application"> | string
    citizenId?: StringFilter<"Application"> | string
    status?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    currentHolderId?: StringNullableFilter<"Application"> | string | null
    submittedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    validatedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    serviceCategory?: XOR<ServiceCategoryScalarRelationFilter, ServiceCategoryWhereInput>
    citizen?: XOR<UserScalarRelationFilter, UserWhereInput>
    currentHolder?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    workflow?: ApplicationWorkflowListRelationFilter
    validation?: XOR<ApplicationValidationNullableScalarRelationFilter, ApplicationValidationWhereInput> | null
    officerAssignments?: OfficerAssignmentListRelationFilter
    documents?: DocumentListRelationFilter
    documentRequests?: DocumentRequestListRelationFilter
    notifications?: NotificationListRelationFilter
    auditLogs?: ApplicationAuditLogListRelationFilter
  }, "id" | "rrNumber">

  export type ApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    rrNumber?: SortOrderInput | SortOrder
    serviceCategoryId?: SortOrder
    citizenId?: SortOrder
    status?: SortOrder
    currentHolderId?: SortOrderInput | SortOrder
    submittedAt?: SortOrderInput | SortOrder
    validatedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ApplicationCountOrderByAggregateInput
    _max?: ApplicationMaxOrderByAggregateInput
    _min?: ApplicationMinOrderByAggregateInput
  }

  export type ApplicationScalarWhereWithAggregatesInput = {
    AND?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    OR?: ApplicationScalarWhereWithAggregatesInput[]
    NOT?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Application"> | string
    rrNumber?: StringNullableWithAggregatesFilter<"Application"> | string | null
    serviceCategoryId?: StringWithAggregatesFilter<"Application"> | string
    citizenId?: StringWithAggregatesFilter<"Application"> | string
    status?: EnumApplicationStatusWithAggregatesFilter<"Application"> | $Enums.ApplicationStatus
    currentHolderId?: StringNullableWithAggregatesFilter<"Application"> | string | null
    submittedAt?: DateTimeNullableWithAggregatesFilter<"Application"> | Date | string | null
    validatedAt?: DateTimeNullableWithAggregatesFilter<"Application"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"Application"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
  }

  export type ApplicationWorkflowWhereInput = {
    AND?: ApplicationWorkflowWhereInput | ApplicationWorkflowWhereInput[]
    OR?: ApplicationWorkflowWhereInput[]
    NOT?: ApplicationWorkflowWhereInput | ApplicationWorkflowWhereInput[]
    id?: StringFilter<"ApplicationWorkflow"> | string
    applicationId?: StringFilter<"ApplicationWorkflow"> | string
    fromStatus?: EnumApplicationStatusNullableFilter<"ApplicationWorkflow"> | $Enums.ApplicationStatus | null
    toStatus?: EnumApplicationStatusFilter<"ApplicationWorkflow"> | $Enums.ApplicationStatus
    changedById?: StringFilter<"ApplicationWorkflow"> | string
    comments?: StringNullableFilter<"ApplicationWorkflow"> | string | null
    createdAt?: DateTimeFilter<"ApplicationWorkflow"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    changedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ApplicationWorkflowOrderByWithRelationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    fromStatus?: SortOrderInput | SortOrder
    toStatus?: SortOrder
    changedById?: SortOrder
    comments?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    application?: ApplicationOrderByWithRelationInput
    changedBy?: UserOrderByWithRelationInput
  }

  export type ApplicationWorkflowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ApplicationWorkflowWhereInput | ApplicationWorkflowWhereInput[]
    OR?: ApplicationWorkflowWhereInput[]
    NOT?: ApplicationWorkflowWhereInput | ApplicationWorkflowWhereInput[]
    applicationId?: StringFilter<"ApplicationWorkflow"> | string
    fromStatus?: EnumApplicationStatusNullableFilter<"ApplicationWorkflow"> | $Enums.ApplicationStatus | null
    toStatus?: EnumApplicationStatusFilter<"ApplicationWorkflow"> | $Enums.ApplicationStatus
    changedById?: StringFilter<"ApplicationWorkflow"> | string
    comments?: StringNullableFilter<"ApplicationWorkflow"> | string | null
    createdAt?: DateTimeFilter<"ApplicationWorkflow"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    changedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ApplicationWorkflowOrderByWithAggregationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    fromStatus?: SortOrderInput | SortOrder
    toStatus?: SortOrder
    changedById?: SortOrder
    comments?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ApplicationWorkflowCountOrderByAggregateInput
    _max?: ApplicationWorkflowMaxOrderByAggregateInput
    _min?: ApplicationWorkflowMinOrderByAggregateInput
  }

  export type ApplicationWorkflowScalarWhereWithAggregatesInput = {
    AND?: ApplicationWorkflowScalarWhereWithAggregatesInput | ApplicationWorkflowScalarWhereWithAggregatesInput[]
    OR?: ApplicationWorkflowScalarWhereWithAggregatesInput[]
    NOT?: ApplicationWorkflowScalarWhereWithAggregatesInput | ApplicationWorkflowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ApplicationWorkflow"> | string
    applicationId?: StringWithAggregatesFilter<"ApplicationWorkflow"> | string
    fromStatus?: EnumApplicationStatusNullableWithAggregatesFilter<"ApplicationWorkflow"> | $Enums.ApplicationStatus | null
    toStatus?: EnumApplicationStatusWithAggregatesFilter<"ApplicationWorkflow"> | $Enums.ApplicationStatus
    changedById?: StringWithAggregatesFilter<"ApplicationWorkflow"> | string
    comments?: StringNullableWithAggregatesFilter<"ApplicationWorkflow"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ApplicationWorkflow"> | Date | string
  }

  export type ApplicationValidationWhereInput = {
    AND?: ApplicationValidationWhereInput | ApplicationValidationWhereInput[]
    OR?: ApplicationValidationWhereInput[]
    NOT?: ApplicationValidationWhereInput | ApplicationValidationWhereInput[]
    id?: StringFilter<"ApplicationValidation"> | string
    applicationId?: StringFilter<"ApplicationValidation"> | string
    validatedById?: StringFilter<"ApplicationValidation"> | string
    rrNumber?: StringFilter<"ApplicationValidation"> | string
    isDocumentsComplete?: BoolFilter<"ApplicationValidation"> | boolean
    isEligibilityVerified?: BoolFilter<"ApplicationValidation"> | boolean
    validationNotes?: StringNullableFilter<"ApplicationValidation"> | string | null
    createdAt?: DateTimeFilter<"ApplicationValidation"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    validatedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ApplicationValidationOrderByWithRelationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    validatedById?: SortOrder
    rrNumber?: SortOrder
    isDocumentsComplete?: SortOrder
    isEligibilityVerified?: SortOrder
    validationNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    application?: ApplicationOrderByWithRelationInput
    validatedBy?: UserOrderByWithRelationInput
  }

  export type ApplicationValidationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    applicationId?: string
    AND?: ApplicationValidationWhereInput | ApplicationValidationWhereInput[]
    OR?: ApplicationValidationWhereInput[]
    NOT?: ApplicationValidationWhereInput | ApplicationValidationWhereInput[]
    validatedById?: StringFilter<"ApplicationValidation"> | string
    rrNumber?: StringFilter<"ApplicationValidation"> | string
    isDocumentsComplete?: BoolFilter<"ApplicationValidation"> | boolean
    isEligibilityVerified?: BoolFilter<"ApplicationValidation"> | boolean
    validationNotes?: StringNullableFilter<"ApplicationValidation"> | string | null
    createdAt?: DateTimeFilter<"ApplicationValidation"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    validatedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "applicationId">

  export type ApplicationValidationOrderByWithAggregationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    validatedById?: SortOrder
    rrNumber?: SortOrder
    isDocumentsComplete?: SortOrder
    isEligibilityVerified?: SortOrder
    validationNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ApplicationValidationCountOrderByAggregateInput
    _max?: ApplicationValidationMaxOrderByAggregateInput
    _min?: ApplicationValidationMinOrderByAggregateInput
  }

  export type ApplicationValidationScalarWhereWithAggregatesInput = {
    AND?: ApplicationValidationScalarWhereWithAggregatesInput | ApplicationValidationScalarWhereWithAggregatesInput[]
    OR?: ApplicationValidationScalarWhereWithAggregatesInput[]
    NOT?: ApplicationValidationScalarWhereWithAggregatesInput | ApplicationValidationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ApplicationValidation"> | string
    applicationId?: StringWithAggregatesFilter<"ApplicationValidation"> | string
    validatedById?: StringWithAggregatesFilter<"ApplicationValidation"> | string
    rrNumber?: StringWithAggregatesFilter<"ApplicationValidation"> | string
    isDocumentsComplete?: BoolWithAggregatesFilter<"ApplicationValidation"> | boolean
    isEligibilityVerified?: BoolWithAggregatesFilter<"ApplicationValidation"> | boolean
    validationNotes?: StringNullableWithAggregatesFilter<"ApplicationValidation"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ApplicationValidation"> | Date | string
  }

  export type OfficerAssignmentWhereInput = {
    AND?: OfficerAssignmentWhereInput | OfficerAssignmentWhereInput[]
    OR?: OfficerAssignmentWhereInput[]
    NOT?: OfficerAssignmentWhereInput | OfficerAssignmentWhereInput[]
    id?: StringFilter<"OfficerAssignment"> | string
    applicationId?: StringFilter<"OfficerAssignment"> | string
    assignedById?: StringFilter<"OfficerAssignment"> | string
    assignedToId?: StringFilter<"OfficerAssignment"> | string
    expectedCompletionDate?: DateTimeNullableFilter<"OfficerAssignment"> | Date | string | null
    priority?: IntFilter<"OfficerAssignment"> | number
    instructions?: StringNullableFilter<"OfficerAssignment"> | string | null
    createdAt?: DateTimeFilter<"OfficerAssignment"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    assignedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    assignedTo?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type OfficerAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    assignedById?: SortOrder
    assignedToId?: SortOrder
    expectedCompletionDate?: SortOrderInput | SortOrder
    priority?: SortOrder
    instructions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    application?: ApplicationOrderByWithRelationInput
    assignedBy?: UserOrderByWithRelationInput
    assignedTo?: UserOrderByWithRelationInput
  }

  export type OfficerAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OfficerAssignmentWhereInput | OfficerAssignmentWhereInput[]
    OR?: OfficerAssignmentWhereInput[]
    NOT?: OfficerAssignmentWhereInput | OfficerAssignmentWhereInput[]
    applicationId?: StringFilter<"OfficerAssignment"> | string
    assignedById?: StringFilter<"OfficerAssignment"> | string
    assignedToId?: StringFilter<"OfficerAssignment"> | string
    expectedCompletionDate?: DateTimeNullableFilter<"OfficerAssignment"> | Date | string | null
    priority?: IntFilter<"OfficerAssignment"> | number
    instructions?: StringNullableFilter<"OfficerAssignment"> | string | null
    createdAt?: DateTimeFilter<"OfficerAssignment"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    assignedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    assignedTo?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type OfficerAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    assignedById?: SortOrder
    assignedToId?: SortOrder
    expectedCompletionDate?: SortOrderInput | SortOrder
    priority?: SortOrder
    instructions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: OfficerAssignmentCountOrderByAggregateInput
    _avg?: OfficerAssignmentAvgOrderByAggregateInput
    _max?: OfficerAssignmentMaxOrderByAggregateInput
    _min?: OfficerAssignmentMinOrderByAggregateInput
    _sum?: OfficerAssignmentSumOrderByAggregateInput
  }

  export type OfficerAssignmentScalarWhereWithAggregatesInput = {
    AND?: OfficerAssignmentScalarWhereWithAggregatesInput | OfficerAssignmentScalarWhereWithAggregatesInput[]
    OR?: OfficerAssignmentScalarWhereWithAggregatesInput[]
    NOT?: OfficerAssignmentScalarWhereWithAggregatesInput | OfficerAssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OfficerAssignment"> | string
    applicationId?: StringWithAggregatesFilter<"OfficerAssignment"> | string
    assignedById?: StringWithAggregatesFilter<"OfficerAssignment"> | string
    assignedToId?: StringWithAggregatesFilter<"OfficerAssignment"> | string
    expectedCompletionDate?: DateTimeNullableWithAggregatesFilter<"OfficerAssignment"> | Date | string | null
    priority?: IntWithAggregatesFilter<"OfficerAssignment"> | number
    instructions?: StringNullableWithAggregatesFilter<"OfficerAssignment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"OfficerAssignment"> | Date | string
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: StringFilter<"Document"> | string
    applicationId?: StringFilter<"Document"> | string
    documentType?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    fileName?: StringFilter<"Document"> | string
    filePath?: StringFilter<"Document"> | string
    fileSize?: IntFilter<"Document"> | number
    uploadedById?: StringFilter<"Document"> | string
    isVerified?: BoolFilter<"Document"> | boolean
    verifiedById?: StringNullableFilter<"Document"> | string | null
    verificationNotes?: StringNullableFilter<"Document"> | string | null
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    verifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    documentType?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    uploadedById?: SortOrder
    isVerified?: SortOrder
    verifiedById?: SortOrderInput | SortOrder
    verificationNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    application?: ApplicationOrderByWithRelationInput
    uploadedBy?: UserOrderByWithRelationInput
    verifiedBy?: UserOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    applicationId?: StringFilter<"Document"> | string
    documentType?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    fileName?: StringFilter<"Document"> | string
    filePath?: StringFilter<"Document"> | string
    fileSize?: IntFilter<"Document"> | number
    uploadedById?: StringFilter<"Document"> | string
    isVerified?: BoolFilter<"Document"> | boolean
    verifiedById?: StringNullableFilter<"Document"> | string | null
    verificationNotes?: StringNullableFilter<"Document"> | string | null
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    verifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    documentType?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    uploadedById?: SortOrder
    isVerified?: SortOrder
    verifiedById?: SortOrderInput | SortOrder
    verificationNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _avg?: DocumentAvgOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
    _sum?: DocumentSumOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Document"> | string
    applicationId?: StringWithAggregatesFilter<"Document"> | string
    documentType?: EnumDocumentTypeWithAggregatesFilter<"Document"> | $Enums.DocumentType
    fileName?: StringWithAggregatesFilter<"Document"> | string
    filePath?: StringWithAggregatesFilter<"Document"> | string
    fileSize?: IntWithAggregatesFilter<"Document"> | number
    uploadedById?: StringWithAggregatesFilter<"Document"> | string
    isVerified?: BoolWithAggregatesFilter<"Document"> | boolean
    verifiedById?: StringNullableWithAggregatesFilter<"Document"> | string | null
    verificationNotes?: StringNullableWithAggregatesFilter<"Document"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
  }

  export type DocumentRequestWhereInput = {
    AND?: DocumentRequestWhereInput | DocumentRequestWhereInput[]
    OR?: DocumentRequestWhereInput[]
    NOT?: DocumentRequestWhereInput | DocumentRequestWhereInput[]
    id?: StringFilter<"DocumentRequest"> | string
    applicationId?: StringFilter<"DocumentRequest"> | string
    requestedById?: StringFilter<"DocumentRequest"> | string
    documentType?: EnumDocumentTypeFilter<"DocumentRequest"> | $Enums.DocumentType
    reason?: StringNullableFilter<"DocumentRequest"> | string | null
    dueDate?: DateTimeNullableFilter<"DocumentRequest"> | Date | string | null
    isCompleted?: BoolFilter<"DocumentRequest"> | boolean
    createdAt?: DateTimeFilter<"DocumentRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentRequest"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    requestedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DocumentRequestOrderByWithRelationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    requestedById?: SortOrder
    documentType?: SortOrder
    reason?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    application?: ApplicationOrderByWithRelationInput
    requestedBy?: UserOrderByWithRelationInput
  }

  export type DocumentRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentRequestWhereInput | DocumentRequestWhereInput[]
    OR?: DocumentRequestWhereInput[]
    NOT?: DocumentRequestWhereInput | DocumentRequestWhereInput[]
    applicationId?: StringFilter<"DocumentRequest"> | string
    requestedById?: StringFilter<"DocumentRequest"> | string
    documentType?: EnumDocumentTypeFilter<"DocumentRequest"> | $Enums.DocumentType
    reason?: StringNullableFilter<"DocumentRequest"> | string | null
    dueDate?: DateTimeNullableFilter<"DocumentRequest"> | Date | string | null
    isCompleted?: BoolFilter<"DocumentRequest"> | boolean
    createdAt?: DateTimeFilter<"DocumentRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentRequest"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    requestedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type DocumentRequestOrderByWithAggregationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    requestedById?: SortOrder
    documentType?: SortOrder
    reason?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DocumentRequestCountOrderByAggregateInput
    _max?: DocumentRequestMaxOrderByAggregateInput
    _min?: DocumentRequestMinOrderByAggregateInput
  }

  export type DocumentRequestScalarWhereWithAggregatesInput = {
    AND?: DocumentRequestScalarWhereWithAggregatesInput | DocumentRequestScalarWhereWithAggregatesInput[]
    OR?: DocumentRequestScalarWhereWithAggregatesInput[]
    NOT?: DocumentRequestScalarWhereWithAggregatesInput | DocumentRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DocumentRequest"> | string
    applicationId?: StringWithAggregatesFilter<"DocumentRequest"> | string
    requestedById?: StringWithAggregatesFilter<"DocumentRequest"> | string
    documentType?: EnumDocumentTypeWithAggregatesFilter<"DocumentRequest"> | $Enums.DocumentType
    reason?: StringNullableWithAggregatesFilter<"DocumentRequest"> | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter<"DocumentRequest"> | Date | string | null
    isCompleted?: BoolWithAggregatesFilter<"DocumentRequest"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"DocumentRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DocumentRequest"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    notificationType?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    applicationId?: StringNullableFilter<"Notification"> | string | null
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    application?: XOR<ApplicationNullableScalarRelationFilter, ApplicationWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationType?: SortOrder
    applicationId?: SortOrderInput | SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    application?: ApplicationOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    notificationType?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    applicationId?: StringNullableFilter<"Notification"> | string | null
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    application?: XOR<ApplicationNullableScalarRelationFilter, ApplicationWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationType?: SortOrder
    applicationId?: SortOrderInput | SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    notificationType?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    applicationId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    readAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type ApplicationAuditLogWhereInput = {
    AND?: ApplicationAuditLogWhereInput | ApplicationAuditLogWhereInput[]
    OR?: ApplicationAuditLogWhereInput[]
    NOT?: ApplicationAuditLogWhereInput | ApplicationAuditLogWhereInput[]
    id?: StringFilter<"ApplicationAuditLog"> | string
    applicationId?: StringFilter<"ApplicationAuditLog"> | string
    action?: StringFilter<"ApplicationAuditLog"> | string
    performedById?: StringFilter<"ApplicationAuditLog"> | string
    oldValues?: JsonNullableFilter<"ApplicationAuditLog">
    newValues?: JsonNullableFilter<"ApplicationAuditLog">
    ipAddress?: StringNullableFilter<"ApplicationAuditLog"> | string | null
    createdAt?: DateTimeFilter<"ApplicationAuditLog"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    performedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ApplicationAuditLogOrderByWithRelationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    action?: SortOrder
    performedById?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    application?: ApplicationOrderByWithRelationInput
    performedBy?: UserOrderByWithRelationInput
  }

  export type ApplicationAuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ApplicationAuditLogWhereInput | ApplicationAuditLogWhereInput[]
    OR?: ApplicationAuditLogWhereInput[]
    NOT?: ApplicationAuditLogWhereInput | ApplicationAuditLogWhereInput[]
    applicationId?: StringFilter<"ApplicationAuditLog"> | string
    action?: StringFilter<"ApplicationAuditLog"> | string
    performedById?: StringFilter<"ApplicationAuditLog"> | string
    oldValues?: JsonNullableFilter<"ApplicationAuditLog">
    newValues?: JsonNullableFilter<"ApplicationAuditLog">
    ipAddress?: StringNullableFilter<"ApplicationAuditLog"> | string | null
    createdAt?: DateTimeFilter<"ApplicationAuditLog"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    performedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ApplicationAuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    action?: SortOrder
    performedById?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ApplicationAuditLogCountOrderByAggregateInput
    _max?: ApplicationAuditLogMaxOrderByAggregateInput
    _min?: ApplicationAuditLogMinOrderByAggregateInput
  }

  export type ApplicationAuditLogScalarWhereWithAggregatesInput = {
    AND?: ApplicationAuditLogScalarWhereWithAggregatesInput | ApplicationAuditLogScalarWhereWithAggregatesInput[]
    OR?: ApplicationAuditLogScalarWhereWithAggregatesInput[]
    NOT?: ApplicationAuditLogScalarWhereWithAggregatesInput | ApplicationAuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ApplicationAuditLog"> | string
    applicationId?: StringWithAggregatesFilter<"ApplicationAuditLog"> | string
    action?: StringWithAggregatesFilter<"ApplicationAuditLog"> | string
    performedById?: StringWithAggregatesFilter<"ApplicationAuditLog"> | string
    oldValues?: JsonNullableWithAggregatesFilter<"ApplicationAuditLog">
    newValues?: JsonNullableWithAggregatesFilter<"ApplicationAuditLog">
    ipAddress?: StringNullableWithAggregatesFilter<"ApplicationAuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ApplicationAuditLog"> | Date | string
  }

  export type DailyReportWhereInput = {
    AND?: DailyReportWhereInput | DailyReportWhereInput[]
    OR?: DailyReportWhereInput[]
    NOT?: DailyReportWhereInput | DailyReportWhereInput[]
    id?: StringFilter<"DailyReport"> | string
    reportDate?: DateTimeFilter<"DailyReport"> | Date | string
    totalApplications?: IntFilter<"DailyReport"> | number
    pendingValidation?: IntFilter<"DailyReport"> | number
    inProgress?: IntFilter<"DailyReport"> | number
    completed?: IntFilter<"DailyReport"> | number
    avgProcessingTime?: IntNullableFilter<"DailyReport"> | number | null
    createdAt?: DateTimeFilter<"DailyReport"> | Date | string
  }

  export type DailyReportOrderByWithRelationInput = {
    id?: SortOrder
    reportDate?: SortOrder
    totalApplications?: SortOrder
    pendingValidation?: SortOrder
    inProgress?: SortOrder
    completed?: SortOrder
    avgProcessingTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type DailyReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DailyReportWhereInput | DailyReportWhereInput[]
    OR?: DailyReportWhereInput[]
    NOT?: DailyReportWhereInput | DailyReportWhereInput[]
    reportDate?: DateTimeFilter<"DailyReport"> | Date | string
    totalApplications?: IntFilter<"DailyReport"> | number
    pendingValidation?: IntFilter<"DailyReport"> | number
    inProgress?: IntFilter<"DailyReport"> | number
    completed?: IntFilter<"DailyReport"> | number
    avgProcessingTime?: IntNullableFilter<"DailyReport"> | number | null
    createdAt?: DateTimeFilter<"DailyReport"> | Date | string
  }, "id">

  export type DailyReportOrderByWithAggregationInput = {
    id?: SortOrder
    reportDate?: SortOrder
    totalApplications?: SortOrder
    pendingValidation?: SortOrder
    inProgress?: SortOrder
    completed?: SortOrder
    avgProcessingTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: DailyReportCountOrderByAggregateInput
    _avg?: DailyReportAvgOrderByAggregateInput
    _max?: DailyReportMaxOrderByAggregateInput
    _min?: DailyReportMinOrderByAggregateInput
    _sum?: DailyReportSumOrderByAggregateInput
  }

  export type DailyReportScalarWhereWithAggregatesInput = {
    AND?: DailyReportScalarWhereWithAggregatesInput | DailyReportScalarWhereWithAggregatesInput[]
    OR?: DailyReportScalarWhereWithAggregatesInput[]
    NOT?: DailyReportScalarWhereWithAggregatesInput | DailyReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DailyReport"> | string
    reportDate?: DateTimeWithAggregatesFilter<"DailyReport"> | Date | string
    totalApplications?: IntWithAggregatesFilter<"DailyReport"> | number
    pendingValidation?: IntWithAggregatesFilter<"DailyReport"> | number
    inProgress?: IntWithAggregatesFilter<"DailyReport"> | number
    completed?: IntWithAggregatesFilter<"DailyReport"> | number
    avgProcessingTime?: IntNullableWithAggregatesFilter<"DailyReport"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"DailyReport"> | Date | string
  }

  export type SystemSettingWhereInput = {
    AND?: SystemSettingWhereInput | SystemSettingWhereInput[]
    OR?: SystemSettingWhereInput[]
    NOT?: SystemSettingWhereInput | SystemSettingWhereInput[]
    id?: StringFilter<"SystemSetting"> | string
    settingKey?: StringFilter<"SystemSetting"> | string
    settingValue?: StringFilter<"SystemSetting"> | string
    description?: StringNullableFilter<"SystemSetting"> | string | null
    isPublic?: BoolFilter<"SystemSetting"> | boolean
    createdAt?: DateTimeFilter<"SystemSetting"> | Date | string
    updatedAt?: DateTimeFilter<"SystemSetting"> | Date | string
  }

  export type SystemSettingOrderByWithRelationInput = {
    id?: SortOrder
    settingKey?: SortOrder
    settingValue?: SortOrder
    description?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    settingKey?: string
    AND?: SystemSettingWhereInput | SystemSettingWhereInput[]
    OR?: SystemSettingWhereInput[]
    NOT?: SystemSettingWhereInput | SystemSettingWhereInput[]
    settingValue?: StringFilter<"SystemSetting"> | string
    description?: StringNullableFilter<"SystemSetting"> | string | null
    isPublic?: BoolFilter<"SystemSetting"> | boolean
    createdAt?: DateTimeFilter<"SystemSetting"> | Date | string
    updatedAt?: DateTimeFilter<"SystemSetting"> | Date | string
  }, "id" | "settingKey">

  export type SystemSettingOrderByWithAggregationInput = {
    id?: SortOrder
    settingKey?: SortOrder
    settingValue?: SortOrder
    description?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SystemSettingCountOrderByAggregateInput
    _max?: SystemSettingMaxOrderByAggregateInput
    _min?: SystemSettingMinOrderByAggregateInput
  }

  export type SystemSettingScalarWhereWithAggregatesInput = {
    AND?: SystemSettingScalarWhereWithAggregatesInput | SystemSettingScalarWhereWithAggregatesInput[]
    OR?: SystemSettingScalarWhereWithAggregatesInput[]
    NOT?: SystemSettingScalarWhereWithAggregatesInput | SystemSettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemSetting"> | string
    settingKey?: StringWithAggregatesFilter<"SystemSetting"> | string
    settingValue?: StringWithAggregatesFilter<"SystemSetting"> | string
    description?: StringNullableWithAggregatesFilter<"SystemSetting"> | string | null
    isPublic?: BoolWithAggregatesFilter<"SystemSetting"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SystemSetting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SystemSetting"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    id?: StringFilter<"VerificationToken"> | string
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
    type?: StringFilter<"VerificationToken"> | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    id?: SortOrder
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    type?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
    type?: StringFilter<"VerificationToken"> | string
  }, "id" | "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    id?: SortOrder
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    type?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VerificationToken"> | string
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
    type?: StringWithAggregatesFilter<"VerificationToken"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileCreateNestedOneWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutPerformedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileUncheckedCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileUncheckedCreateNestedOneWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationUncheckedCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowUncheckedCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationUncheckedCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentUncheckedCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutPerformedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUpdateOneWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUncheckedUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUncheckedUpdateOneWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUncheckedUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUncheckedUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUncheckedUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUncheckedUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CitizenProfileCreateInput = {
    id?: string
    fullName: string
    phone: string
    address: string
    aadhaarNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCitizenProfileInput
  }

  export type CitizenProfileUncheckedCreateInput = {
    id?: string
    userId: string
    fullName: string
    phone: string
    address: string
    aadhaarNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CitizenProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCitizenProfileNestedInput
  }

  export type CitizenProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CitizenProfileCreateManyInput = {
    id?: string
    userId: string
    fullName: string
    phone: string
    address: string
    aadhaarNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CitizenProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CitizenProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficerProfileCreateInput = {
    id?: string
    fullName: string
    designation: string
    department: string
    officeLocation?: string | null
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOfficerProfileInput
  }

  export type OfficerProfileUncheckedCreateInput = {
    id?: string
    userId: string
    fullName: string
    designation: string
    department: string
    officeLocation?: string | null
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfficerProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOfficerProfileNestedInput
  }

  export type OfficerProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficerProfileCreateManyInput = {
    id?: string
    userId: string
    fullName: string
    designation: string
    department: string
    officeLocation?: string | null
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfficerProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficerProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCategoryCreateInput = {
    id?: string
    name: string
    description?: string | null
    slaDays: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationCreateNestedManyWithoutServiceCategoryInput
  }

  export type ServiceCategoryUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    slaDays: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutServiceCategoryInput
  }

  export type ServiceCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slaDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUpdateManyWithoutServiceCategoryNestedInput
  }

  export type ServiceCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slaDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutServiceCategoryNestedInput
  }

  export type ServiceCategoryCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    slaDays: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slaDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slaDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationCreateInput = {
    id?: string
    rrNumber?: string | null
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceCategory: ServiceCategoryCreateNestedOneWithoutApplicationsInput
    citizen: UserCreateNestedOneWithoutApplicationsInput
    currentHolder?: UserCreateNestedOneWithoutCurrentHolderFilesInput
    workflow?: ApplicationWorkflowCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutApplicationInput
    notifications?: NotificationCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateInput = {
    id?: string
    rrNumber?: string | null
    serviceCategoryId: string
    citizenId: string
    status?: $Enums.ApplicationStatus
    currentHolderId?: string | null
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow?: ApplicationWorkflowUncheckedCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationUncheckedCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutApplicationInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCategory?: ServiceCategoryUpdateOneRequiredWithoutApplicationsNestedInput
    citizen?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    currentHolder?: UserUpdateOneWithoutCurrentHolderFilesNestedInput
    workflow?: ApplicationWorkflowUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serviceCategoryId?: StringFieldUpdateOperationsInput | string
    citizenId?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    currentHolderId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: ApplicationWorkflowUncheckedUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUncheckedUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateManyInput = {
    id?: string
    rrNumber?: string | null
    serviceCategoryId: string
    citizenId: string
    status?: $Enums.ApplicationStatus
    currentHolderId?: string | null
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serviceCategoryId?: StringFieldUpdateOperationsInput | string
    citizenId?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    currentHolderId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationWorkflowCreateInput = {
    id?: string
    fromStatus?: $Enums.ApplicationStatus | null
    toStatus: $Enums.ApplicationStatus
    comments?: string | null
    createdAt?: Date | string
    application: ApplicationCreateNestedOneWithoutWorkflowInput
    changedBy: UserCreateNestedOneWithoutWorkflowChangesInput
  }

  export type ApplicationWorkflowUncheckedCreateInput = {
    id?: string
    applicationId: string
    fromStatus?: $Enums.ApplicationStatus | null
    toStatus: $Enums.ApplicationStatus
    changedById: string
    comments?: string | null
    createdAt?: Date | string
  }

  export type ApplicationWorkflowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableEnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus | null
    toStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutWorkflowNestedInput
    changedBy?: UserUpdateOneRequiredWithoutWorkflowChangesNestedInput
  }

  export type ApplicationWorkflowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableEnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus | null
    toStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    changedById?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationWorkflowCreateManyInput = {
    id?: string
    applicationId: string
    fromStatus?: $Enums.ApplicationStatus | null
    toStatus: $Enums.ApplicationStatus
    changedById: string
    comments?: string | null
    createdAt?: Date | string
  }

  export type ApplicationWorkflowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableEnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus | null
    toStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationWorkflowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableEnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus | null
    toStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    changedById?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationValidationCreateInput = {
    id?: string
    rrNumber: string
    isDocumentsComplete?: boolean
    isEligibilityVerified?: boolean
    validationNotes?: string | null
    createdAt?: Date | string
    application: ApplicationCreateNestedOneWithoutValidationInput
    validatedBy: UserCreateNestedOneWithoutValidationsInput
  }

  export type ApplicationValidationUncheckedCreateInput = {
    id?: string
    applicationId: string
    validatedById: string
    rrNumber: string
    isDocumentsComplete?: boolean
    isEligibilityVerified?: boolean
    validationNotes?: string | null
    createdAt?: Date | string
  }

  export type ApplicationValidationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: StringFieldUpdateOperationsInput | string
    isDocumentsComplete?: BoolFieldUpdateOperationsInput | boolean
    isEligibilityVerified?: BoolFieldUpdateOperationsInput | boolean
    validationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutValidationNestedInput
    validatedBy?: UserUpdateOneRequiredWithoutValidationsNestedInput
  }

  export type ApplicationValidationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    validatedById?: StringFieldUpdateOperationsInput | string
    rrNumber?: StringFieldUpdateOperationsInput | string
    isDocumentsComplete?: BoolFieldUpdateOperationsInput | boolean
    isEligibilityVerified?: BoolFieldUpdateOperationsInput | boolean
    validationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationValidationCreateManyInput = {
    id?: string
    applicationId: string
    validatedById: string
    rrNumber: string
    isDocumentsComplete?: boolean
    isEligibilityVerified?: boolean
    validationNotes?: string | null
    createdAt?: Date | string
  }

  export type ApplicationValidationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: StringFieldUpdateOperationsInput | string
    isDocumentsComplete?: BoolFieldUpdateOperationsInput | boolean
    isEligibilityVerified?: BoolFieldUpdateOperationsInput | boolean
    validationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationValidationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    validatedById?: StringFieldUpdateOperationsInput | string
    rrNumber?: StringFieldUpdateOperationsInput | string
    isDocumentsComplete?: BoolFieldUpdateOperationsInput | boolean
    isEligibilityVerified?: BoolFieldUpdateOperationsInput | boolean
    validationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficerAssignmentCreateInput = {
    id?: string
    expectedCompletionDate?: Date | string | null
    priority?: number
    instructions?: string | null
    createdAt?: Date | string
    application: ApplicationCreateNestedOneWithoutOfficerAssignmentsInput
    assignedBy: UserCreateNestedOneWithoutAssignmentsGivenInput
    assignedTo: UserCreateNestedOneWithoutAssignmentsReceivedInput
  }

  export type OfficerAssignmentUncheckedCreateInput = {
    id?: string
    applicationId: string
    assignedById: string
    assignedToId: string
    expectedCompletionDate?: Date | string | null
    priority?: number
    instructions?: string | null
    createdAt?: Date | string
  }

  export type OfficerAssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutOfficerAssignmentsNestedInput
    assignedBy?: UserUpdateOneRequiredWithoutAssignmentsGivenNestedInput
    assignedTo?: UserUpdateOneRequiredWithoutAssignmentsReceivedNestedInput
  }

  export type OfficerAssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: StringFieldUpdateOperationsInput | string
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficerAssignmentCreateManyInput = {
    id?: string
    applicationId: string
    assignedById: string
    assignedToId: string
    expectedCompletionDate?: Date | string | null
    priority?: number
    instructions?: string | null
    createdAt?: Date | string
  }

  export type OfficerAssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficerAssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: StringFieldUpdateOperationsInput | string
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateInput = {
    id?: string
    documentType: $Enums.DocumentType
    fileName: string
    filePath: string
    fileSize: number
    isVerified?: boolean
    verificationNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    application: ApplicationCreateNestedOneWithoutDocumentsInput
    uploadedBy: UserCreateNestedOneWithoutUploadedDocumentsInput
    verifiedBy?: UserCreateNestedOneWithoutVerifiedDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    applicationId: string
    documentType: $Enums.DocumentType
    fileName: string
    filePath: string
    fileSize: number
    uploadedById: string
    isVerified?: boolean
    verifiedById?: string | null
    verificationNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutDocumentsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedDocumentsNestedInput
    verifiedBy?: UserUpdateOneWithoutVerifiedDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    uploadedById?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateManyInput = {
    id?: string
    applicationId: string
    documentType: $Enums.DocumentType
    fileName: string
    filePath: string
    fileSize: number
    uploadedById: string
    isVerified?: boolean
    verifiedById?: string | null
    verificationNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    uploadedById?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentRequestCreateInput = {
    id?: string
    documentType: $Enums.DocumentType
    reason?: string | null
    dueDate?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    application: ApplicationCreateNestedOneWithoutDocumentRequestsInput
    requestedBy: UserCreateNestedOneWithoutDocumentRequestsInput
  }

  export type DocumentRequestUncheckedCreateInput = {
    id?: string
    applicationId: string
    requestedById: string
    documentType: $Enums.DocumentType
    reason?: string | null
    dueDate?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutDocumentRequestsNestedInput
    requestedBy?: UserUpdateOneRequiredWithoutDocumentRequestsNestedInput
  }

  export type DocumentRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentRequestCreateManyInput = {
    id?: string
    applicationId: string
    requestedById: string
    documentType: $Enums.DocumentType
    reason?: string | null
    dueDate?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    notificationType: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
    application?: ApplicationCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    notificationType: $Enums.NotificationType
    applicationId?: string | null
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    application?: ApplicationUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    notificationType: $Enums.NotificationType
    applicationId?: string | null
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationAuditLogCreateInput = {
    id?: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    createdAt?: Date | string
    application: ApplicationCreateNestedOneWithoutAuditLogsInput
    performedBy: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type ApplicationAuditLogUncheckedCreateInput = {
    id?: string
    applicationId: string
    action: string
    performedById: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type ApplicationAuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutAuditLogsNestedInput
    performedBy?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type ApplicationAuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    performedById?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationAuditLogCreateManyInput = {
    id?: string
    applicationId: string
    action: string
    performedById: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type ApplicationAuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationAuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    performedById?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyReportCreateInput = {
    id?: string
    reportDate: Date | string
    totalApplications?: number
    pendingValidation?: number
    inProgress?: number
    completed?: number
    avgProcessingTime?: number | null
    createdAt?: Date | string
  }

  export type DailyReportUncheckedCreateInput = {
    id?: string
    reportDate: Date | string
    totalApplications?: number
    pendingValidation?: number
    inProgress?: number
    completed?: number
    avgProcessingTime?: number | null
    createdAt?: Date | string
  }

  export type DailyReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalApplications?: IntFieldUpdateOperationsInput | number
    pendingValidation?: IntFieldUpdateOperationsInput | number
    inProgress?: IntFieldUpdateOperationsInput | number
    completed?: IntFieldUpdateOperationsInput | number
    avgProcessingTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalApplications?: IntFieldUpdateOperationsInput | number
    pendingValidation?: IntFieldUpdateOperationsInput | number
    inProgress?: IntFieldUpdateOperationsInput | number
    completed?: IntFieldUpdateOperationsInput | number
    avgProcessingTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyReportCreateManyInput = {
    id?: string
    reportDate: Date | string
    totalApplications?: number
    pendingValidation?: number
    inProgress?: number
    completed?: number
    avgProcessingTime?: number | null
    createdAt?: Date | string
  }

  export type DailyReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalApplications?: IntFieldUpdateOperationsInput | number
    pendingValidation?: IntFieldUpdateOperationsInput | number
    inProgress?: IntFieldUpdateOperationsInput | number
    completed?: IntFieldUpdateOperationsInput | number
    avgProcessingTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalApplications?: IntFieldUpdateOperationsInput | number
    pendingValidation?: IntFieldUpdateOperationsInput | number
    inProgress?: IntFieldUpdateOperationsInput | number
    completed?: IntFieldUpdateOperationsInput | number
    avgProcessingTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingCreateInput = {
    id?: string
    settingKey: string
    settingValue: string
    description?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingUncheckedCreateInput = {
    id?: string
    settingKey: string
    settingValue: string
    description?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    settingKey?: StringFieldUpdateOperationsInput | string
    settingValue?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    settingKey?: StringFieldUpdateOperationsInput | string
    settingValue?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingCreateManyInput = {
    id?: string
    settingKey: string
    settingValue: string
    description?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    settingKey?: StringFieldUpdateOperationsInput | string
    settingValue?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    settingKey?: StringFieldUpdateOperationsInput | string
    settingValue?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    id?: string
    identifier: string
    token: string
    expires: Date | string
    type: string
  }

  export type VerificationTokenUncheckedCreateInput = {
    id?: string
    identifier: string
    token: string
    expires: Date | string
    type: string
  }

  export type VerificationTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationTokenCreateManyInput = {
    id?: string
    identifier: string
    token: string
    expires: Date | string
    type: string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CitizenProfileNullableScalarRelationFilter = {
    is?: CitizenProfileWhereInput | null
    isNot?: CitizenProfileWhereInput | null
  }

  export type OfficerProfileNullableScalarRelationFilter = {
    is?: OfficerProfileWhereInput | null
    isNot?: OfficerProfileWhereInput | null
  }

  export type ApplicationListRelationFilter = {
    every?: ApplicationWhereInput
    some?: ApplicationWhereInput
    none?: ApplicationWhereInput
  }

  export type ApplicationWorkflowListRelationFilter = {
    every?: ApplicationWorkflowWhereInput
    some?: ApplicationWorkflowWhereInput
    none?: ApplicationWorkflowWhereInput
  }

  export type ApplicationValidationListRelationFilter = {
    every?: ApplicationValidationWhereInput
    some?: ApplicationValidationWhereInput
    none?: ApplicationValidationWhereInput
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type OfficerAssignmentListRelationFilter = {
    every?: OfficerAssignmentWhereInput
    some?: OfficerAssignmentWhereInput
    none?: OfficerAssignmentWhereInput
  }

  export type DocumentRequestListRelationFilter = {
    every?: DocumentRequestWhereInput
    some?: DocumentRequestWhereInput
    none?: DocumentRequestWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type ApplicationAuditLogListRelationFilter = {
    every?: ApplicationAuditLogWhereInput
    some?: ApplicationAuditLogWhereInput
    none?: ApplicationAuditLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationWorkflowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationValidationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OfficerAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationAuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CitizenProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    aadhaarNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CitizenProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    aadhaarNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CitizenProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    aadhaarNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OfficerProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    designation?: SortOrder
    department?: SortOrder
    officeLocation?: SortOrder
    isAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OfficerProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    designation?: SortOrder
    department?: SortOrder
    officeLocation?: SortOrder
    isAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OfficerProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fullName?: SortOrder
    designation?: SortOrder
    department?: SortOrder
    officeLocation?: SortOrder
    isAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ServiceCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slaDays?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceCategoryAvgOrderByAggregateInput = {
    slaDays?: SortOrder
  }

  export type ServiceCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slaDays?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slaDays?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceCategorySumOrderByAggregateInput = {
    slaDays?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumApplicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusFilter<$PrismaModel> | $Enums.ApplicationStatus
  }

  export type ServiceCategoryScalarRelationFilter = {
    is?: ServiceCategoryWhereInput
    isNot?: ServiceCategoryWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ApplicationValidationNullableScalarRelationFilter = {
    is?: ApplicationValidationWhereInput | null
    isNot?: ApplicationValidationWhereInput | null
  }

  export type ApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    rrNumber?: SortOrder
    serviceCategoryId?: SortOrder
    citizenId?: SortOrder
    status?: SortOrder
    currentHolderId?: SortOrder
    submittedAt?: SortOrder
    validatedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    rrNumber?: SortOrder
    serviceCategoryId?: SortOrder
    citizenId?: SortOrder
    status?: SortOrder
    currentHolderId?: SortOrder
    submittedAt?: SortOrder
    validatedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    rrNumber?: SortOrder
    serviceCategoryId?: SortOrder
    citizenId?: SortOrder
    status?: SortOrder
    currentHolderId?: SortOrder
    submittedAt?: SortOrder
    validatedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumApplicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusFilter<$PrismaModel>
  }

  export type EnumApplicationStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumApplicationStatusNullableFilter<$PrismaModel> | $Enums.ApplicationStatus | null
  }

  export type ApplicationScalarRelationFilter = {
    is?: ApplicationWhereInput
    isNot?: ApplicationWhereInput
  }

  export type ApplicationWorkflowCountOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    fromStatus?: SortOrder
    toStatus?: SortOrder
    changedById?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
  }

  export type ApplicationWorkflowMaxOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    fromStatus?: SortOrder
    toStatus?: SortOrder
    changedById?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
  }

  export type ApplicationWorkflowMinOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    fromStatus?: SortOrder
    toStatus?: SortOrder
    changedById?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumApplicationStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumApplicationStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusNullableFilter<$PrismaModel>
  }

  export type ApplicationValidationCountOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    validatedById?: SortOrder
    rrNumber?: SortOrder
    isDocumentsComplete?: SortOrder
    isEligibilityVerified?: SortOrder
    validationNotes?: SortOrder
    createdAt?: SortOrder
  }

  export type ApplicationValidationMaxOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    validatedById?: SortOrder
    rrNumber?: SortOrder
    isDocumentsComplete?: SortOrder
    isEligibilityVerified?: SortOrder
    validationNotes?: SortOrder
    createdAt?: SortOrder
  }

  export type ApplicationValidationMinOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    validatedById?: SortOrder
    rrNumber?: SortOrder
    isDocumentsComplete?: SortOrder
    isEligibilityVerified?: SortOrder
    validationNotes?: SortOrder
    createdAt?: SortOrder
  }

  export type OfficerAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    assignedById?: SortOrder
    assignedToId?: SortOrder
    expectedCompletionDate?: SortOrder
    priority?: SortOrder
    instructions?: SortOrder
    createdAt?: SortOrder
  }

  export type OfficerAssignmentAvgOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type OfficerAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    assignedById?: SortOrder
    assignedToId?: SortOrder
    expectedCompletionDate?: SortOrder
    priority?: SortOrder
    instructions?: SortOrder
    createdAt?: SortOrder
  }

  export type OfficerAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    assignedById?: SortOrder
    assignedToId?: SortOrder
    expectedCompletionDate?: SortOrder
    priority?: SortOrder
    instructions?: SortOrder
    createdAt?: SortOrder
  }

  export type OfficerAssignmentSumOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type EnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    documentType?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    uploadedById?: SortOrder
    isVerified?: SortOrder
    verifiedById?: SortOrder
    verificationNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    documentType?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    uploadedById?: SortOrder
    isVerified?: SortOrder
    verifiedById?: SortOrder
    verificationNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    documentType?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    uploadedById?: SortOrder
    isVerified?: SortOrder
    verifiedById?: SortOrder
    verificationNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type EnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type DocumentRequestCountOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    requestedById?: SortOrder
    documentType?: SortOrder
    reason?: SortOrder
    dueDate?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    requestedById?: SortOrder
    documentType?: SortOrder
    reason?: SortOrder
    dueDate?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentRequestMinOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    requestedById?: SortOrder
    documentType?: SortOrder
    reason?: SortOrder
    dueDate?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type ApplicationNullableScalarRelationFilter = {
    is?: ApplicationWhereInput | null
    isNot?: ApplicationWhereInput | null
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationType?: SortOrder
    applicationId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationType?: SortOrder
    applicationId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationType?: SortOrder
    applicationId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ApplicationAuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    action?: SortOrder
    performedById?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type ApplicationAuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    action?: SortOrder
    performedById?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type ApplicationAuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    action?: SortOrder
    performedById?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DailyReportCountOrderByAggregateInput = {
    id?: SortOrder
    reportDate?: SortOrder
    totalApplications?: SortOrder
    pendingValidation?: SortOrder
    inProgress?: SortOrder
    completed?: SortOrder
    avgProcessingTime?: SortOrder
    createdAt?: SortOrder
  }

  export type DailyReportAvgOrderByAggregateInput = {
    totalApplications?: SortOrder
    pendingValidation?: SortOrder
    inProgress?: SortOrder
    completed?: SortOrder
    avgProcessingTime?: SortOrder
  }

  export type DailyReportMaxOrderByAggregateInput = {
    id?: SortOrder
    reportDate?: SortOrder
    totalApplications?: SortOrder
    pendingValidation?: SortOrder
    inProgress?: SortOrder
    completed?: SortOrder
    avgProcessingTime?: SortOrder
    createdAt?: SortOrder
  }

  export type DailyReportMinOrderByAggregateInput = {
    id?: SortOrder
    reportDate?: SortOrder
    totalApplications?: SortOrder
    pendingValidation?: SortOrder
    inProgress?: SortOrder
    completed?: SortOrder
    avgProcessingTime?: SortOrder
    createdAt?: SortOrder
  }

  export type DailyReportSumOrderByAggregateInput = {
    totalApplications?: SortOrder
    pendingValidation?: SortOrder
    inProgress?: SortOrder
    completed?: SortOrder
    avgProcessingTime?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SystemSettingCountOrderByAggregateInput = {
    id?: SortOrder
    settingKey?: SortOrder
    settingValue?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    settingKey?: SortOrder
    settingValue?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingMinOrderByAggregateInput = {
    id?: SortOrder
    settingKey?: SortOrder
    settingValue?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    type?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    type?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    type?: SortOrder
  }

  export type CitizenProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<CitizenProfileCreateWithoutUserInput, CitizenProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: CitizenProfileCreateOrConnectWithoutUserInput
    connect?: CitizenProfileWhereUniqueInput
  }

  export type OfficerProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<OfficerProfileCreateWithoutUserInput, OfficerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: OfficerProfileCreateOrConnectWithoutUserInput
    connect?: OfficerProfileWhereUniqueInput
  }

  export type ApplicationCreateNestedManyWithoutCitizenInput = {
    create?: XOR<ApplicationCreateWithoutCitizenInput, ApplicationUncheckedCreateWithoutCitizenInput> | ApplicationCreateWithoutCitizenInput[] | ApplicationUncheckedCreateWithoutCitizenInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCitizenInput | ApplicationCreateOrConnectWithoutCitizenInput[]
    createMany?: ApplicationCreateManyCitizenInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type ApplicationCreateNestedManyWithoutCurrentHolderInput = {
    create?: XOR<ApplicationCreateWithoutCurrentHolderInput, ApplicationUncheckedCreateWithoutCurrentHolderInput> | ApplicationCreateWithoutCurrentHolderInput[] | ApplicationUncheckedCreateWithoutCurrentHolderInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCurrentHolderInput | ApplicationCreateOrConnectWithoutCurrentHolderInput[]
    createMany?: ApplicationCreateManyCurrentHolderInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type ApplicationWorkflowCreateNestedManyWithoutChangedByInput = {
    create?: XOR<ApplicationWorkflowCreateWithoutChangedByInput, ApplicationWorkflowUncheckedCreateWithoutChangedByInput> | ApplicationWorkflowCreateWithoutChangedByInput[] | ApplicationWorkflowUncheckedCreateWithoutChangedByInput[]
    connectOrCreate?: ApplicationWorkflowCreateOrConnectWithoutChangedByInput | ApplicationWorkflowCreateOrConnectWithoutChangedByInput[]
    createMany?: ApplicationWorkflowCreateManyChangedByInputEnvelope
    connect?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
  }

  export type ApplicationValidationCreateNestedManyWithoutValidatedByInput = {
    create?: XOR<ApplicationValidationCreateWithoutValidatedByInput, ApplicationValidationUncheckedCreateWithoutValidatedByInput> | ApplicationValidationCreateWithoutValidatedByInput[] | ApplicationValidationUncheckedCreateWithoutValidatedByInput[]
    connectOrCreate?: ApplicationValidationCreateOrConnectWithoutValidatedByInput | ApplicationValidationCreateOrConnectWithoutValidatedByInput[]
    createMany?: ApplicationValidationCreateManyValidatedByInputEnvelope
    connect?: ApplicationValidationWhereUniqueInput | ApplicationValidationWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutVerifiedByInput = {
    create?: XOR<DocumentCreateWithoutVerifiedByInput, DocumentUncheckedCreateWithoutVerifiedByInput> | DocumentCreateWithoutVerifiedByInput[] | DocumentUncheckedCreateWithoutVerifiedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutVerifiedByInput | DocumentCreateOrConnectWithoutVerifiedByInput[]
    createMany?: DocumentCreateManyVerifiedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput> | DocumentCreateWithoutUploadedByInput[] | DocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUploadedByInput | DocumentCreateOrConnectWithoutUploadedByInput[]
    createMany?: DocumentCreateManyUploadedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type OfficerAssignmentCreateNestedManyWithoutAssignedByInput = {
    create?: XOR<OfficerAssignmentCreateWithoutAssignedByInput, OfficerAssignmentUncheckedCreateWithoutAssignedByInput> | OfficerAssignmentCreateWithoutAssignedByInput[] | OfficerAssignmentUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: OfficerAssignmentCreateOrConnectWithoutAssignedByInput | OfficerAssignmentCreateOrConnectWithoutAssignedByInput[]
    createMany?: OfficerAssignmentCreateManyAssignedByInputEnvelope
    connect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
  }

  export type OfficerAssignmentCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<OfficerAssignmentCreateWithoutAssignedToInput, OfficerAssignmentUncheckedCreateWithoutAssignedToInput> | OfficerAssignmentCreateWithoutAssignedToInput[] | OfficerAssignmentUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: OfficerAssignmentCreateOrConnectWithoutAssignedToInput | OfficerAssignmentCreateOrConnectWithoutAssignedToInput[]
    createMany?: OfficerAssignmentCreateManyAssignedToInputEnvelope
    connect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
  }

  export type DocumentRequestCreateNestedManyWithoutRequestedByInput = {
    create?: XOR<DocumentRequestCreateWithoutRequestedByInput, DocumentRequestUncheckedCreateWithoutRequestedByInput> | DocumentRequestCreateWithoutRequestedByInput[] | DocumentRequestUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: DocumentRequestCreateOrConnectWithoutRequestedByInput | DocumentRequestCreateOrConnectWithoutRequestedByInput[]
    createMany?: DocumentRequestCreateManyRequestedByInputEnvelope
    connect?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ApplicationAuditLogCreateNestedManyWithoutPerformedByInput = {
    create?: XOR<ApplicationAuditLogCreateWithoutPerformedByInput, ApplicationAuditLogUncheckedCreateWithoutPerformedByInput> | ApplicationAuditLogCreateWithoutPerformedByInput[] | ApplicationAuditLogUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: ApplicationAuditLogCreateOrConnectWithoutPerformedByInput | ApplicationAuditLogCreateOrConnectWithoutPerformedByInput[]
    createMany?: ApplicationAuditLogCreateManyPerformedByInputEnvelope
    connect?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
  }

  export type CitizenProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CitizenProfileCreateWithoutUserInput, CitizenProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: CitizenProfileCreateOrConnectWithoutUserInput
    connect?: CitizenProfileWhereUniqueInput
  }

  export type OfficerProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<OfficerProfileCreateWithoutUserInput, OfficerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: OfficerProfileCreateOrConnectWithoutUserInput
    connect?: OfficerProfileWhereUniqueInput
  }

  export type ApplicationUncheckedCreateNestedManyWithoutCitizenInput = {
    create?: XOR<ApplicationCreateWithoutCitizenInput, ApplicationUncheckedCreateWithoutCitizenInput> | ApplicationCreateWithoutCitizenInput[] | ApplicationUncheckedCreateWithoutCitizenInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCitizenInput | ApplicationCreateOrConnectWithoutCitizenInput[]
    createMany?: ApplicationCreateManyCitizenInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutCurrentHolderInput = {
    create?: XOR<ApplicationCreateWithoutCurrentHolderInput, ApplicationUncheckedCreateWithoutCurrentHolderInput> | ApplicationCreateWithoutCurrentHolderInput[] | ApplicationUncheckedCreateWithoutCurrentHolderInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCurrentHolderInput | ApplicationCreateOrConnectWithoutCurrentHolderInput[]
    createMany?: ApplicationCreateManyCurrentHolderInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type ApplicationWorkflowUncheckedCreateNestedManyWithoutChangedByInput = {
    create?: XOR<ApplicationWorkflowCreateWithoutChangedByInput, ApplicationWorkflowUncheckedCreateWithoutChangedByInput> | ApplicationWorkflowCreateWithoutChangedByInput[] | ApplicationWorkflowUncheckedCreateWithoutChangedByInput[]
    connectOrCreate?: ApplicationWorkflowCreateOrConnectWithoutChangedByInput | ApplicationWorkflowCreateOrConnectWithoutChangedByInput[]
    createMany?: ApplicationWorkflowCreateManyChangedByInputEnvelope
    connect?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
  }

  export type ApplicationValidationUncheckedCreateNestedManyWithoutValidatedByInput = {
    create?: XOR<ApplicationValidationCreateWithoutValidatedByInput, ApplicationValidationUncheckedCreateWithoutValidatedByInput> | ApplicationValidationCreateWithoutValidatedByInput[] | ApplicationValidationUncheckedCreateWithoutValidatedByInput[]
    connectOrCreate?: ApplicationValidationCreateOrConnectWithoutValidatedByInput | ApplicationValidationCreateOrConnectWithoutValidatedByInput[]
    createMany?: ApplicationValidationCreateManyValidatedByInputEnvelope
    connect?: ApplicationValidationWhereUniqueInput | ApplicationValidationWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutVerifiedByInput = {
    create?: XOR<DocumentCreateWithoutVerifiedByInput, DocumentUncheckedCreateWithoutVerifiedByInput> | DocumentCreateWithoutVerifiedByInput[] | DocumentUncheckedCreateWithoutVerifiedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutVerifiedByInput | DocumentCreateOrConnectWithoutVerifiedByInput[]
    createMany?: DocumentCreateManyVerifiedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput> | DocumentCreateWithoutUploadedByInput[] | DocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUploadedByInput | DocumentCreateOrConnectWithoutUploadedByInput[]
    createMany?: DocumentCreateManyUploadedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedByInput = {
    create?: XOR<OfficerAssignmentCreateWithoutAssignedByInput, OfficerAssignmentUncheckedCreateWithoutAssignedByInput> | OfficerAssignmentCreateWithoutAssignedByInput[] | OfficerAssignmentUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: OfficerAssignmentCreateOrConnectWithoutAssignedByInput | OfficerAssignmentCreateOrConnectWithoutAssignedByInput[]
    createMany?: OfficerAssignmentCreateManyAssignedByInputEnvelope
    connect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
  }

  export type OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<OfficerAssignmentCreateWithoutAssignedToInput, OfficerAssignmentUncheckedCreateWithoutAssignedToInput> | OfficerAssignmentCreateWithoutAssignedToInput[] | OfficerAssignmentUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: OfficerAssignmentCreateOrConnectWithoutAssignedToInput | OfficerAssignmentCreateOrConnectWithoutAssignedToInput[]
    createMany?: OfficerAssignmentCreateManyAssignedToInputEnvelope
    connect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
  }

  export type DocumentRequestUncheckedCreateNestedManyWithoutRequestedByInput = {
    create?: XOR<DocumentRequestCreateWithoutRequestedByInput, DocumentRequestUncheckedCreateWithoutRequestedByInput> | DocumentRequestCreateWithoutRequestedByInput[] | DocumentRequestUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: DocumentRequestCreateOrConnectWithoutRequestedByInput | DocumentRequestCreateOrConnectWithoutRequestedByInput[]
    createMany?: DocumentRequestCreateManyRequestedByInputEnvelope
    connect?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ApplicationAuditLogUncheckedCreateNestedManyWithoutPerformedByInput = {
    create?: XOR<ApplicationAuditLogCreateWithoutPerformedByInput, ApplicationAuditLogUncheckedCreateWithoutPerformedByInput> | ApplicationAuditLogCreateWithoutPerformedByInput[] | ApplicationAuditLogUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: ApplicationAuditLogCreateOrConnectWithoutPerformedByInput | ApplicationAuditLogCreateOrConnectWithoutPerformedByInput[]
    createMany?: ApplicationAuditLogCreateManyPerformedByInputEnvelope
    connect?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CitizenProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<CitizenProfileCreateWithoutUserInput, CitizenProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: CitizenProfileCreateOrConnectWithoutUserInput
    upsert?: CitizenProfileUpsertWithoutUserInput
    disconnect?: CitizenProfileWhereInput | boolean
    delete?: CitizenProfileWhereInput | boolean
    connect?: CitizenProfileWhereUniqueInput
    update?: XOR<XOR<CitizenProfileUpdateToOneWithWhereWithoutUserInput, CitizenProfileUpdateWithoutUserInput>, CitizenProfileUncheckedUpdateWithoutUserInput>
  }

  export type OfficerProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<OfficerProfileCreateWithoutUserInput, OfficerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: OfficerProfileCreateOrConnectWithoutUserInput
    upsert?: OfficerProfileUpsertWithoutUserInput
    disconnect?: OfficerProfileWhereInput | boolean
    delete?: OfficerProfileWhereInput | boolean
    connect?: OfficerProfileWhereUniqueInput
    update?: XOR<XOR<OfficerProfileUpdateToOneWithWhereWithoutUserInput, OfficerProfileUpdateWithoutUserInput>, OfficerProfileUncheckedUpdateWithoutUserInput>
  }

  export type ApplicationUpdateManyWithoutCitizenNestedInput = {
    create?: XOR<ApplicationCreateWithoutCitizenInput, ApplicationUncheckedCreateWithoutCitizenInput> | ApplicationCreateWithoutCitizenInput[] | ApplicationUncheckedCreateWithoutCitizenInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCitizenInput | ApplicationCreateOrConnectWithoutCitizenInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutCitizenInput | ApplicationUpsertWithWhereUniqueWithoutCitizenInput[]
    createMany?: ApplicationCreateManyCitizenInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutCitizenInput | ApplicationUpdateWithWhereUniqueWithoutCitizenInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutCitizenInput | ApplicationUpdateManyWithWhereWithoutCitizenInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type ApplicationUpdateManyWithoutCurrentHolderNestedInput = {
    create?: XOR<ApplicationCreateWithoutCurrentHolderInput, ApplicationUncheckedCreateWithoutCurrentHolderInput> | ApplicationCreateWithoutCurrentHolderInput[] | ApplicationUncheckedCreateWithoutCurrentHolderInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCurrentHolderInput | ApplicationCreateOrConnectWithoutCurrentHolderInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutCurrentHolderInput | ApplicationUpsertWithWhereUniqueWithoutCurrentHolderInput[]
    createMany?: ApplicationCreateManyCurrentHolderInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutCurrentHolderInput | ApplicationUpdateWithWhereUniqueWithoutCurrentHolderInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutCurrentHolderInput | ApplicationUpdateManyWithWhereWithoutCurrentHolderInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type ApplicationWorkflowUpdateManyWithoutChangedByNestedInput = {
    create?: XOR<ApplicationWorkflowCreateWithoutChangedByInput, ApplicationWorkflowUncheckedCreateWithoutChangedByInput> | ApplicationWorkflowCreateWithoutChangedByInput[] | ApplicationWorkflowUncheckedCreateWithoutChangedByInput[]
    connectOrCreate?: ApplicationWorkflowCreateOrConnectWithoutChangedByInput | ApplicationWorkflowCreateOrConnectWithoutChangedByInput[]
    upsert?: ApplicationWorkflowUpsertWithWhereUniqueWithoutChangedByInput | ApplicationWorkflowUpsertWithWhereUniqueWithoutChangedByInput[]
    createMany?: ApplicationWorkflowCreateManyChangedByInputEnvelope
    set?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    disconnect?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    delete?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    connect?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    update?: ApplicationWorkflowUpdateWithWhereUniqueWithoutChangedByInput | ApplicationWorkflowUpdateWithWhereUniqueWithoutChangedByInput[]
    updateMany?: ApplicationWorkflowUpdateManyWithWhereWithoutChangedByInput | ApplicationWorkflowUpdateManyWithWhereWithoutChangedByInput[]
    deleteMany?: ApplicationWorkflowScalarWhereInput | ApplicationWorkflowScalarWhereInput[]
  }

  export type ApplicationValidationUpdateManyWithoutValidatedByNestedInput = {
    create?: XOR<ApplicationValidationCreateWithoutValidatedByInput, ApplicationValidationUncheckedCreateWithoutValidatedByInput> | ApplicationValidationCreateWithoutValidatedByInput[] | ApplicationValidationUncheckedCreateWithoutValidatedByInput[]
    connectOrCreate?: ApplicationValidationCreateOrConnectWithoutValidatedByInput | ApplicationValidationCreateOrConnectWithoutValidatedByInput[]
    upsert?: ApplicationValidationUpsertWithWhereUniqueWithoutValidatedByInput | ApplicationValidationUpsertWithWhereUniqueWithoutValidatedByInput[]
    createMany?: ApplicationValidationCreateManyValidatedByInputEnvelope
    set?: ApplicationValidationWhereUniqueInput | ApplicationValidationWhereUniqueInput[]
    disconnect?: ApplicationValidationWhereUniqueInput | ApplicationValidationWhereUniqueInput[]
    delete?: ApplicationValidationWhereUniqueInput | ApplicationValidationWhereUniqueInput[]
    connect?: ApplicationValidationWhereUniqueInput | ApplicationValidationWhereUniqueInput[]
    update?: ApplicationValidationUpdateWithWhereUniqueWithoutValidatedByInput | ApplicationValidationUpdateWithWhereUniqueWithoutValidatedByInput[]
    updateMany?: ApplicationValidationUpdateManyWithWhereWithoutValidatedByInput | ApplicationValidationUpdateManyWithWhereWithoutValidatedByInput[]
    deleteMany?: ApplicationValidationScalarWhereInput | ApplicationValidationScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutVerifiedByNestedInput = {
    create?: XOR<DocumentCreateWithoutVerifiedByInput, DocumentUncheckedCreateWithoutVerifiedByInput> | DocumentCreateWithoutVerifiedByInput[] | DocumentUncheckedCreateWithoutVerifiedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutVerifiedByInput | DocumentCreateOrConnectWithoutVerifiedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutVerifiedByInput | DocumentUpsertWithWhereUniqueWithoutVerifiedByInput[]
    createMany?: DocumentCreateManyVerifiedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutVerifiedByInput | DocumentUpdateWithWhereUniqueWithoutVerifiedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutVerifiedByInput | DocumentUpdateManyWithWhereWithoutVerifiedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput> | DocumentCreateWithoutUploadedByInput[] | DocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUploadedByInput | DocumentCreateOrConnectWithoutUploadedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUploadedByInput | DocumentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: DocumentCreateManyUploadedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUploadedByInput | DocumentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUploadedByInput | DocumentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type OfficerAssignmentUpdateManyWithoutAssignedByNestedInput = {
    create?: XOR<OfficerAssignmentCreateWithoutAssignedByInput, OfficerAssignmentUncheckedCreateWithoutAssignedByInput> | OfficerAssignmentCreateWithoutAssignedByInput[] | OfficerAssignmentUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: OfficerAssignmentCreateOrConnectWithoutAssignedByInput | OfficerAssignmentCreateOrConnectWithoutAssignedByInput[]
    upsert?: OfficerAssignmentUpsertWithWhereUniqueWithoutAssignedByInput | OfficerAssignmentUpsertWithWhereUniqueWithoutAssignedByInput[]
    createMany?: OfficerAssignmentCreateManyAssignedByInputEnvelope
    set?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    disconnect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    delete?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    connect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    update?: OfficerAssignmentUpdateWithWhereUniqueWithoutAssignedByInput | OfficerAssignmentUpdateWithWhereUniqueWithoutAssignedByInput[]
    updateMany?: OfficerAssignmentUpdateManyWithWhereWithoutAssignedByInput | OfficerAssignmentUpdateManyWithWhereWithoutAssignedByInput[]
    deleteMany?: OfficerAssignmentScalarWhereInput | OfficerAssignmentScalarWhereInput[]
  }

  export type OfficerAssignmentUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<OfficerAssignmentCreateWithoutAssignedToInput, OfficerAssignmentUncheckedCreateWithoutAssignedToInput> | OfficerAssignmentCreateWithoutAssignedToInput[] | OfficerAssignmentUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: OfficerAssignmentCreateOrConnectWithoutAssignedToInput | OfficerAssignmentCreateOrConnectWithoutAssignedToInput[]
    upsert?: OfficerAssignmentUpsertWithWhereUniqueWithoutAssignedToInput | OfficerAssignmentUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: OfficerAssignmentCreateManyAssignedToInputEnvelope
    set?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    disconnect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    delete?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    connect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    update?: OfficerAssignmentUpdateWithWhereUniqueWithoutAssignedToInput | OfficerAssignmentUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: OfficerAssignmentUpdateManyWithWhereWithoutAssignedToInput | OfficerAssignmentUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: OfficerAssignmentScalarWhereInput | OfficerAssignmentScalarWhereInput[]
  }

  export type DocumentRequestUpdateManyWithoutRequestedByNestedInput = {
    create?: XOR<DocumentRequestCreateWithoutRequestedByInput, DocumentRequestUncheckedCreateWithoutRequestedByInput> | DocumentRequestCreateWithoutRequestedByInput[] | DocumentRequestUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: DocumentRequestCreateOrConnectWithoutRequestedByInput | DocumentRequestCreateOrConnectWithoutRequestedByInput[]
    upsert?: DocumentRequestUpsertWithWhereUniqueWithoutRequestedByInput | DocumentRequestUpsertWithWhereUniqueWithoutRequestedByInput[]
    createMany?: DocumentRequestCreateManyRequestedByInputEnvelope
    set?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    disconnect?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    delete?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    connect?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    update?: DocumentRequestUpdateWithWhereUniqueWithoutRequestedByInput | DocumentRequestUpdateWithWhereUniqueWithoutRequestedByInput[]
    updateMany?: DocumentRequestUpdateManyWithWhereWithoutRequestedByInput | DocumentRequestUpdateManyWithWhereWithoutRequestedByInput[]
    deleteMany?: DocumentRequestScalarWhereInput | DocumentRequestScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ApplicationAuditLogUpdateManyWithoutPerformedByNestedInput = {
    create?: XOR<ApplicationAuditLogCreateWithoutPerformedByInput, ApplicationAuditLogUncheckedCreateWithoutPerformedByInput> | ApplicationAuditLogCreateWithoutPerformedByInput[] | ApplicationAuditLogUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: ApplicationAuditLogCreateOrConnectWithoutPerformedByInput | ApplicationAuditLogCreateOrConnectWithoutPerformedByInput[]
    upsert?: ApplicationAuditLogUpsertWithWhereUniqueWithoutPerformedByInput | ApplicationAuditLogUpsertWithWhereUniqueWithoutPerformedByInput[]
    createMany?: ApplicationAuditLogCreateManyPerformedByInputEnvelope
    set?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    disconnect?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    delete?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    connect?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    update?: ApplicationAuditLogUpdateWithWhereUniqueWithoutPerformedByInput | ApplicationAuditLogUpdateWithWhereUniqueWithoutPerformedByInput[]
    updateMany?: ApplicationAuditLogUpdateManyWithWhereWithoutPerformedByInput | ApplicationAuditLogUpdateManyWithWhereWithoutPerformedByInput[]
    deleteMany?: ApplicationAuditLogScalarWhereInput | ApplicationAuditLogScalarWhereInput[]
  }

  export type CitizenProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CitizenProfileCreateWithoutUserInput, CitizenProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: CitizenProfileCreateOrConnectWithoutUserInput
    upsert?: CitizenProfileUpsertWithoutUserInput
    disconnect?: CitizenProfileWhereInput | boolean
    delete?: CitizenProfileWhereInput | boolean
    connect?: CitizenProfileWhereUniqueInput
    update?: XOR<XOR<CitizenProfileUpdateToOneWithWhereWithoutUserInput, CitizenProfileUpdateWithoutUserInput>, CitizenProfileUncheckedUpdateWithoutUserInput>
  }

  export type OfficerProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<OfficerProfileCreateWithoutUserInput, OfficerProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: OfficerProfileCreateOrConnectWithoutUserInput
    upsert?: OfficerProfileUpsertWithoutUserInput
    disconnect?: OfficerProfileWhereInput | boolean
    delete?: OfficerProfileWhereInput | boolean
    connect?: OfficerProfileWhereUniqueInput
    update?: XOR<XOR<OfficerProfileUpdateToOneWithWhereWithoutUserInput, OfficerProfileUpdateWithoutUserInput>, OfficerProfileUncheckedUpdateWithoutUserInput>
  }

  export type ApplicationUncheckedUpdateManyWithoutCitizenNestedInput = {
    create?: XOR<ApplicationCreateWithoutCitizenInput, ApplicationUncheckedCreateWithoutCitizenInput> | ApplicationCreateWithoutCitizenInput[] | ApplicationUncheckedCreateWithoutCitizenInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCitizenInput | ApplicationCreateOrConnectWithoutCitizenInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutCitizenInput | ApplicationUpsertWithWhereUniqueWithoutCitizenInput[]
    createMany?: ApplicationCreateManyCitizenInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutCitizenInput | ApplicationUpdateWithWhereUniqueWithoutCitizenInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutCitizenInput | ApplicationUpdateManyWithWhereWithoutCitizenInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutCurrentHolderNestedInput = {
    create?: XOR<ApplicationCreateWithoutCurrentHolderInput, ApplicationUncheckedCreateWithoutCurrentHolderInput> | ApplicationCreateWithoutCurrentHolderInput[] | ApplicationUncheckedCreateWithoutCurrentHolderInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCurrentHolderInput | ApplicationCreateOrConnectWithoutCurrentHolderInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutCurrentHolderInput | ApplicationUpsertWithWhereUniqueWithoutCurrentHolderInput[]
    createMany?: ApplicationCreateManyCurrentHolderInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutCurrentHolderInput | ApplicationUpdateWithWhereUniqueWithoutCurrentHolderInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutCurrentHolderInput | ApplicationUpdateManyWithWhereWithoutCurrentHolderInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type ApplicationWorkflowUncheckedUpdateManyWithoutChangedByNestedInput = {
    create?: XOR<ApplicationWorkflowCreateWithoutChangedByInput, ApplicationWorkflowUncheckedCreateWithoutChangedByInput> | ApplicationWorkflowCreateWithoutChangedByInput[] | ApplicationWorkflowUncheckedCreateWithoutChangedByInput[]
    connectOrCreate?: ApplicationWorkflowCreateOrConnectWithoutChangedByInput | ApplicationWorkflowCreateOrConnectWithoutChangedByInput[]
    upsert?: ApplicationWorkflowUpsertWithWhereUniqueWithoutChangedByInput | ApplicationWorkflowUpsertWithWhereUniqueWithoutChangedByInput[]
    createMany?: ApplicationWorkflowCreateManyChangedByInputEnvelope
    set?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    disconnect?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    delete?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    connect?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    update?: ApplicationWorkflowUpdateWithWhereUniqueWithoutChangedByInput | ApplicationWorkflowUpdateWithWhereUniqueWithoutChangedByInput[]
    updateMany?: ApplicationWorkflowUpdateManyWithWhereWithoutChangedByInput | ApplicationWorkflowUpdateManyWithWhereWithoutChangedByInput[]
    deleteMany?: ApplicationWorkflowScalarWhereInput | ApplicationWorkflowScalarWhereInput[]
  }

  export type ApplicationValidationUncheckedUpdateManyWithoutValidatedByNestedInput = {
    create?: XOR<ApplicationValidationCreateWithoutValidatedByInput, ApplicationValidationUncheckedCreateWithoutValidatedByInput> | ApplicationValidationCreateWithoutValidatedByInput[] | ApplicationValidationUncheckedCreateWithoutValidatedByInput[]
    connectOrCreate?: ApplicationValidationCreateOrConnectWithoutValidatedByInput | ApplicationValidationCreateOrConnectWithoutValidatedByInput[]
    upsert?: ApplicationValidationUpsertWithWhereUniqueWithoutValidatedByInput | ApplicationValidationUpsertWithWhereUniqueWithoutValidatedByInput[]
    createMany?: ApplicationValidationCreateManyValidatedByInputEnvelope
    set?: ApplicationValidationWhereUniqueInput | ApplicationValidationWhereUniqueInput[]
    disconnect?: ApplicationValidationWhereUniqueInput | ApplicationValidationWhereUniqueInput[]
    delete?: ApplicationValidationWhereUniqueInput | ApplicationValidationWhereUniqueInput[]
    connect?: ApplicationValidationWhereUniqueInput | ApplicationValidationWhereUniqueInput[]
    update?: ApplicationValidationUpdateWithWhereUniqueWithoutValidatedByInput | ApplicationValidationUpdateWithWhereUniqueWithoutValidatedByInput[]
    updateMany?: ApplicationValidationUpdateManyWithWhereWithoutValidatedByInput | ApplicationValidationUpdateManyWithWhereWithoutValidatedByInput[]
    deleteMany?: ApplicationValidationScalarWhereInput | ApplicationValidationScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutVerifiedByNestedInput = {
    create?: XOR<DocumentCreateWithoutVerifiedByInput, DocumentUncheckedCreateWithoutVerifiedByInput> | DocumentCreateWithoutVerifiedByInput[] | DocumentUncheckedCreateWithoutVerifiedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutVerifiedByInput | DocumentCreateOrConnectWithoutVerifiedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutVerifiedByInput | DocumentUpsertWithWhereUniqueWithoutVerifiedByInput[]
    createMany?: DocumentCreateManyVerifiedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutVerifiedByInput | DocumentUpdateWithWhereUniqueWithoutVerifiedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutVerifiedByInput | DocumentUpdateManyWithWhereWithoutVerifiedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput> | DocumentCreateWithoutUploadedByInput[] | DocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUploadedByInput | DocumentCreateOrConnectWithoutUploadedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUploadedByInput | DocumentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: DocumentCreateManyUploadedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUploadedByInput | DocumentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUploadedByInput | DocumentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type OfficerAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput = {
    create?: XOR<OfficerAssignmentCreateWithoutAssignedByInput, OfficerAssignmentUncheckedCreateWithoutAssignedByInput> | OfficerAssignmentCreateWithoutAssignedByInput[] | OfficerAssignmentUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: OfficerAssignmentCreateOrConnectWithoutAssignedByInput | OfficerAssignmentCreateOrConnectWithoutAssignedByInput[]
    upsert?: OfficerAssignmentUpsertWithWhereUniqueWithoutAssignedByInput | OfficerAssignmentUpsertWithWhereUniqueWithoutAssignedByInput[]
    createMany?: OfficerAssignmentCreateManyAssignedByInputEnvelope
    set?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    disconnect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    delete?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    connect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    update?: OfficerAssignmentUpdateWithWhereUniqueWithoutAssignedByInput | OfficerAssignmentUpdateWithWhereUniqueWithoutAssignedByInput[]
    updateMany?: OfficerAssignmentUpdateManyWithWhereWithoutAssignedByInput | OfficerAssignmentUpdateManyWithWhereWithoutAssignedByInput[]
    deleteMany?: OfficerAssignmentScalarWhereInput | OfficerAssignmentScalarWhereInput[]
  }

  export type OfficerAssignmentUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<OfficerAssignmentCreateWithoutAssignedToInput, OfficerAssignmentUncheckedCreateWithoutAssignedToInput> | OfficerAssignmentCreateWithoutAssignedToInput[] | OfficerAssignmentUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: OfficerAssignmentCreateOrConnectWithoutAssignedToInput | OfficerAssignmentCreateOrConnectWithoutAssignedToInput[]
    upsert?: OfficerAssignmentUpsertWithWhereUniqueWithoutAssignedToInput | OfficerAssignmentUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: OfficerAssignmentCreateManyAssignedToInputEnvelope
    set?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    disconnect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    delete?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    connect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    update?: OfficerAssignmentUpdateWithWhereUniqueWithoutAssignedToInput | OfficerAssignmentUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: OfficerAssignmentUpdateManyWithWhereWithoutAssignedToInput | OfficerAssignmentUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: OfficerAssignmentScalarWhereInput | OfficerAssignmentScalarWhereInput[]
  }

  export type DocumentRequestUncheckedUpdateManyWithoutRequestedByNestedInput = {
    create?: XOR<DocumentRequestCreateWithoutRequestedByInput, DocumentRequestUncheckedCreateWithoutRequestedByInput> | DocumentRequestCreateWithoutRequestedByInput[] | DocumentRequestUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: DocumentRequestCreateOrConnectWithoutRequestedByInput | DocumentRequestCreateOrConnectWithoutRequestedByInput[]
    upsert?: DocumentRequestUpsertWithWhereUniqueWithoutRequestedByInput | DocumentRequestUpsertWithWhereUniqueWithoutRequestedByInput[]
    createMany?: DocumentRequestCreateManyRequestedByInputEnvelope
    set?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    disconnect?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    delete?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    connect?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    update?: DocumentRequestUpdateWithWhereUniqueWithoutRequestedByInput | DocumentRequestUpdateWithWhereUniqueWithoutRequestedByInput[]
    updateMany?: DocumentRequestUpdateManyWithWhereWithoutRequestedByInput | DocumentRequestUpdateManyWithWhereWithoutRequestedByInput[]
    deleteMany?: DocumentRequestScalarWhereInput | DocumentRequestScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByNestedInput = {
    create?: XOR<ApplicationAuditLogCreateWithoutPerformedByInput, ApplicationAuditLogUncheckedCreateWithoutPerformedByInput> | ApplicationAuditLogCreateWithoutPerformedByInput[] | ApplicationAuditLogUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: ApplicationAuditLogCreateOrConnectWithoutPerformedByInput | ApplicationAuditLogCreateOrConnectWithoutPerformedByInput[]
    upsert?: ApplicationAuditLogUpsertWithWhereUniqueWithoutPerformedByInput | ApplicationAuditLogUpsertWithWhereUniqueWithoutPerformedByInput[]
    createMany?: ApplicationAuditLogCreateManyPerformedByInputEnvelope
    set?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    disconnect?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    delete?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    connect?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    update?: ApplicationAuditLogUpdateWithWhereUniqueWithoutPerformedByInput | ApplicationAuditLogUpdateWithWhereUniqueWithoutPerformedByInput[]
    updateMany?: ApplicationAuditLogUpdateManyWithWhereWithoutPerformedByInput | ApplicationAuditLogUpdateManyWithWhereWithoutPerformedByInput[]
    deleteMany?: ApplicationAuditLogScalarWhereInput | ApplicationAuditLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCitizenProfileInput = {
    create?: XOR<UserCreateWithoutCitizenProfileInput, UserUncheckedCreateWithoutCitizenProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutCitizenProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCitizenProfileNestedInput = {
    create?: XOR<UserCreateWithoutCitizenProfileInput, UserUncheckedCreateWithoutCitizenProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutCitizenProfileInput
    upsert?: UserUpsertWithoutCitizenProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCitizenProfileInput, UserUpdateWithoutCitizenProfileInput>, UserUncheckedUpdateWithoutCitizenProfileInput>
  }

  export type UserCreateNestedOneWithoutOfficerProfileInput = {
    create?: XOR<UserCreateWithoutOfficerProfileInput, UserUncheckedCreateWithoutOfficerProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutOfficerProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutOfficerProfileNestedInput = {
    create?: XOR<UserCreateWithoutOfficerProfileInput, UserUncheckedCreateWithoutOfficerProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutOfficerProfileInput
    upsert?: UserUpsertWithoutOfficerProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOfficerProfileInput, UserUpdateWithoutOfficerProfileInput>, UserUncheckedUpdateWithoutOfficerProfileInput>
  }

  export type ApplicationCreateNestedManyWithoutServiceCategoryInput = {
    create?: XOR<ApplicationCreateWithoutServiceCategoryInput, ApplicationUncheckedCreateWithoutServiceCategoryInput> | ApplicationCreateWithoutServiceCategoryInput[] | ApplicationUncheckedCreateWithoutServiceCategoryInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutServiceCategoryInput | ApplicationCreateOrConnectWithoutServiceCategoryInput[]
    createMany?: ApplicationCreateManyServiceCategoryInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutServiceCategoryInput = {
    create?: XOR<ApplicationCreateWithoutServiceCategoryInput, ApplicationUncheckedCreateWithoutServiceCategoryInput> | ApplicationCreateWithoutServiceCategoryInput[] | ApplicationUncheckedCreateWithoutServiceCategoryInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutServiceCategoryInput | ApplicationCreateOrConnectWithoutServiceCategoryInput[]
    createMany?: ApplicationCreateManyServiceCategoryInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ApplicationUpdateManyWithoutServiceCategoryNestedInput = {
    create?: XOR<ApplicationCreateWithoutServiceCategoryInput, ApplicationUncheckedCreateWithoutServiceCategoryInput> | ApplicationCreateWithoutServiceCategoryInput[] | ApplicationUncheckedCreateWithoutServiceCategoryInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutServiceCategoryInput | ApplicationCreateOrConnectWithoutServiceCategoryInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutServiceCategoryInput | ApplicationUpsertWithWhereUniqueWithoutServiceCategoryInput[]
    createMany?: ApplicationCreateManyServiceCategoryInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutServiceCategoryInput | ApplicationUpdateWithWhereUniqueWithoutServiceCategoryInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutServiceCategoryInput | ApplicationUpdateManyWithWhereWithoutServiceCategoryInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutServiceCategoryNestedInput = {
    create?: XOR<ApplicationCreateWithoutServiceCategoryInput, ApplicationUncheckedCreateWithoutServiceCategoryInput> | ApplicationCreateWithoutServiceCategoryInput[] | ApplicationUncheckedCreateWithoutServiceCategoryInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutServiceCategoryInput | ApplicationCreateOrConnectWithoutServiceCategoryInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutServiceCategoryInput | ApplicationUpsertWithWhereUniqueWithoutServiceCategoryInput[]
    createMany?: ApplicationCreateManyServiceCategoryInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutServiceCategoryInput | ApplicationUpdateWithWhereUniqueWithoutServiceCategoryInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutServiceCategoryInput | ApplicationUpdateManyWithWhereWithoutServiceCategoryInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type ServiceCategoryCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<ServiceCategoryCreateWithoutApplicationsInput, ServiceCategoryUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutApplicationsInput
    connect?: ServiceCategoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCurrentHolderFilesInput = {
    create?: XOR<UserCreateWithoutCurrentHolderFilesInput, UserUncheckedCreateWithoutCurrentHolderFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCurrentHolderFilesInput
    connect?: UserWhereUniqueInput
  }

  export type ApplicationWorkflowCreateNestedManyWithoutApplicationInput = {
    create?: XOR<ApplicationWorkflowCreateWithoutApplicationInput, ApplicationWorkflowUncheckedCreateWithoutApplicationInput> | ApplicationWorkflowCreateWithoutApplicationInput[] | ApplicationWorkflowUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ApplicationWorkflowCreateOrConnectWithoutApplicationInput | ApplicationWorkflowCreateOrConnectWithoutApplicationInput[]
    createMany?: ApplicationWorkflowCreateManyApplicationInputEnvelope
    connect?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
  }

  export type ApplicationValidationCreateNestedOneWithoutApplicationInput = {
    create?: XOR<ApplicationValidationCreateWithoutApplicationInput, ApplicationValidationUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: ApplicationValidationCreateOrConnectWithoutApplicationInput
    connect?: ApplicationValidationWhereUniqueInput
  }

  export type OfficerAssignmentCreateNestedManyWithoutApplicationInput = {
    create?: XOR<OfficerAssignmentCreateWithoutApplicationInput, OfficerAssignmentUncheckedCreateWithoutApplicationInput> | OfficerAssignmentCreateWithoutApplicationInput[] | OfficerAssignmentUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: OfficerAssignmentCreateOrConnectWithoutApplicationInput | OfficerAssignmentCreateOrConnectWithoutApplicationInput[]
    createMany?: OfficerAssignmentCreateManyApplicationInputEnvelope
    connect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutApplicationInput = {
    create?: XOR<DocumentCreateWithoutApplicationInput, DocumentUncheckedCreateWithoutApplicationInput> | DocumentCreateWithoutApplicationInput[] | DocumentUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutApplicationInput | DocumentCreateOrConnectWithoutApplicationInput[]
    createMany?: DocumentCreateManyApplicationInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentRequestCreateNestedManyWithoutApplicationInput = {
    create?: XOR<DocumentRequestCreateWithoutApplicationInput, DocumentRequestUncheckedCreateWithoutApplicationInput> | DocumentRequestCreateWithoutApplicationInput[] | DocumentRequestUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: DocumentRequestCreateOrConnectWithoutApplicationInput | DocumentRequestCreateOrConnectWithoutApplicationInput[]
    createMany?: DocumentRequestCreateManyApplicationInputEnvelope
    connect?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutApplicationInput = {
    create?: XOR<NotificationCreateWithoutApplicationInput, NotificationUncheckedCreateWithoutApplicationInput> | NotificationCreateWithoutApplicationInput[] | NotificationUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutApplicationInput | NotificationCreateOrConnectWithoutApplicationInput[]
    createMany?: NotificationCreateManyApplicationInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ApplicationAuditLogCreateNestedManyWithoutApplicationInput = {
    create?: XOR<ApplicationAuditLogCreateWithoutApplicationInput, ApplicationAuditLogUncheckedCreateWithoutApplicationInput> | ApplicationAuditLogCreateWithoutApplicationInput[] | ApplicationAuditLogUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ApplicationAuditLogCreateOrConnectWithoutApplicationInput | ApplicationAuditLogCreateOrConnectWithoutApplicationInput[]
    createMany?: ApplicationAuditLogCreateManyApplicationInputEnvelope
    connect?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
  }

  export type ApplicationWorkflowUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<ApplicationWorkflowCreateWithoutApplicationInput, ApplicationWorkflowUncheckedCreateWithoutApplicationInput> | ApplicationWorkflowCreateWithoutApplicationInput[] | ApplicationWorkflowUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ApplicationWorkflowCreateOrConnectWithoutApplicationInput | ApplicationWorkflowCreateOrConnectWithoutApplicationInput[]
    createMany?: ApplicationWorkflowCreateManyApplicationInputEnvelope
    connect?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
  }

  export type ApplicationValidationUncheckedCreateNestedOneWithoutApplicationInput = {
    create?: XOR<ApplicationValidationCreateWithoutApplicationInput, ApplicationValidationUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: ApplicationValidationCreateOrConnectWithoutApplicationInput
    connect?: ApplicationValidationWhereUniqueInput
  }

  export type OfficerAssignmentUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<OfficerAssignmentCreateWithoutApplicationInput, OfficerAssignmentUncheckedCreateWithoutApplicationInput> | OfficerAssignmentCreateWithoutApplicationInput[] | OfficerAssignmentUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: OfficerAssignmentCreateOrConnectWithoutApplicationInput | OfficerAssignmentCreateOrConnectWithoutApplicationInput[]
    createMany?: OfficerAssignmentCreateManyApplicationInputEnvelope
    connect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<DocumentCreateWithoutApplicationInput, DocumentUncheckedCreateWithoutApplicationInput> | DocumentCreateWithoutApplicationInput[] | DocumentUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutApplicationInput | DocumentCreateOrConnectWithoutApplicationInput[]
    createMany?: DocumentCreateManyApplicationInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentRequestUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<DocumentRequestCreateWithoutApplicationInput, DocumentRequestUncheckedCreateWithoutApplicationInput> | DocumentRequestCreateWithoutApplicationInput[] | DocumentRequestUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: DocumentRequestCreateOrConnectWithoutApplicationInput | DocumentRequestCreateOrConnectWithoutApplicationInput[]
    createMany?: DocumentRequestCreateManyApplicationInputEnvelope
    connect?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<NotificationCreateWithoutApplicationInput, NotificationUncheckedCreateWithoutApplicationInput> | NotificationCreateWithoutApplicationInput[] | NotificationUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutApplicationInput | NotificationCreateOrConnectWithoutApplicationInput[]
    createMany?: NotificationCreateManyApplicationInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ApplicationAuditLogUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<ApplicationAuditLogCreateWithoutApplicationInput, ApplicationAuditLogUncheckedCreateWithoutApplicationInput> | ApplicationAuditLogCreateWithoutApplicationInput[] | ApplicationAuditLogUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ApplicationAuditLogCreateOrConnectWithoutApplicationInput | ApplicationAuditLogCreateOrConnectWithoutApplicationInput[]
    createMany?: ApplicationAuditLogCreateManyApplicationInputEnvelope
    connect?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
  }

  export type EnumApplicationStatusFieldUpdateOperationsInput = {
    set?: $Enums.ApplicationStatus
  }

  export type ServiceCategoryUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<ServiceCategoryCreateWithoutApplicationsInput, ServiceCategoryUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutApplicationsInput
    upsert?: ServiceCategoryUpsertWithoutApplicationsInput
    connect?: ServiceCategoryWhereUniqueInput
    update?: XOR<XOR<ServiceCategoryUpdateToOneWithWhereWithoutApplicationsInput, ServiceCategoryUpdateWithoutApplicationsInput>, ServiceCategoryUncheckedUpdateWithoutApplicationsInput>
  }

  export type UserUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicationsInput
    upsert?: UserUpsertWithoutApplicationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApplicationsInput, UserUpdateWithoutApplicationsInput>, UserUncheckedUpdateWithoutApplicationsInput>
  }

  export type UserUpdateOneWithoutCurrentHolderFilesNestedInput = {
    create?: XOR<UserCreateWithoutCurrentHolderFilesInput, UserUncheckedCreateWithoutCurrentHolderFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCurrentHolderFilesInput
    upsert?: UserUpsertWithoutCurrentHolderFilesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCurrentHolderFilesInput, UserUpdateWithoutCurrentHolderFilesInput>, UserUncheckedUpdateWithoutCurrentHolderFilesInput>
  }

  export type ApplicationWorkflowUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<ApplicationWorkflowCreateWithoutApplicationInput, ApplicationWorkflowUncheckedCreateWithoutApplicationInput> | ApplicationWorkflowCreateWithoutApplicationInput[] | ApplicationWorkflowUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ApplicationWorkflowCreateOrConnectWithoutApplicationInput | ApplicationWorkflowCreateOrConnectWithoutApplicationInput[]
    upsert?: ApplicationWorkflowUpsertWithWhereUniqueWithoutApplicationInput | ApplicationWorkflowUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: ApplicationWorkflowCreateManyApplicationInputEnvelope
    set?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    disconnect?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    delete?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    connect?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    update?: ApplicationWorkflowUpdateWithWhereUniqueWithoutApplicationInput | ApplicationWorkflowUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: ApplicationWorkflowUpdateManyWithWhereWithoutApplicationInput | ApplicationWorkflowUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: ApplicationWorkflowScalarWhereInput | ApplicationWorkflowScalarWhereInput[]
  }

  export type ApplicationValidationUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<ApplicationValidationCreateWithoutApplicationInput, ApplicationValidationUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: ApplicationValidationCreateOrConnectWithoutApplicationInput
    upsert?: ApplicationValidationUpsertWithoutApplicationInput
    disconnect?: ApplicationValidationWhereInput | boolean
    delete?: ApplicationValidationWhereInput | boolean
    connect?: ApplicationValidationWhereUniqueInput
    update?: XOR<XOR<ApplicationValidationUpdateToOneWithWhereWithoutApplicationInput, ApplicationValidationUpdateWithoutApplicationInput>, ApplicationValidationUncheckedUpdateWithoutApplicationInput>
  }

  export type OfficerAssignmentUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<OfficerAssignmentCreateWithoutApplicationInput, OfficerAssignmentUncheckedCreateWithoutApplicationInput> | OfficerAssignmentCreateWithoutApplicationInput[] | OfficerAssignmentUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: OfficerAssignmentCreateOrConnectWithoutApplicationInput | OfficerAssignmentCreateOrConnectWithoutApplicationInput[]
    upsert?: OfficerAssignmentUpsertWithWhereUniqueWithoutApplicationInput | OfficerAssignmentUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: OfficerAssignmentCreateManyApplicationInputEnvelope
    set?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    disconnect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    delete?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    connect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    update?: OfficerAssignmentUpdateWithWhereUniqueWithoutApplicationInput | OfficerAssignmentUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: OfficerAssignmentUpdateManyWithWhereWithoutApplicationInput | OfficerAssignmentUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: OfficerAssignmentScalarWhereInput | OfficerAssignmentScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<DocumentCreateWithoutApplicationInput, DocumentUncheckedCreateWithoutApplicationInput> | DocumentCreateWithoutApplicationInput[] | DocumentUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutApplicationInput | DocumentCreateOrConnectWithoutApplicationInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutApplicationInput | DocumentUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: DocumentCreateManyApplicationInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutApplicationInput | DocumentUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutApplicationInput | DocumentUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentRequestUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<DocumentRequestCreateWithoutApplicationInput, DocumentRequestUncheckedCreateWithoutApplicationInput> | DocumentRequestCreateWithoutApplicationInput[] | DocumentRequestUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: DocumentRequestCreateOrConnectWithoutApplicationInput | DocumentRequestCreateOrConnectWithoutApplicationInput[]
    upsert?: DocumentRequestUpsertWithWhereUniqueWithoutApplicationInput | DocumentRequestUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: DocumentRequestCreateManyApplicationInputEnvelope
    set?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    disconnect?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    delete?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    connect?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    update?: DocumentRequestUpdateWithWhereUniqueWithoutApplicationInput | DocumentRequestUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: DocumentRequestUpdateManyWithWhereWithoutApplicationInput | DocumentRequestUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: DocumentRequestScalarWhereInput | DocumentRequestScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<NotificationCreateWithoutApplicationInput, NotificationUncheckedCreateWithoutApplicationInput> | NotificationCreateWithoutApplicationInput[] | NotificationUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutApplicationInput | NotificationCreateOrConnectWithoutApplicationInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutApplicationInput | NotificationUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: NotificationCreateManyApplicationInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutApplicationInput | NotificationUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutApplicationInput | NotificationUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ApplicationAuditLogUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<ApplicationAuditLogCreateWithoutApplicationInput, ApplicationAuditLogUncheckedCreateWithoutApplicationInput> | ApplicationAuditLogCreateWithoutApplicationInput[] | ApplicationAuditLogUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ApplicationAuditLogCreateOrConnectWithoutApplicationInput | ApplicationAuditLogCreateOrConnectWithoutApplicationInput[]
    upsert?: ApplicationAuditLogUpsertWithWhereUniqueWithoutApplicationInput | ApplicationAuditLogUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: ApplicationAuditLogCreateManyApplicationInputEnvelope
    set?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    disconnect?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    delete?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    connect?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    update?: ApplicationAuditLogUpdateWithWhereUniqueWithoutApplicationInput | ApplicationAuditLogUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: ApplicationAuditLogUpdateManyWithWhereWithoutApplicationInput | ApplicationAuditLogUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: ApplicationAuditLogScalarWhereInput | ApplicationAuditLogScalarWhereInput[]
  }

  export type ApplicationWorkflowUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<ApplicationWorkflowCreateWithoutApplicationInput, ApplicationWorkflowUncheckedCreateWithoutApplicationInput> | ApplicationWorkflowCreateWithoutApplicationInput[] | ApplicationWorkflowUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ApplicationWorkflowCreateOrConnectWithoutApplicationInput | ApplicationWorkflowCreateOrConnectWithoutApplicationInput[]
    upsert?: ApplicationWorkflowUpsertWithWhereUniqueWithoutApplicationInput | ApplicationWorkflowUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: ApplicationWorkflowCreateManyApplicationInputEnvelope
    set?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    disconnect?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    delete?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    connect?: ApplicationWorkflowWhereUniqueInput | ApplicationWorkflowWhereUniqueInput[]
    update?: ApplicationWorkflowUpdateWithWhereUniqueWithoutApplicationInput | ApplicationWorkflowUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: ApplicationWorkflowUpdateManyWithWhereWithoutApplicationInput | ApplicationWorkflowUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: ApplicationWorkflowScalarWhereInput | ApplicationWorkflowScalarWhereInput[]
  }

  export type ApplicationValidationUncheckedUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<ApplicationValidationCreateWithoutApplicationInput, ApplicationValidationUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: ApplicationValidationCreateOrConnectWithoutApplicationInput
    upsert?: ApplicationValidationUpsertWithoutApplicationInput
    disconnect?: ApplicationValidationWhereInput | boolean
    delete?: ApplicationValidationWhereInput | boolean
    connect?: ApplicationValidationWhereUniqueInput
    update?: XOR<XOR<ApplicationValidationUpdateToOneWithWhereWithoutApplicationInput, ApplicationValidationUpdateWithoutApplicationInput>, ApplicationValidationUncheckedUpdateWithoutApplicationInput>
  }

  export type OfficerAssignmentUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<OfficerAssignmentCreateWithoutApplicationInput, OfficerAssignmentUncheckedCreateWithoutApplicationInput> | OfficerAssignmentCreateWithoutApplicationInput[] | OfficerAssignmentUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: OfficerAssignmentCreateOrConnectWithoutApplicationInput | OfficerAssignmentCreateOrConnectWithoutApplicationInput[]
    upsert?: OfficerAssignmentUpsertWithWhereUniqueWithoutApplicationInput | OfficerAssignmentUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: OfficerAssignmentCreateManyApplicationInputEnvelope
    set?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    disconnect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    delete?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    connect?: OfficerAssignmentWhereUniqueInput | OfficerAssignmentWhereUniqueInput[]
    update?: OfficerAssignmentUpdateWithWhereUniqueWithoutApplicationInput | OfficerAssignmentUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: OfficerAssignmentUpdateManyWithWhereWithoutApplicationInput | OfficerAssignmentUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: OfficerAssignmentScalarWhereInput | OfficerAssignmentScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<DocumentCreateWithoutApplicationInput, DocumentUncheckedCreateWithoutApplicationInput> | DocumentCreateWithoutApplicationInput[] | DocumentUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutApplicationInput | DocumentCreateOrConnectWithoutApplicationInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutApplicationInput | DocumentUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: DocumentCreateManyApplicationInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutApplicationInput | DocumentUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutApplicationInput | DocumentUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentRequestUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<DocumentRequestCreateWithoutApplicationInput, DocumentRequestUncheckedCreateWithoutApplicationInput> | DocumentRequestCreateWithoutApplicationInput[] | DocumentRequestUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: DocumentRequestCreateOrConnectWithoutApplicationInput | DocumentRequestCreateOrConnectWithoutApplicationInput[]
    upsert?: DocumentRequestUpsertWithWhereUniqueWithoutApplicationInput | DocumentRequestUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: DocumentRequestCreateManyApplicationInputEnvelope
    set?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    disconnect?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    delete?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    connect?: DocumentRequestWhereUniqueInput | DocumentRequestWhereUniqueInput[]
    update?: DocumentRequestUpdateWithWhereUniqueWithoutApplicationInput | DocumentRequestUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: DocumentRequestUpdateManyWithWhereWithoutApplicationInput | DocumentRequestUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: DocumentRequestScalarWhereInput | DocumentRequestScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<NotificationCreateWithoutApplicationInput, NotificationUncheckedCreateWithoutApplicationInput> | NotificationCreateWithoutApplicationInput[] | NotificationUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutApplicationInput | NotificationCreateOrConnectWithoutApplicationInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutApplicationInput | NotificationUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: NotificationCreateManyApplicationInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutApplicationInput | NotificationUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutApplicationInput | NotificationUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ApplicationAuditLogUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<ApplicationAuditLogCreateWithoutApplicationInput, ApplicationAuditLogUncheckedCreateWithoutApplicationInput> | ApplicationAuditLogCreateWithoutApplicationInput[] | ApplicationAuditLogUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: ApplicationAuditLogCreateOrConnectWithoutApplicationInput | ApplicationAuditLogCreateOrConnectWithoutApplicationInput[]
    upsert?: ApplicationAuditLogUpsertWithWhereUniqueWithoutApplicationInput | ApplicationAuditLogUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: ApplicationAuditLogCreateManyApplicationInputEnvelope
    set?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    disconnect?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    delete?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    connect?: ApplicationAuditLogWhereUniqueInput | ApplicationAuditLogWhereUniqueInput[]
    update?: ApplicationAuditLogUpdateWithWhereUniqueWithoutApplicationInput | ApplicationAuditLogUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: ApplicationAuditLogUpdateManyWithWhereWithoutApplicationInput | ApplicationAuditLogUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: ApplicationAuditLogScalarWhereInput | ApplicationAuditLogScalarWhereInput[]
  }

  export type ApplicationCreateNestedOneWithoutWorkflowInput = {
    create?: XOR<ApplicationCreateWithoutWorkflowInput, ApplicationUncheckedCreateWithoutWorkflowInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutWorkflowInput
    connect?: ApplicationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWorkflowChangesInput = {
    create?: XOR<UserCreateWithoutWorkflowChangesInput, UserUncheckedCreateWithoutWorkflowChangesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkflowChangesInput
    connect?: UserWhereUniqueInput
  }

  export type NullableEnumApplicationStatusFieldUpdateOperationsInput = {
    set?: $Enums.ApplicationStatus | null
  }

  export type ApplicationUpdateOneRequiredWithoutWorkflowNestedInput = {
    create?: XOR<ApplicationCreateWithoutWorkflowInput, ApplicationUncheckedCreateWithoutWorkflowInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutWorkflowInput
    upsert?: ApplicationUpsertWithoutWorkflowInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutWorkflowInput, ApplicationUpdateWithoutWorkflowInput>, ApplicationUncheckedUpdateWithoutWorkflowInput>
  }

  export type UserUpdateOneRequiredWithoutWorkflowChangesNestedInput = {
    create?: XOR<UserCreateWithoutWorkflowChangesInput, UserUncheckedCreateWithoutWorkflowChangesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkflowChangesInput
    upsert?: UserUpsertWithoutWorkflowChangesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkflowChangesInput, UserUpdateWithoutWorkflowChangesInput>, UserUncheckedUpdateWithoutWorkflowChangesInput>
  }

  export type ApplicationCreateNestedOneWithoutValidationInput = {
    create?: XOR<ApplicationCreateWithoutValidationInput, ApplicationUncheckedCreateWithoutValidationInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutValidationInput
    connect?: ApplicationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutValidationsInput = {
    create?: XOR<UserCreateWithoutValidationsInput, UserUncheckedCreateWithoutValidationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutValidationsInput
    connect?: UserWhereUniqueInput
  }

  export type ApplicationUpdateOneRequiredWithoutValidationNestedInput = {
    create?: XOR<ApplicationCreateWithoutValidationInput, ApplicationUncheckedCreateWithoutValidationInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutValidationInput
    upsert?: ApplicationUpsertWithoutValidationInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutValidationInput, ApplicationUpdateWithoutValidationInput>, ApplicationUncheckedUpdateWithoutValidationInput>
  }

  export type UserUpdateOneRequiredWithoutValidationsNestedInput = {
    create?: XOR<UserCreateWithoutValidationsInput, UserUncheckedCreateWithoutValidationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutValidationsInput
    upsert?: UserUpsertWithoutValidationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutValidationsInput, UserUpdateWithoutValidationsInput>, UserUncheckedUpdateWithoutValidationsInput>
  }

  export type ApplicationCreateNestedOneWithoutOfficerAssignmentsInput = {
    create?: XOR<ApplicationCreateWithoutOfficerAssignmentsInput, ApplicationUncheckedCreateWithoutOfficerAssignmentsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutOfficerAssignmentsInput
    connect?: ApplicationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignmentsGivenInput = {
    create?: XOR<UserCreateWithoutAssignmentsGivenInput, UserUncheckedCreateWithoutAssignmentsGivenInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentsGivenInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignmentsReceivedInput = {
    create?: XOR<UserCreateWithoutAssignmentsReceivedInput, UserUncheckedCreateWithoutAssignmentsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentsReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type ApplicationUpdateOneRequiredWithoutOfficerAssignmentsNestedInput = {
    create?: XOR<ApplicationCreateWithoutOfficerAssignmentsInput, ApplicationUncheckedCreateWithoutOfficerAssignmentsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutOfficerAssignmentsInput
    upsert?: ApplicationUpsertWithoutOfficerAssignmentsInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutOfficerAssignmentsInput, ApplicationUpdateWithoutOfficerAssignmentsInput>, ApplicationUncheckedUpdateWithoutOfficerAssignmentsInput>
  }

  export type UserUpdateOneRequiredWithoutAssignmentsGivenNestedInput = {
    create?: XOR<UserCreateWithoutAssignmentsGivenInput, UserUncheckedCreateWithoutAssignmentsGivenInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentsGivenInput
    upsert?: UserUpsertWithoutAssignmentsGivenInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignmentsGivenInput, UserUpdateWithoutAssignmentsGivenInput>, UserUncheckedUpdateWithoutAssignmentsGivenInput>
  }

  export type UserUpdateOneRequiredWithoutAssignmentsReceivedNestedInput = {
    create?: XOR<UserCreateWithoutAssignmentsReceivedInput, UserUncheckedCreateWithoutAssignmentsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentsReceivedInput
    upsert?: UserUpsertWithoutAssignmentsReceivedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignmentsReceivedInput, UserUpdateWithoutAssignmentsReceivedInput>, UserUncheckedUpdateWithoutAssignmentsReceivedInput>
  }

  export type ApplicationCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<ApplicationCreateWithoutDocumentsInput, ApplicationUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutDocumentsInput
    connect?: ApplicationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUploadedDocumentsInput = {
    create?: XOR<UserCreateWithoutUploadedDocumentsInput, UserUncheckedCreateWithoutUploadedDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedDocumentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutVerifiedDocumentsInput = {
    create?: XOR<UserCreateWithoutVerifiedDocumentsInput, UserUncheckedCreateWithoutVerifiedDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVerifiedDocumentsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumDocumentTypeFieldUpdateOperationsInput = {
    set?: $Enums.DocumentType
  }

  export type ApplicationUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<ApplicationCreateWithoutDocumentsInput, ApplicationUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutDocumentsInput
    upsert?: ApplicationUpsertWithoutDocumentsInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutDocumentsInput, ApplicationUpdateWithoutDocumentsInput>, ApplicationUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserUpdateOneRequiredWithoutUploadedDocumentsNestedInput = {
    create?: XOR<UserCreateWithoutUploadedDocumentsInput, UserUncheckedCreateWithoutUploadedDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedDocumentsInput
    upsert?: UserUpsertWithoutUploadedDocumentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUploadedDocumentsInput, UserUpdateWithoutUploadedDocumentsInput>, UserUncheckedUpdateWithoutUploadedDocumentsInput>
  }

  export type UserUpdateOneWithoutVerifiedDocumentsNestedInput = {
    create?: XOR<UserCreateWithoutVerifiedDocumentsInput, UserUncheckedCreateWithoutVerifiedDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVerifiedDocumentsInput
    upsert?: UserUpsertWithoutVerifiedDocumentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVerifiedDocumentsInput, UserUpdateWithoutVerifiedDocumentsInput>, UserUncheckedUpdateWithoutVerifiedDocumentsInput>
  }

  export type ApplicationCreateNestedOneWithoutDocumentRequestsInput = {
    create?: XOR<ApplicationCreateWithoutDocumentRequestsInput, ApplicationUncheckedCreateWithoutDocumentRequestsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutDocumentRequestsInput
    connect?: ApplicationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDocumentRequestsInput = {
    create?: XOR<UserCreateWithoutDocumentRequestsInput, UserUncheckedCreateWithoutDocumentRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type ApplicationUpdateOneRequiredWithoutDocumentRequestsNestedInput = {
    create?: XOR<ApplicationCreateWithoutDocumentRequestsInput, ApplicationUncheckedCreateWithoutDocumentRequestsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutDocumentRequestsInput
    upsert?: ApplicationUpsertWithoutDocumentRequestsInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutDocumentRequestsInput, ApplicationUpdateWithoutDocumentRequestsInput>, ApplicationUncheckedUpdateWithoutDocumentRequestsInput>
  }

  export type UserUpdateOneRequiredWithoutDocumentRequestsNestedInput = {
    create?: XOR<UserCreateWithoutDocumentRequestsInput, UserUncheckedCreateWithoutDocumentRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentRequestsInput
    upsert?: UserUpsertWithoutDocumentRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDocumentRequestsInput, UserUpdateWithoutDocumentRequestsInput>, UserUncheckedUpdateWithoutDocumentRequestsInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type ApplicationCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<ApplicationCreateWithoutNotificationsInput, ApplicationUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutNotificationsInput
    connect?: ApplicationWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type ApplicationUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<ApplicationCreateWithoutNotificationsInput, ApplicationUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutNotificationsInput
    upsert?: ApplicationUpsertWithoutNotificationsInput
    disconnect?: ApplicationWhereInput | boolean
    delete?: ApplicationWhereInput | boolean
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutNotificationsInput, ApplicationUpdateWithoutNotificationsInput>, ApplicationUncheckedUpdateWithoutNotificationsInput>
  }

  export type ApplicationCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<ApplicationCreateWithoutAuditLogsInput, ApplicationUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutAuditLogsInput
    connect?: ApplicationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type ApplicationUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<ApplicationCreateWithoutAuditLogsInput, ApplicationUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutAuditLogsInput
    upsert?: ApplicationUpsertWithoutAuditLogsInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutAuditLogsInput, ApplicationUpdateWithoutAuditLogsInput>, ApplicationUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumApplicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusFilter<$PrismaModel> | $Enums.ApplicationStatus
  }

  export type NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusFilter<$PrismaModel>
  }

  export type NestedEnumApplicationStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumApplicationStatusNullableFilter<$PrismaModel> | $Enums.ApplicationStatus | null
  }

  export type NestedEnumApplicationStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumApplicationStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusNullableFilter<$PrismaModel>
  }

  export type NestedEnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type CitizenProfileCreateWithoutUserInput = {
    id?: string
    fullName: string
    phone: string
    address: string
    aadhaarNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CitizenProfileUncheckedCreateWithoutUserInput = {
    id?: string
    fullName: string
    phone: string
    address: string
    aadhaarNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CitizenProfileCreateOrConnectWithoutUserInput = {
    where: CitizenProfileWhereUniqueInput
    create: XOR<CitizenProfileCreateWithoutUserInput, CitizenProfileUncheckedCreateWithoutUserInput>
  }

  export type OfficerProfileCreateWithoutUserInput = {
    id?: string
    fullName: string
    designation: string
    department: string
    officeLocation?: string | null
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfficerProfileUncheckedCreateWithoutUserInput = {
    id?: string
    fullName: string
    designation: string
    department: string
    officeLocation?: string | null
    isAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfficerProfileCreateOrConnectWithoutUserInput = {
    where: OfficerProfileWhereUniqueInput
    create: XOR<OfficerProfileCreateWithoutUserInput, OfficerProfileUncheckedCreateWithoutUserInput>
  }

  export type ApplicationCreateWithoutCitizenInput = {
    id?: string
    rrNumber?: string | null
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceCategory: ServiceCategoryCreateNestedOneWithoutApplicationsInput
    currentHolder?: UserCreateNestedOneWithoutCurrentHolderFilesInput
    workflow?: ApplicationWorkflowCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutApplicationInput
    notifications?: NotificationCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutCitizenInput = {
    id?: string
    rrNumber?: string | null
    serviceCategoryId: string
    status?: $Enums.ApplicationStatus
    currentHolderId?: string | null
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow?: ApplicationWorkflowUncheckedCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationUncheckedCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutApplicationInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutCitizenInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutCitizenInput, ApplicationUncheckedCreateWithoutCitizenInput>
  }

  export type ApplicationCreateManyCitizenInputEnvelope = {
    data: ApplicationCreateManyCitizenInput | ApplicationCreateManyCitizenInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationCreateWithoutCurrentHolderInput = {
    id?: string
    rrNumber?: string | null
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceCategory: ServiceCategoryCreateNestedOneWithoutApplicationsInput
    citizen: UserCreateNestedOneWithoutApplicationsInput
    workflow?: ApplicationWorkflowCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutApplicationInput
    notifications?: NotificationCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutCurrentHolderInput = {
    id?: string
    rrNumber?: string | null
    serviceCategoryId: string
    citizenId: string
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow?: ApplicationWorkflowUncheckedCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationUncheckedCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutApplicationInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutCurrentHolderInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutCurrentHolderInput, ApplicationUncheckedCreateWithoutCurrentHolderInput>
  }

  export type ApplicationCreateManyCurrentHolderInputEnvelope = {
    data: ApplicationCreateManyCurrentHolderInput | ApplicationCreateManyCurrentHolderInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationWorkflowCreateWithoutChangedByInput = {
    id?: string
    fromStatus?: $Enums.ApplicationStatus | null
    toStatus: $Enums.ApplicationStatus
    comments?: string | null
    createdAt?: Date | string
    application: ApplicationCreateNestedOneWithoutWorkflowInput
  }

  export type ApplicationWorkflowUncheckedCreateWithoutChangedByInput = {
    id?: string
    applicationId: string
    fromStatus?: $Enums.ApplicationStatus | null
    toStatus: $Enums.ApplicationStatus
    comments?: string | null
    createdAt?: Date | string
  }

  export type ApplicationWorkflowCreateOrConnectWithoutChangedByInput = {
    where: ApplicationWorkflowWhereUniqueInput
    create: XOR<ApplicationWorkflowCreateWithoutChangedByInput, ApplicationWorkflowUncheckedCreateWithoutChangedByInput>
  }

  export type ApplicationWorkflowCreateManyChangedByInputEnvelope = {
    data: ApplicationWorkflowCreateManyChangedByInput | ApplicationWorkflowCreateManyChangedByInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationValidationCreateWithoutValidatedByInput = {
    id?: string
    rrNumber: string
    isDocumentsComplete?: boolean
    isEligibilityVerified?: boolean
    validationNotes?: string | null
    createdAt?: Date | string
    application: ApplicationCreateNestedOneWithoutValidationInput
  }

  export type ApplicationValidationUncheckedCreateWithoutValidatedByInput = {
    id?: string
    applicationId: string
    rrNumber: string
    isDocumentsComplete?: boolean
    isEligibilityVerified?: boolean
    validationNotes?: string | null
    createdAt?: Date | string
  }

  export type ApplicationValidationCreateOrConnectWithoutValidatedByInput = {
    where: ApplicationValidationWhereUniqueInput
    create: XOR<ApplicationValidationCreateWithoutValidatedByInput, ApplicationValidationUncheckedCreateWithoutValidatedByInput>
  }

  export type ApplicationValidationCreateManyValidatedByInputEnvelope = {
    data: ApplicationValidationCreateManyValidatedByInput | ApplicationValidationCreateManyValidatedByInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutVerifiedByInput = {
    id?: string
    documentType: $Enums.DocumentType
    fileName: string
    filePath: string
    fileSize: number
    isVerified?: boolean
    verificationNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    application: ApplicationCreateNestedOneWithoutDocumentsInput
    uploadedBy: UserCreateNestedOneWithoutUploadedDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutVerifiedByInput = {
    id?: string
    applicationId: string
    documentType: $Enums.DocumentType
    fileName: string
    filePath: string
    fileSize: number
    uploadedById: string
    isVerified?: boolean
    verificationNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateOrConnectWithoutVerifiedByInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutVerifiedByInput, DocumentUncheckedCreateWithoutVerifiedByInput>
  }

  export type DocumentCreateManyVerifiedByInputEnvelope = {
    data: DocumentCreateManyVerifiedByInput | DocumentCreateManyVerifiedByInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutUploadedByInput = {
    id?: string
    documentType: $Enums.DocumentType
    fileName: string
    filePath: string
    fileSize: number
    isVerified?: boolean
    verificationNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    application: ApplicationCreateNestedOneWithoutDocumentsInput
    verifiedBy?: UserCreateNestedOneWithoutVerifiedDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutUploadedByInput = {
    id?: string
    applicationId: string
    documentType: $Enums.DocumentType
    fileName: string
    filePath: string
    fileSize: number
    isVerified?: boolean
    verifiedById?: string | null
    verificationNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateOrConnectWithoutUploadedByInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput>
  }

  export type DocumentCreateManyUploadedByInputEnvelope = {
    data: DocumentCreateManyUploadedByInput | DocumentCreateManyUploadedByInput[]
    skipDuplicates?: boolean
  }

  export type OfficerAssignmentCreateWithoutAssignedByInput = {
    id?: string
    expectedCompletionDate?: Date | string | null
    priority?: number
    instructions?: string | null
    createdAt?: Date | string
    application: ApplicationCreateNestedOneWithoutOfficerAssignmentsInput
    assignedTo: UserCreateNestedOneWithoutAssignmentsReceivedInput
  }

  export type OfficerAssignmentUncheckedCreateWithoutAssignedByInput = {
    id?: string
    applicationId: string
    assignedToId: string
    expectedCompletionDate?: Date | string | null
    priority?: number
    instructions?: string | null
    createdAt?: Date | string
  }

  export type OfficerAssignmentCreateOrConnectWithoutAssignedByInput = {
    where: OfficerAssignmentWhereUniqueInput
    create: XOR<OfficerAssignmentCreateWithoutAssignedByInput, OfficerAssignmentUncheckedCreateWithoutAssignedByInput>
  }

  export type OfficerAssignmentCreateManyAssignedByInputEnvelope = {
    data: OfficerAssignmentCreateManyAssignedByInput | OfficerAssignmentCreateManyAssignedByInput[]
    skipDuplicates?: boolean
  }

  export type OfficerAssignmentCreateWithoutAssignedToInput = {
    id?: string
    expectedCompletionDate?: Date | string | null
    priority?: number
    instructions?: string | null
    createdAt?: Date | string
    application: ApplicationCreateNestedOneWithoutOfficerAssignmentsInput
    assignedBy: UserCreateNestedOneWithoutAssignmentsGivenInput
  }

  export type OfficerAssignmentUncheckedCreateWithoutAssignedToInput = {
    id?: string
    applicationId: string
    assignedById: string
    expectedCompletionDate?: Date | string | null
    priority?: number
    instructions?: string | null
    createdAt?: Date | string
  }

  export type OfficerAssignmentCreateOrConnectWithoutAssignedToInput = {
    where: OfficerAssignmentWhereUniqueInput
    create: XOR<OfficerAssignmentCreateWithoutAssignedToInput, OfficerAssignmentUncheckedCreateWithoutAssignedToInput>
  }

  export type OfficerAssignmentCreateManyAssignedToInputEnvelope = {
    data: OfficerAssignmentCreateManyAssignedToInput | OfficerAssignmentCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type DocumentRequestCreateWithoutRequestedByInput = {
    id?: string
    documentType: $Enums.DocumentType
    reason?: string | null
    dueDate?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    application: ApplicationCreateNestedOneWithoutDocumentRequestsInput
  }

  export type DocumentRequestUncheckedCreateWithoutRequestedByInput = {
    id?: string
    applicationId: string
    documentType: $Enums.DocumentType
    reason?: string | null
    dueDate?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentRequestCreateOrConnectWithoutRequestedByInput = {
    where: DocumentRequestWhereUniqueInput
    create: XOR<DocumentRequestCreateWithoutRequestedByInput, DocumentRequestUncheckedCreateWithoutRequestedByInput>
  }

  export type DocumentRequestCreateManyRequestedByInputEnvelope = {
    data: DocumentRequestCreateManyRequestedByInput | DocumentRequestCreateManyRequestedByInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    notificationType: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    createdAt?: Date | string
    application?: ApplicationCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    notificationType: $Enums.NotificationType
    applicationId?: string | null
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationAuditLogCreateWithoutPerformedByInput = {
    id?: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    createdAt?: Date | string
    application: ApplicationCreateNestedOneWithoutAuditLogsInput
  }

  export type ApplicationAuditLogUncheckedCreateWithoutPerformedByInput = {
    id?: string
    applicationId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type ApplicationAuditLogCreateOrConnectWithoutPerformedByInput = {
    where: ApplicationAuditLogWhereUniqueInput
    create: XOR<ApplicationAuditLogCreateWithoutPerformedByInput, ApplicationAuditLogUncheckedCreateWithoutPerformedByInput>
  }

  export type ApplicationAuditLogCreateManyPerformedByInputEnvelope = {
    data: ApplicationAuditLogCreateManyPerformedByInput | ApplicationAuditLogCreateManyPerformedByInput[]
    skipDuplicates?: boolean
  }

  export type CitizenProfileUpsertWithoutUserInput = {
    update: XOR<CitizenProfileUpdateWithoutUserInput, CitizenProfileUncheckedUpdateWithoutUserInput>
    create: XOR<CitizenProfileCreateWithoutUserInput, CitizenProfileUncheckedCreateWithoutUserInput>
    where?: CitizenProfileWhereInput
  }

  export type CitizenProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: CitizenProfileWhereInput
    data: XOR<CitizenProfileUpdateWithoutUserInput, CitizenProfileUncheckedUpdateWithoutUserInput>
  }

  export type CitizenProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CitizenProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficerProfileUpsertWithoutUserInput = {
    update: XOR<OfficerProfileUpdateWithoutUserInput, OfficerProfileUncheckedUpdateWithoutUserInput>
    create: XOR<OfficerProfileCreateWithoutUserInput, OfficerProfileUncheckedCreateWithoutUserInput>
    where?: OfficerProfileWhereInput
  }

  export type OfficerProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: OfficerProfileWhereInput
    data: XOR<OfficerProfileUpdateWithoutUserInput, OfficerProfileUncheckedUpdateWithoutUserInput>
  }

  export type OfficerProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficerProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationUpsertWithWhereUniqueWithoutCitizenInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutCitizenInput, ApplicationUncheckedUpdateWithoutCitizenInput>
    create: XOR<ApplicationCreateWithoutCitizenInput, ApplicationUncheckedCreateWithoutCitizenInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutCitizenInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutCitizenInput, ApplicationUncheckedUpdateWithoutCitizenInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutCitizenInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutCitizenInput>
  }

  export type ApplicationScalarWhereInput = {
    AND?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    OR?: ApplicationScalarWhereInput[]
    NOT?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    id?: StringFilter<"Application"> | string
    rrNumber?: StringNullableFilter<"Application"> | string | null
    serviceCategoryId?: StringFilter<"Application"> | string
    citizenId?: StringFilter<"Application"> | string
    status?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    currentHolderId?: StringNullableFilter<"Application"> | string | null
    submittedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    validatedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
  }

  export type ApplicationUpsertWithWhereUniqueWithoutCurrentHolderInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutCurrentHolderInput, ApplicationUncheckedUpdateWithoutCurrentHolderInput>
    create: XOR<ApplicationCreateWithoutCurrentHolderInput, ApplicationUncheckedCreateWithoutCurrentHolderInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutCurrentHolderInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutCurrentHolderInput, ApplicationUncheckedUpdateWithoutCurrentHolderInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutCurrentHolderInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutCurrentHolderInput>
  }

  export type ApplicationWorkflowUpsertWithWhereUniqueWithoutChangedByInput = {
    where: ApplicationWorkflowWhereUniqueInput
    update: XOR<ApplicationWorkflowUpdateWithoutChangedByInput, ApplicationWorkflowUncheckedUpdateWithoutChangedByInput>
    create: XOR<ApplicationWorkflowCreateWithoutChangedByInput, ApplicationWorkflowUncheckedCreateWithoutChangedByInput>
  }

  export type ApplicationWorkflowUpdateWithWhereUniqueWithoutChangedByInput = {
    where: ApplicationWorkflowWhereUniqueInput
    data: XOR<ApplicationWorkflowUpdateWithoutChangedByInput, ApplicationWorkflowUncheckedUpdateWithoutChangedByInput>
  }

  export type ApplicationWorkflowUpdateManyWithWhereWithoutChangedByInput = {
    where: ApplicationWorkflowScalarWhereInput
    data: XOR<ApplicationWorkflowUpdateManyMutationInput, ApplicationWorkflowUncheckedUpdateManyWithoutChangedByInput>
  }

  export type ApplicationWorkflowScalarWhereInput = {
    AND?: ApplicationWorkflowScalarWhereInput | ApplicationWorkflowScalarWhereInput[]
    OR?: ApplicationWorkflowScalarWhereInput[]
    NOT?: ApplicationWorkflowScalarWhereInput | ApplicationWorkflowScalarWhereInput[]
    id?: StringFilter<"ApplicationWorkflow"> | string
    applicationId?: StringFilter<"ApplicationWorkflow"> | string
    fromStatus?: EnumApplicationStatusNullableFilter<"ApplicationWorkflow"> | $Enums.ApplicationStatus | null
    toStatus?: EnumApplicationStatusFilter<"ApplicationWorkflow"> | $Enums.ApplicationStatus
    changedById?: StringFilter<"ApplicationWorkflow"> | string
    comments?: StringNullableFilter<"ApplicationWorkflow"> | string | null
    createdAt?: DateTimeFilter<"ApplicationWorkflow"> | Date | string
  }

  export type ApplicationValidationUpsertWithWhereUniqueWithoutValidatedByInput = {
    where: ApplicationValidationWhereUniqueInput
    update: XOR<ApplicationValidationUpdateWithoutValidatedByInput, ApplicationValidationUncheckedUpdateWithoutValidatedByInput>
    create: XOR<ApplicationValidationCreateWithoutValidatedByInput, ApplicationValidationUncheckedCreateWithoutValidatedByInput>
  }

  export type ApplicationValidationUpdateWithWhereUniqueWithoutValidatedByInput = {
    where: ApplicationValidationWhereUniqueInput
    data: XOR<ApplicationValidationUpdateWithoutValidatedByInput, ApplicationValidationUncheckedUpdateWithoutValidatedByInput>
  }

  export type ApplicationValidationUpdateManyWithWhereWithoutValidatedByInput = {
    where: ApplicationValidationScalarWhereInput
    data: XOR<ApplicationValidationUpdateManyMutationInput, ApplicationValidationUncheckedUpdateManyWithoutValidatedByInput>
  }

  export type ApplicationValidationScalarWhereInput = {
    AND?: ApplicationValidationScalarWhereInput | ApplicationValidationScalarWhereInput[]
    OR?: ApplicationValidationScalarWhereInput[]
    NOT?: ApplicationValidationScalarWhereInput | ApplicationValidationScalarWhereInput[]
    id?: StringFilter<"ApplicationValidation"> | string
    applicationId?: StringFilter<"ApplicationValidation"> | string
    validatedById?: StringFilter<"ApplicationValidation"> | string
    rrNumber?: StringFilter<"ApplicationValidation"> | string
    isDocumentsComplete?: BoolFilter<"ApplicationValidation"> | boolean
    isEligibilityVerified?: BoolFilter<"ApplicationValidation"> | boolean
    validationNotes?: StringNullableFilter<"ApplicationValidation"> | string | null
    createdAt?: DateTimeFilter<"ApplicationValidation"> | Date | string
  }

  export type DocumentUpsertWithWhereUniqueWithoutVerifiedByInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutVerifiedByInput, DocumentUncheckedUpdateWithoutVerifiedByInput>
    create: XOR<DocumentCreateWithoutVerifiedByInput, DocumentUncheckedCreateWithoutVerifiedByInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutVerifiedByInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutVerifiedByInput, DocumentUncheckedUpdateWithoutVerifiedByInput>
  }

  export type DocumentUpdateManyWithWhereWithoutVerifiedByInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutVerifiedByInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: StringFilter<"Document"> | string
    applicationId?: StringFilter<"Document"> | string
    documentType?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    fileName?: StringFilter<"Document"> | string
    filePath?: StringFilter<"Document"> | string
    fileSize?: IntFilter<"Document"> | number
    uploadedById?: StringFilter<"Document"> | string
    isVerified?: BoolFilter<"Document"> | boolean
    verifiedById?: StringNullableFilter<"Document"> | string | null
    verificationNotes?: StringNullableFilter<"Document"> | string | null
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
  }

  export type DocumentUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutUploadedByInput, DocumentUncheckedUpdateWithoutUploadedByInput>
    create: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutUploadedByInput, DocumentUncheckedUpdateWithoutUploadedByInput>
  }

  export type DocumentUpdateManyWithWhereWithoutUploadedByInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type OfficerAssignmentUpsertWithWhereUniqueWithoutAssignedByInput = {
    where: OfficerAssignmentWhereUniqueInput
    update: XOR<OfficerAssignmentUpdateWithoutAssignedByInput, OfficerAssignmentUncheckedUpdateWithoutAssignedByInput>
    create: XOR<OfficerAssignmentCreateWithoutAssignedByInput, OfficerAssignmentUncheckedCreateWithoutAssignedByInput>
  }

  export type OfficerAssignmentUpdateWithWhereUniqueWithoutAssignedByInput = {
    where: OfficerAssignmentWhereUniqueInput
    data: XOR<OfficerAssignmentUpdateWithoutAssignedByInput, OfficerAssignmentUncheckedUpdateWithoutAssignedByInput>
  }

  export type OfficerAssignmentUpdateManyWithWhereWithoutAssignedByInput = {
    where: OfficerAssignmentScalarWhereInput
    data: XOR<OfficerAssignmentUpdateManyMutationInput, OfficerAssignmentUncheckedUpdateManyWithoutAssignedByInput>
  }

  export type OfficerAssignmentScalarWhereInput = {
    AND?: OfficerAssignmentScalarWhereInput | OfficerAssignmentScalarWhereInput[]
    OR?: OfficerAssignmentScalarWhereInput[]
    NOT?: OfficerAssignmentScalarWhereInput | OfficerAssignmentScalarWhereInput[]
    id?: StringFilter<"OfficerAssignment"> | string
    applicationId?: StringFilter<"OfficerAssignment"> | string
    assignedById?: StringFilter<"OfficerAssignment"> | string
    assignedToId?: StringFilter<"OfficerAssignment"> | string
    expectedCompletionDate?: DateTimeNullableFilter<"OfficerAssignment"> | Date | string | null
    priority?: IntFilter<"OfficerAssignment"> | number
    instructions?: StringNullableFilter<"OfficerAssignment"> | string | null
    createdAt?: DateTimeFilter<"OfficerAssignment"> | Date | string
  }

  export type OfficerAssignmentUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: OfficerAssignmentWhereUniqueInput
    update: XOR<OfficerAssignmentUpdateWithoutAssignedToInput, OfficerAssignmentUncheckedUpdateWithoutAssignedToInput>
    create: XOR<OfficerAssignmentCreateWithoutAssignedToInput, OfficerAssignmentUncheckedCreateWithoutAssignedToInput>
  }

  export type OfficerAssignmentUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: OfficerAssignmentWhereUniqueInput
    data: XOR<OfficerAssignmentUpdateWithoutAssignedToInput, OfficerAssignmentUncheckedUpdateWithoutAssignedToInput>
  }

  export type OfficerAssignmentUpdateManyWithWhereWithoutAssignedToInput = {
    where: OfficerAssignmentScalarWhereInput
    data: XOR<OfficerAssignmentUpdateManyMutationInput, OfficerAssignmentUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type DocumentRequestUpsertWithWhereUniqueWithoutRequestedByInput = {
    where: DocumentRequestWhereUniqueInput
    update: XOR<DocumentRequestUpdateWithoutRequestedByInput, DocumentRequestUncheckedUpdateWithoutRequestedByInput>
    create: XOR<DocumentRequestCreateWithoutRequestedByInput, DocumentRequestUncheckedCreateWithoutRequestedByInput>
  }

  export type DocumentRequestUpdateWithWhereUniqueWithoutRequestedByInput = {
    where: DocumentRequestWhereUniqueInput
    data: XOR<DocumentRequestUpdateWithoutRequestedByInput, DocumentRequestUncheckedUpdateWithoutRequestedByInput>
  }

  export type DocumentRequestUpdateManyWithWhereWithoutRequestedByInput = {
    where: DocumentRequestScalarWhereInput
    data: XOR<DocumentRequestUpdateManyMutationInput, DocumentRequestUncheckedUpdateManyWithoutRequestedByInput>
  }

  export type DocumentRequestScalarWhereInput = {
    AND?: DocumentRequestScalarWhereInput | DocumentRequestScalarWhereInput[]
    OR?: DocumentRequestScalarWhereInput[]
    NOT?: DocumentRequestScalarWhereInput | DocumentRequestScalarWhereInput[]
    id?: StringFilter<"DocumentRequest"> | string
    applicationId?: StringFilter<"DocumentRequest"> | string
    requestedById?: StringFilter<"DocumentRequest"> | string
    documentType?: EnumDocumentTypeFilter<"DocumentRequest"> | $Enums.DocumentType
    reason?: StringNullableFilter<"DocumentRequest"> | string | null
    dueDate?: DateTimeNullableFilter<"DocumentRequest"> | Date | string | null
    isCompleted?: BoolFilter<"DocumentRequest"> | boolean
    createdAt?: DateTimeFilter<"DocumentRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DocumentRequest"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    notificationType?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    applicationId?: StringNullableFilter<"Notification"> | string | null
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type ApplicationAuditLogUpsertWithWhereUniqueWithoutPerformedByInput = {
    where: ApplicationAuditLogWhereUniqueInput
    update: XOR<ApplicationAuditLogUpdateWithoutPerformedByInput, ApplicationAuditLogUncheckedUpdateWithoutPerformedByInput>
    create: XOR<ApplicationAuditLogCreateWithoutPerformedByInput, ApplicationAuditLogUncheckedCreateWithoutPerformedByInput>
  }

  export type ApplicationAuditLogUpdateWithWhereUniqueWithoutPerformedByInput = {
    where: ApplicationAuditLogWhereUniqueInput
    data: XOR<ApplicationAuditLogUpdateWithoutPerformedByInput, ApplicationAuditLogUncheckedUpdateWithoutPerformedByInput>
  }

  export type ApplicationAuditLogUpdateManyWithWhereWithoutPerformedByInput = {
    where: ApplicationAuditLogScalarWhereInput
    data: XOR<ApplicationAuditLogUpdateManyMutationInput, ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByInput>
  }

  export type ApplicationAuditLogScalarWhereInput = {
    AND?: ApplicationAuditLogScalarWhereInput | ApplicationAuditLogScalarWhereInput[]
    OR?: ApplicationAuditLogScalarWhereInput[]
    NOT?: ApplicationAuditLogScalarWhereInput | ApplicationAuditLogScalarWhereInput[]
    id?: StringFilter<"ApplicationAuditLog"> | string
    applicationId?: StringFilter<"ApplicationAuditLog"> | string
    action?: StringFilter<"ApplicationAuditLog"> | string
    performedById?: StringFilter<"ApplicationAuditLog"> | string
    oldValues?: JsonNullableFilter<"ApplicationAuditLog">
    newValues?: JsonNullableFilter<"ApplicationAuditLog">
    ipAddress?: StringNullableFilter<"ApplicationAuditLog"> | string | null
    createdAt?: DateTimeFilter<"ApplicationAuditLog"> | Date | string
  }

  export type UserCreateWithoutCitizenProfileInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    officerProfile?: OfficerProfileCreateNestedOneWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutPerformedByInput
  }

  export type UserUncheckedCreateWithoutCitizenProfileInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    officerProfile?: OfficerProfileUncheckedCreateNestedOneWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationUncheckedCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowUncheckedCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationUncheckedCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentUncheckedCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutPerformedByInput
  }

  export type UserCreateOrConnectWithoutCitizenProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCitizenProfileInput, UserUncheckedCreateWithoutCitizenProfileInput>
  }

  export type UserUpsertWithoutCitizenProfileInput = {
    update: XOR<UserUpdateWithoutCitizenProfileInput, UserUncheckedUpdateWithoutCitizenProfileInput>
    create: XOR<UserCreateWithoutCitizenProfileInput, UserUncheckedCreateWithoutCitizenProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCitizenProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCitizenProfileInput, UserUncheckedUpdateWithoutCitizenProfileInput>
  }

  export type UserUpdateWithoutCitizenProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    officerProfile?: OfficerProfileUpdateOneWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCitizenProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    officerProfile?: OfficerProfileUncheckedUpdateOneWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUncheckedUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUncheckedUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUncheckedUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUncheckedUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByNestedInput
  }

  export type UserCreateWithoutOfficerProfileInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileCreateNestedOneWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutPerformedByInput
  }

  export type UserUncheckedCreateWithoutOfficerProfileInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileUncheckedCreateNestedOneWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationUncheckedCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowUncheckedCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationUncheckedCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentUncheckedCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutPerformedByInput
  }

  export type UserCreateOrConnectWithoutOfficerProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOfficerProfileInput, UserUncheckedCreateWithoutOfficerProfileInput>
  }

  export type UserUpsertWithoutOfficerProfileInput = {
    update: XOR<UserUpdateWithoutOfficerProfileInput, UserUncheckedUpdateWithoutOfficerProfileInput>
    create: XOR<UserCreateWithoutOfficerProfileInput, UserUncheckedCreateWithoutOfficerProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOfficerProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOfficerProfileInput, UserUncheckedUpdateWithoutOfficerProfileInput>
  }

  export type UserUpdateWithoutOfficerProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUpdateOneWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUncheckedUpdateWithoutOfficerProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUncheckedUpdateOneWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUncheckedUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUncheckedUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUncheckedUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUncheckedUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByNestedInput
  }

  export type ApplicationCreateWithoutServiceCategoryInput = {
    id?: string
    rrNumber?: string | null
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizen: UserCreateNestedOneWithoutApplicationsInput
    currentHolder?: UserCreateNestedOneWithoutCurrentHolderFilesInput
    workflow?: ApplicationWorkflowCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutApplicationInput
    notifications?: NotificationCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutServiceCategoryInput = {
    id?: string
    rrNumber?: string | null
    citizenId: string
    status?: $Enums.ApplicationStatus
    currentHolderId?: string | null
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow?: ApplicationWorkflowUncheckedCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationUncheckedCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutApplicationInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutServiceCategoryInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutServiceCategoryInput, ApplicationUncheckedCreateWithoutServiceCategoryInput>
  }

  export type ApplicationCreateManyServiceCategoryInputEnvelope = {
    data: ApplicationCreateManyServiceCategoryInput | ApplicationCreateManyServiceCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationUpsertWithWhereUniqueWithoutServiceCategoryInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutServiceCategoryInput, ApplicationUncheckedUpdateWithoutServiceCategoryInput>
    create: XOR<ApplicationCreateWithoutServiceCategoryInput, ApplicationUncheckedCreateWithoutServiceCategoryInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutServiceCategoryInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutServiceCategoryInput, ApplicationUncheckedUpdateWithoutServiceCategoryInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutServiceCategoryInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutServiceCategoryInput>
  }

  export type ServiceCategoryCreateWithoutApplicationsInput = {
    id?: string
    name: string
    description?: string | null
    slaDays: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCategoryUncheckedCreateWithoutApplicationsInput = {
    id?: string
    name: string
    description?: string | null
    slaDays: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCategoryCreateOrConnectWithoutApplicationsInput = {
    where: ServiceCategoryWhereUniqueInput
    create: XOR<ServiceCategoryCreateWithoutApplicationsInput, ServiceCategoryUncheckedCreateWithoutApplicationsInput>
  }

  export type UserCreateWithoutApplicationsInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileCreateNestedOneWithoutUserInput
    currentHolderFiles?: ApplicationCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutPerformedByInput
  }

  export type UserUncheckedCreateWithoutApplicationsInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileUncheckedCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileUncheckedCreateNestedOneWithoutUserInput
    currentHolderFiles?: ApplicationUncheckedCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowUncheckedCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationUncheckedCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentUncheckedCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutPerformedByInput
  }

  export type UserCreateOrConnectWithoutApplicationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
  }

  export type UserCreateWithoutCurrentHolderFilesInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileCreateNestedOneWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutCitizenInput
    workflowChanges?: ApplicationWorkflowCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutPerformedByInput
  }

  export type UserUncheckedCreateWithoutCurrentHolderFilesInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileUncheckedCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileUncheckedCreateNestedOneWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCitizenInput
    workflowChanges?: ApplicationWorkflowUncheckedCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationUncheckedCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentUncheckedCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutPerformedByInput
  }

  export type UserCreateOrConnectWithoutCurrentHolderFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCurrentHolderFilesInput, UserUncheckedCreateWithoutCurrentHolderFilesInput>
  }

  export type ApplicationWorkflowCreateWithoutApplicationInput = {
    id?: string
    fromStatus?: $Enums.ApplicationStatus | null
    toStatus: $Enums.ApplicationStatus
    comments?: string | null
    createdAt?: Date | string
    changedBy: UserCreateNestedOneWithoutWorkflowChangesInput
  }

  export type ApplicationWorkflowUncheckedCreateWithoutApplicationInput = {
    id?: string
    fromStatus?: $Enums.ApplicationStatus | null
    toStatus: $Enums.ApplicationStatus
    changedById: string
    comments?: string | null
    createdAt?: Date | string
  }

  export type ApplicationWorkflowCreateOrConnectWithoutApplicationInput = {
    where: ApplicationWorkflowWhereUniqueInput
    create: XOR<ApplicationWorkflowCreateWithoutApplicationInput, ApplicationWorkflowUncheckedCreateWithoutApplicationInput>
  }

  export type ApplicationWorkflowCreateManyApplicationInputEnvelope = {
    data: ApplicationWorkflowCreateManyApplicationInput | ApplicationWorkflowCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationValidationCreateWithoutApplicationInput = {
    id?: string
    rrNumber: string
    isDocumentsComplete?: boolean
    isEligibilityVerified?: boolean
    validationNotes?: string | null
    createdAt?: Date | string
    validatedBy: UserCreateNestedOneWithoutValidationsInput
  }

  export type ApplicationValidationUncheckedCreateWithoutApplicationInput = {
    id?: string
    validatedById: string
    rrNumber: string
    isDocumentsComplete?: boolean
    isEligibilityVerified?: boolean
    validationNotes?: string | null
    createdAt?: Date | string
  }

  export type ApplicationValidationCreateOrConnectWithoutApplicationInput = {
    where: ApplicationValidationWhereUniqueInput
    create: XOR<ApplicationValidationCreateWithoutApplicationInput, ApplicationValidationUncheckedCreateWithoutApplicationInput>
  }

  export type OfficerAssignmentCreateWithoutApplicationInput = {
    id?: string
    expectedCompletionDate?: Date | string | null
    priority?: number
    instructions?: string | null
    createdAt?: Date | string
    assignedBy: UserCreateNestedOneWithoutAssignmentsGivenInput
    assignedTo: UserCreateNestedOneWithoutAssignmentsReceivedInput
  }

  export type OfficerAssignmentUncheckedCreateWithoutApplicationInput = {
    id?: string
    assignedById: string
    assignedToId: string
    expectedCompletionDate?: Date | string | null
    priority?: number
    instructions?: string | null
    createdAt?: Date | string
  }

  export type OfficerAssignmentCreateOrConnectWithoutApplicationInput = {
    where: OfficerAssignmentWhereUniqueInput
    create: XOR<OfficerAssignmentCreateWithoutApplicationInput, OfficerAssignmentUncheckedCreateWithoutApplicationInput>
  }

  export type OfficerAssignmentCreateManyApplicationInputEnvelope = {
    data: OfficerAssignmentCreateManyApplicationInput | OfficerAssignmentCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutApplicationInput = {
    id?: string
    documentType: $Enums.DocumentType
    fileName: string
    filePath: string
    fileSize: number
    isVerified?: boolean
    verificationNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedBy: UserCreateNestedOneWithoutUploadedDocumentsInput
    verifiedBy?: UserCreateNestedOneWithoutVerifiedDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutApplicationInput = {
    id?: string
    documentType: $Enums.DocumentType
    fileName: string
    filePath: string
    fileSize: number
    uploadedById: string
    isVerified?: boolean
    verifiedById?: string | null
    verificationNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateOrConnectWithoutApplicationInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutApplicationInput, DocumentUncheckedCreateWithoutApplicationInput>
  }

  export type DocumentCreateManyApplicationInputEnvelope = {
    data: DocumentCreateManyApplicationInput | DocumentCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type DocumentRequestCreateWithoutApplicationInput = {
    id?: string
    documentType: $Enums.DocumentType
    reason?: string | null
    dueDate?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    requestedBy: UserCreateNestedOneWithoutDocumentRequestsInput
  }

  export type DocumentRequestUncheckedCreateWithoutApplicationInput = {
    id?: string
    requestedById: string
    documentType: $Enums.DocumentType
    reason?: string | null
    dueDate?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentRequestCreateOrConnectWithoutApplicationInput = {
    where: DocumentRequestWhereUniqueInput
    create: XOR<DocumentRequestCreateWithoutApplicationInput, DocumentRequestUncheckedCreateWithoutApplicationInput>
  }

  export type DocumentRequestCreateManyApplicationInputEnvelope = {
    data: DocumentRequestCreateManyApplicationInput | DocumentRequestCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutApplicationInput = {
    id?: string
    notificationType: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutApplicationInput = {
    id?: string
    userId: string
    notificationType: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutApplicationInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutApplicationInput, NotificationUncheckedCreateWithoutApplicationInput>
  }

  export type NotificationCreateManyApplicationInputEnvelope = {
    data: NotificationCreateManyApplicationInput | NotificationCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationAuditLogCreateWithoutApplicationInput = {
    id?: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    createdAt?: Date | string
    performedBy: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type ApplicationAuditLogUncheckedCreateWithoutApplicationInput = {
    id?: string
    action: string
    performedById: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type ApplicationAuditLogCreateOrConnectWithoutApplicationInput = {
    where: ApplicationAuditLogWhereUniqueInput
    create: XOR<ApplicationAuditLogCreateWithoutApplicationInput, ApplicationAuditLogUncheckedCreateWithoutApplicationInput>
  }

  export type ApplicationAuditLogCreateManyApplicationInputEnvelope = {
    data: ApplicationAuditLogCreateManyApplicationInput | ApplicationAuditLogCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type ServiceCategoryUpsertWithoutApplicationsInput = {
    update: XOR<ServiceCategoryUpdateWithoutApplicationsInput, ServiceCategoryUncheckedUpdateWithoutApplicationsInput>
    create: XOR<ServiceCategoryCreateWithoutApplicationsInput, ServiceCategoryUncheckedCreateWithoutApplicationsInput>
    where?: ServiceCategoryWhereInput
  }

  export type ServiceCategoryUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: ServiceCategoryWhereInput
    data: XOR<ServiceCategoryUpdateWithoutApplicationsInput, ServiceCategoryUncheckedUpdateWithoutApplicationsInput>
  }

  export type ServiceCategoryUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slaDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCategoryUncheckedUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slaDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutApplicationsInput = {
    update: XOR<UserUpdateWithoutApplicationsInput, UserUncheckedUpdateWithoutApplicationsInput>
    create: XOR<UserCreateWithoutApplicationsInput, UserUncheckedCreateWithoutApplicationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApplicationsInput, UserUncheckedUpdateWithoutApplicationsInput>
  }

  export type UserUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUpdateOneWithoutUserNestedInput
    currentHolderFiles?: ApplicationUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUncheckedUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUncheckedUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUncheckedUpdateOneWithoutUserNestedInput
    currentHolderFiles?: ApplicationUncheckedUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUncheckedUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUncheckedUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUncheckedUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUpsertWithoutCurrentHolderFilesInput = {
    update: XOR<UserUpdateWithoutCurrentHolderFilesInput, UserUncheckedUpdateWithoutCurrentHolderFilesInput>
    create: XOR<UserCreateWithoutCurrentHolderFilesInput, UserUncheckedCreateWithoutCurrentHolderFilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCurrentHolderFilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCurrentHolderFilesInput, UserUncheckedUpdateWithoutCurrentHolderFilesInput>
  }

  export type UserUpdateWithoutCurrentHolderFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUpdateOneWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutCitizenNestedInput
    workflowChanges?: ApplicationWorkflowUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCurrentHolderFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUncheckedUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUncheckedUpdateOneWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCitizenNestedInput
    workflowChanges?: ApplicationWorkflowUncheckedUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUncheckedUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUncheckedUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByNestedInput
  }

  export type ApplicationWorkflowUpsertWithWhereUniqueWithoutApplicationInput = {
    where: ApplicationWorkflowWhereUniqueInput
    update: XOR<ApplicationWorkflowUpdateWithoutApplicationInput, ApplicationWorkflowUncheckedUpdateWithoutApplicationInput>
    create: XOR<ApplicationWorkflowCreateWithoutApplicationInput, ApplicationWorkflowUncheckedCreateWithoutApplicationInput>
  }

  export type ApplicationWorkflowUpdateWithWhereUniqueWithoutApplicationInput = {
    where: ApplicationWorkflowWhereUniqueInput
    data: XOR<ApplicationWorkflowUpdateWithoutApplicationInput, ApplicationWorkflowUncheckedUpdateWithoutApplicationInput>
  }

  export type ApplicationWorkflowUpdateManyWithWhereWithoutApplicationInput = {
    where: ApplicationWorkflowScalarWhereInput
    data: XOR<ApplicationWorkflowUpdateManyMutationInput, ApplicationWorkflowUncheckedUpdateManyWithoutApplicationInput>
  }

  export type ApplicationValidationUpsertWithoutApplicationInput = {
    update: XOR<ApplicationValidationUpdateWithoutApplicationInput, ApplicationValidationUncheckedUpdateWithoutApplicationInput>
    create: XOR<ApplicationValidationCreateWithoutApplicationInput, ApplicationValidationUncheckedCreateWithoutApplicationInput>
    where?: ApplicationValidationWhereInput
  }

  export type ApplicationValidationUpdateToOneWithWhereWithoutApplicationInput = {
    where?: ApplicationValidationWhereInput
    data: XOR<ApplicationValidationUpdateWithoutApplicationInput, ApplicationValidationUncheckedUpdateWithoutApplicationInput>
  }

  export type ApplicationValidationUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: StringFieldUpdateOperationsInput | string
    isDocumentsComplete?: BoolFieldUpdateOperationsInput | boolean
    isEligibilityVerified?: BoolFieldUpdateOperationsInput | boolean
    validationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validatedBy?: UserUpdateOneRequiredWithoutValidationsNestedInput
  }

  export type ApplicationValidationUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    validatedById?: StringFieldUpdateOperationsInput | string
    rrNumber?: StringFieldUpdateOperationsInput | string
    isDocumentsComplete?: BoolFieldUpdateOperationsInput | boolean
    isEligibilityVerified?: BoolFieldUpdateOperationsInput | boolean
    validationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficerAssignmentUpsertWithWhereUniqueWithoutApplicationInput = {
    where: OfficerAssignmentWhereUniqueInput
    update: XOR<OfficerAssignmentUpdateWithoutApplicationInput, OfficerAssignmentUncheckedUpdateWithoutApplicationInput>
    create: XOR<OfficerAssignmentCreateWithoutApplicationInput, OfficerAssignmentUncheckedCreateWithoutApplicationInput>
  }

  export type OfficerAssignmentUpdateWithWhereUniqueWithoutApplicationInput = {
    where: OfficerAssignmentWhereUniqueInput
    data: XOR<OfficerAssignmentUpdateWithoutApplicationInput, OfficerAssignmentUncheckedUpdateWithoutApplicationInput>
  }

  export type OfficerAssignmentUpdateManyWithWhereWithoutApplicationInput = {
    where: OfficerAssignmentScalarWhereInput
    data: XOR<OfficerAssignmentUpdateManyMutationInput, OfficerAssignmentUncheckedUpdateManyWithoutApplicationInput>
  }

  export type DocumentUpsertWithWhereUniqueWithoutApplicationInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutApplicationInput, DocumentUncheckedUpdateWithoutApplicationInput>
    create: XOR<DocumentCreateWithoutApplicationInput, DocumentUncheckedCreateWithoutApplicationInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutApplicationInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutApplicationInput, DocumentUncheckedUpdateWithoutApplicationInput>
  }

  export type DocumentUpdateManyWithWhereWithoutApplicationInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutApplicationInput>
  }

  export type DocumentRequestUpsertWithWhereUniqueWithoutApplicationInput = {
    where: DocumentRequestWhereUniqueInput
    update: XOR<DocumentRequestUpdateWithoutApplicationInput, DocumentRequestUncheckedUpdateWithoutApplicationInput>
    create: XOR<DocumentRequestCreateWithoutApplicationInput, DocumentRequestUncheckedCreateWithoutApplicationInput>
  }

  export type DocumentRequestUpdateWithWhereUniqueWithoutApplicationInput = {
    where: DocumentRequestWhereUniqueInput
    data: XOR<DocumentRequestUpdateWithoutApplicationInput, DocumentRequestUncheckedUpdateWithoutApplicationInput>
  }

  export type DocumentRequestUpdateManyWithWhereWithoutApplicationInput = {
    where: DocumentRequestScalarWhereInput
    data: XOR<DocumentRequestUpdateManyMutationInput, DocumentRequestUncheckedUpdateManyWithoutApplicationInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutApplicationInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutApplicationInput, NotificationUncheckedUpdateWithoutApplicationInput>
    create: XOR<NotificationCreateWithoutApplicationInput, NotificationUncheckedCreateWithoutApplicationInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutApplicationInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutApplicationInput, NotificationUncheckedUpdateWithoutApplicationInput>
  }

  export type NotificationUpdateManyWithWhereWithoutApplicationInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutApplicationInput>
  }

  export type ApplicationAuditLogUpsertWithWhereUniqueWithoutApplicationInput = {
    where: ApplicationAuditLogWhereUniqueInput
    update: XOR<ApplicationAuditLogUpdateWithoutApplicationInput, ApplicationAuditLogUncheckedUpdateWithoutApplicationInput>
    create: XOR<ApplicationAuditLogCreateWithoutApplicationInput, ApplicationAuditLogUncheckedCreateWithoutApplicationInput>
  }

  export type ApplicationAuditLogUpdateWithWhereUniqueWithoutApplicationInput = {
    where: ApplicationAuditLogWhereUniqueInput
    data: XOR<ApplicationAuditLogUpdateWithoutApplicationInput, ApplicationAuditLogUncheckedUpdateWithoutApplicationInput>
  }

  export type ApplicationAuditLogUpdateManyWithWhereWithoutApplicationInput = {
    where: ApplicationAuditLogScalarWhereInput
    data: XOR<ApplicationAuditLogUpdateManyMutationInput, ApplicationAuditLogUncheckedUpdateManyWithoutApplicationInput>
  }

  export type ApplicationCreateWithoutWorkflowInput = {
    id?: string
    rrNumber?: string | null
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceCategory: ServiceCategoryCreateNestedOneWithoutApplicationsInput
    citizen: UserCreateNestedOneWithoutApplicationsInput
    currentHolder?: UserCreateNestedOneWithoutCurrentHolderFilesInput
    validation?: ApplicationValidationCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutApplicationInput
    notifications?: NotificationCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutWorkflowInput = {
    id?: string
    rrNumber?: string | null
    serviceCategoryId: string
    citizenId: string
    status?: $Enums.ApplicationStatus
    currentHolderId?: string | null
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    validation?: ApplicationValidationUncheckedCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutApplicationInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutWorkflowInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutWorkflowInput, ApplicationUncheckedCreateWithoutWorkflowInput>
  }

  export type UserCreateWithoutWorkflowChangesInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileCreateNestedOneWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationCreateNestedManyWithoutCurrentHolderInput
    validations?: ApplicationValidationCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutPerformedByInput
  }

  export type UserUncheckedCreateWithoutWorkflowChangesInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileUncheckedCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileUncheckedCreateNestedOneWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationUncheckedCreateNestedManyWithoutCurrentHolderInput
    validations?: ApplicationValidationUncheckedCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentUncheckedCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutPerformedByInput
  }

  export type UserCreateOrConnectWithoutWorkflowChangesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkflowChangesInput, UserUncheckedCreateWithoutWorkflowChangesInput>
  }

  export type ApplicationUpsertWithoutWorkflowInput = {
    update: XOR<ApplicationUpdateWithoutWorkflowInput, ApplicationUncheckedUpdateWithoutWorkflowInput>
    create: XOR<ApplicationCreateWithoutWorkflowInput, ApplicationUncheckedCreateWithoutWorkflowInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutWorkflowInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutWorkflowInput, ApplicationUncheckedUpdateWithoutWorkflowInput>
  }

  export type ApplicationUpdateWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCategory?: ServiceCategoryUpdateOneRequiredWithoutApplicationsNestedInput
    citizen?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    currentHolder?: UserUpdateOneWithoutCurrentHolderFilesNestedInput
    validation?: ApplicationValidationUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serviceCategoryId?: StringFieldUpdateOperationsInput | string
    citizenId?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    currentHolderId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validation?: ApplicationValidationUncheckedUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type UserUpsertWithoutWorkflowChangesInput = {
    update: XOR<UserUpdateWithoutWorkflowChangesInput, UserUncheckedUpdateWithoutWorkflowChangesInput>
    create: XOR<UserCreateWithoutWorkflowChangesInput, UserUncheckedCreateWithoutWorkflowChangesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkflowChangesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkflowChangesInput, UserUncheckedUpdateWithoutWorkflowChangesInput>
  }

  export type UserUpdateWithoutWorkflowChangesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUpdateOneWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUpdateManyWithoutCurrentHolderNestedInput
    validations?: ApplicationValidationUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkflowChangesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUncheckedUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUncheckedUpdateOneWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUncheckedUpdateManyWithoutCurrentHolderNestedInput
    validations?: ApplicationValidationUncheckedUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUncheckedUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByNestedInput
  }

  export type ApplicationCreateWithoutValidationInput = {
    id?: string
    rrNumber?: string | null
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceCategory: ServiceCategoryCreateNestedOneWithoutApplicationsInput
    citizen: UserCreateNestedOneWithoutApplicationsInput
    currentHolder?: UserCreateNestedOneWithoutCurrentHolderFilesInput
    workflow?: ApplicationWorkflowCreateNestedManyWithoutApplicationInput
    officerAssignments?: OfficerAssignmentCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutApplicationInput
    notifications?: NotificationCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutValidationInput = {
    id?: string
    rrNumber?: string | null
    serviceCategoryId: string
    citizenId: string
    status?: $Enums.ApplicationStatus
    currentHolderId?: string | null
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow?: ApplicationWorkflowUncheckedCreateNestedManyWithoutApplicationInput
    officerAssignments?: OfficerAssignmentUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutApplicationInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutValidationInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutValidationInput, ApplicationUncheckedCreateWithoutValidationInput>
  }

  export type UserCreateWithoutValidationsInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileCreateNestedOneWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowCreateNestedManyWithoutChangedByInput
    verifiedDocuments?: DocumentCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutPerformedByInput
  }

  export type UserUncheckedCreateWithoutValidationsInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileUncheckedCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileUncheckedCreateNestedOneWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationUncheckedCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowUncheckedCreateNestedManyWithoutChangedByInput
    verifiedDocuments?: DocumentUncheckedCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutPerformedByInput
  }

  export type UserCreateOrConnectWithoutValidationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutValidationsInput, UserUncheckedCreateWithoutValidationsInput>
  }

  export type ApplicationUpsertWithoutValidationInput = {
    update: XOR<ApplicationUpdateWithoutValidationInput, ApplicationUncheckedUpdateWithoutValidationInput>
    create: XOR<ApplicationCreateWithoutValidationInput, ApplicationUncheckedCreateWithoutValidationInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutValidationInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutValidationInput, ApplicationUncheckedUpdateWithoutValidationInput>
  }

  export type ApplicationUpdateWithoutValidationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCategory?: ServiceCategoryUpdateOneRequiredWithoutApplicationsNestedInput
    citizen?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    currentHolder?: UserUpdateOneWithoutCurrentHolderFilesNestedInput
    workflow?: ApplicationWorkflowUpdateManyWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutValidationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serviceCategoryId?: StringFieldUpdateOperationsInput | string
    citizenId?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    currentHolderId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: ApplicationWorkflowUncheckedUpdateManyWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type UserUpsertWithoutValidationsInput = {
    update: XOR<UserUpdateWithoutValidationsInput, UserUncheckedUpdateWithoutValidationsInput>
    create: XOR<UserCreateWithoutValidationsInput, UserUncheckedCreateWithoutValidationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutValidationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutValidationsInput, UserUncheckedUpdateWithoutValidationsInput>
  }

  export type UserUpdateWithoutValidationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUpdateOneWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUpdateManyWithoutChangedByNestedInput
    verifiedDocuments?: DocumentUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUncheckedUpdateWithoutValidationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUncheckedUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUncheckedUpdateOneWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUncheckedUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUncheckedUpdateManyWithoutChangedByNestedInput
    verifiedDocuments?: DocumentUncheckedUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByNestedInput
  }

  export type ApplicationCreateWithoutOfficerAssignmentsInput = {
    id?: string
    rrNumber?: string | null
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceCategory: ServiceCategoryCreateNestedOneWithoutApplicationsInput
    citizen: UserCreateNestedOneWithoutApplicationsInput
    currentHolder?: UserCreateNestedOneWithoutCurrentHolderFilesInput
    workflow?: ApplicationWorkflowCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationCreateNestedOneWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutApplicationInput
    notifications?: NotificationCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutOfficerAssignmentsInput = {
    id?: string
    rrNumber?: string | null
    serviceCategoryId: string
    citizenId: string
    status?: $Enums.ApplicationStatus
    currentHolderId?: string | null
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow?: ApplicationWorkflowUncheckedCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationUncheckedCreateNestedOneWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutApplicationInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutOfficerAssignmentsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutOfficerAssignmentsInput, ApplicationUncheckedCreateWithoutOfficerAssignmentsInput>
  }

  export type UserCreateWithoutAssignmentsGivenInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileCreateNestedOneWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentCreateNestedManyWithoutUploadedByInput
    assignmentsReceived?: OfficerAssignmentCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutPerformedByInput
  }

  export type UserUncheckedCreateWithoutAssignmentsGivenInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileUncheckedCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileUncheckedCreateNestedOneWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationUncheckedCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowUncheckedCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationUncheckedCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentUncheckedCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    assignmentsReceived?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutPerformedByInput
  }

  export type UserCreateOrConnectWithoutAssignmentsGivenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignmentsGivenInput, UserUncheckedCreateWithoutAssignmentsGivenInput>
  }

  export type UserCreateWithoutAssignmentsReceivedInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileCreateNestedOneWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentCreateNestedManyWithoutAssignedByInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutPerformedByInput
  }

  export type UserUncheckedCreateWithoutAssignmentsReceivedInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileUncheckedCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileUncheckedCreateNestedOneWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationUncheckedCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowUncheckedCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationUncheckedCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentUncheckedCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutPerformedByInput
  }

  export type UserCreateOrConnectWithoutAssignmentsReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignmentsReceivedInput, UserUncheckedCreateWithoutAssignmentsReceivedInput>
  }

  export type ApplicationUpsertWithoutOfficerAssignmentsInput = {
    update: XOR<ApplicationUpdateWithoutOfficerAssignmentsInput, ApplicationUncheckedUpdateWithoutOfficerAssignmentsInput>
    create: XOR<ApplicationCreateWithoutOfficerAssignmentsInput, ApplicationUncheckedCreateWithoutOfficerAssignmentsInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutOfficerAssignmentsInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutOfficerAssignmentsInput, ApplicationUncheckedUpdateWithoutOfficerAssignmentsInput>
  }

  export type ApplicationUpdateWithoutOfficerAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCategory?: ServiceCategoryUpdateOneRequiredWithoutApplicationsNestedInput
    citizen?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    currentHolder?: UserUpdateOneWithoutCurrentHolderFilesNestedInput
    workflow?: ApplicationWorkflowUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUpdateOneWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutOfficerAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serviceCategoryId?: StringFieldUpdateOperationsInput | string
    citizenId?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    currentHolderId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: ApplicationWorkflowUncheckedUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUncheckedUpdateOneWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type UserUpsertWithoutAssignmentsGivenInput = {
    update: XOR<UserUpdateWithoutAssignmentsGivenInput, UserUncheckedUpdateWithoutAssignmentsGivenInput>
    create: XOR<UserCreateWithoutAssignmentsGivenInput, UserUncheckedCreateWithoutAssignmentsGivenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignmentsGivenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignmentsGivenInput, UserUncheckedUpdateWithoutAssignmentsGivenInput>
  }

  export type UserUpdateWithoutAssignmentsGivenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUpdateOneWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUpdateManyWithoutUploadedByNestedInput
    assignmentsReceived?: OfficerAssignmentUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignmentsGivenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUncheckedUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUncheckedUpdateOneWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUncheckedUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUncheckedUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUncheckedUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUncheckedUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    assignmentsReceived?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUpsertWithoutAssignmentsReceivedInput = {
    update: XOR<UserUpdateWithoutAssignmentsReceivedInput, UserUncheckedUpdateWithoutAssignmentsReceivedInput>
    create: XOR<UserCreateWithoutAssignmentsReceivedInput, UserUncheckedCreateWithoutAssignmentsReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignmentsReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignmentsReceivedInput, UserUncheckedUpdateWithoutAssignmentsReceivedInput>
  }

  export type UserUpdateWithoutAssignmentsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUpdateOneWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUpdateManyWithoutAssignedByNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignmentsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUncheckedUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUncheckedUpdateOneWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUncheckedUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUncheckedUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUncheckedUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUncheckedUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByNestedInput
  }

  export type ApplicationCreateWithoutDocumentsInput = {
    id?: string
    rrNumber?: string | null
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceCategory: ServiceCategoryCreateNestedOneWithoutApplicationsInput
    citizen: UserCreateNestedOneWithoutApplicationsInput
    currentHolder?: UserCreateNestedOneWithoutCurrentHolderFilesInput
    workflow?: ApplicationWorkflowCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutApplicationInput
    notifications?: NotificationCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutDocumentsInput = {
    id?: string
    rrNumber?: string | null
    serviceCategoryId: string
    citizenId: string
    status?: $Enums.ApplicationStatus
    currentHolderId?: string | null
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow?: ApplicationWorkflowUncheckedCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationUncheckedCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentUncheckedCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutApplicationInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutDocumentsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutDocumentsInput, ApplicationUncheckedCreateWithoutDocumentsInput>
  }

  export type UserCreateWithoutUploadedDocumentsInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileCreateNestedOneWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentCreateNestedManyWithoutVerifiedByInput
    assignmentsGiven?: OfficerAssignmentCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutPerformedByInput
  }

  export type UserUncheckedCreateWithoutUploadedDocumentsInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileUncheckedCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileUncheckedCreateNestedOneWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationUncheckedCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowUncheckedCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationUncheckedCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentUncheckedCreateNestedManyWithoutVerifiedByInput
    assignmentsGiven?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutPerformedByInput
  }

  export type UserCreateOrConnectWithoutUploadedDocumentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUploadedDocumentsInput, UserUncheckedCreateWithoutUploadedDocumentsInput>
  }

  export type UserCreateWithoutVerifiedDocumentsInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileCreateNestedOneWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationCreateNestedManyWithoutValidatedByInput
    uploadedDocuments?: DocumentCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutPerformedByInput
  }

  export type UserUncheckedCreateWithoutVerifiedDocumentsInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileUncheckedCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileUncheckedCreateNestedOneWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationUncheckedCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowUncheckedCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationUncheckedCreateNestedManyWithoutValidatedByInput
    uploadedDocuments?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutPerformedByInput
  }

  export type UserCreateOrConnectWithoutVerifiedDocumentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVerifiedDocumentsInput, UserUncheckedCreateWithoutVerifiedDocumentsInput>
  }

  export type ApplicationUpsertWithoutDocumentsInput = {
    update: XOR<ApplicationUpdateWithoutDocumentsInput, ApplicationUncheckedUpdateWithoutDocumentsInput>
    create: XOR<ApplicationCreateWithoutDocumentsInput, ApplicationUncheckedCreateWithoutDocumentsInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutDocumentsInput, ApplicationUncheckedUpdateWithoutDocumentsInput>
  }

  export type ApplicationUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCategory?: ServiceCategoryUpdateOneRequiredWithoutApplicationsNestedInput
    citizen?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    currentHolder?: UserUpdateOneWithoutCurrentHolderFilesNestedInput
    workflow?: ApplicationWorkflowUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serviceCategoryId?: StringFieldUpdateOperationsInput | string
    citizenId?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    currentHolderId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: ApplicationWorkflowUncheckedUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUncheckedUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUncheckedUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type UserUpsertWithoutUploadedDocumentsInput = {
    update: XOR<UserUpdateWithoutUploadedDocumentsInput, UserUncheckedUpdateWithoutUploadedDocumentsInput>
    create: XOR<UserCreateWithoutUploadedDocumentsInput, UserUncheckedCreateWithoutUploadedDocumentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUploadedDocumentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUploadedDocumentsInput, UserUncheckedUpdateWithoutUploadedDocumentsInput>
  }

  export type UserUpdateWithoutUploadedDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUpdateOneWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUpdateManyWithoutVerifiedByNestedInput
    assignmentsGiven?: OfficerAssignmentUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUploadedDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUncheckedUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUncheckedUpdateOneWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUncheckedUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUncheckedUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUncheckedUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUncheckedUpdateManyWithoutVerifiedByNestedInput
    assignmentsGiven?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUpsertWithoutVerifiedDocumentsInput = {
    update: XOR<UserUpdateWithoutVerifiedDocumentsInput, UserUncheckedUpdateWithoutVerifiedDocumentsInput>
    create: XOR<UserCreateWithoutVerifiedDocumentsInput, UserUncheckedCreateWithoutVerifiedDocumentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVerifiedDocumentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVerifiedDocumentsInput, UserUncheckedUpdateWithoutVerifiedDocumentsInput>
  }

  export type UserUpdateWithoutVerifiedDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUpdateOneWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUpdateManyWithoutValidatedByNestedInput
    uploadedDocuments?: DocumentUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUncheckedUpdateWithoutVerifiedDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUncheckedUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUncheckedUpdateOneWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUncheckedUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUncheckedUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUncheckedUpdateManyWithoutValidatedByNestedInput
    uploadedDocuments?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByNestedInput
  }

  export type ApplicationCreateWithoutDocumentRequestsInput = {
    id?: string
    rrNumber?: string | null
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceCategory: ServiceCategoryCreateNestedOneWithoutApplicationsInput
    citizen: UserCreateNestedOneWithoutApplicationsInput
    currentHolder?: UserCreateNestedOneWithoutCurrentHolderFilesInput
    workflow?: ApplicationWorkflowCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    notifications?: NotificationCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutDocumentRequestsInput = {
    id?: string
    rrNumber?: string | null
    serviceCategoryId: string
    citizenId: string
    status?: $Enums.ApplicationStatus
    currentHolderId?: string | null
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow?: ApplicationWorkflowUncheckedCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationUncheckedCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutDocumentRequestsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutDocumentRequestsInput, ApplicationUncheckedCreateWithoutDocumentRequestsInput>
  }

  export type UserCreateWithoutDocumentRequestsInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileCreateNestedOneWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentCreateNestedManyWithoutAssignedToInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutPerformedByInput
  }

  export type UserUncheckedCreateWithoutDocumentRequestsInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileUncheckedCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileUncheckedCreateNestedOneWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationUncheckedCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowUncheckedCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationUncheckedCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentUncheckedCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedToInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutPerformedByInput
  }

  export type UserCreateOrConnectWithoutDocumentRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentRequestsInput, UserUncheckedCreateWithoutDocumentRequestsInput>
  }

  export type ApplicationUpsertWithoutDocumentRequestsInput = {
    update: XOR<ApplicationUpdateWithoutDocumentRequestsInput, ApplicationUncheckedUpdateWithoutDocumentRequestsInput>
    create: XOR<ApplicationCreateWithoutDocumentRequestsInput, ApplicationUncheckedCreateWithoutDocumentRequestsInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutDocumentRequestsInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutDocumentRequestsInput, ApplicationUncheckedUpdateWithoutDocumentRequestsInput>
  }

  export type ApplicationUpdateWithoutDocumentRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCategory?: ServiceCategoryUpdateOneRequiredWithoutApplicationsNestedInput
    citizen?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    currentHolder?: UserUpdateOneWithoutCurrentHolderFilesNestedInput
    workflow?: ApplicationWorkflowUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutDocumentRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serviceCategoryId?: StringFieldUpdateOperationsInput | string
    citizenId?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    currentHolderId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: ApplicationWorkflowUncheckedUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUncheckedUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type UserUpsertWithoutDocumentRequestsInput = {
    update: XOR<UserUpdateWithoutDocumentRequestsInput, UserUncheckedUpdateWithoutDocumentRequestsInput>
    create: XOR<UserCreateWithoutDocumentRequestsInput, UserUncheckedCreateWithoutDocumentRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDocumentRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDocumentRequestsInput, UserUncheckedUpdateWithoutDocumentRequestsInput>
  }

  export type UserUpdateWithoutDocumentRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUpdateOneWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUpdateManyWithoutAssignedToNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUncheckedUpdateWithoutDocumentRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUncheckedUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUncheckedUpdateOneWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUncheckedUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUncheckedUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUncheckedUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUncheckedUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedToNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileCreateNestedOneWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutRequestedByInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutPerformedByInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileUncheckedCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileUncheckedCreateNestedOneWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationUncheckedCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowUncheckedCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationUncheckedCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentUncheckedCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutRequestedByInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutPerformedByInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type ApplicationCreateWithoutNotificationsInput = {
    id?: string
    rrNumber?: string | null
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceCategory: ServiceCategoryCreateNestedOneWithoutApplicationsInput
    citizen: UserCreateNestedOneWithoutApplicationsInput
    currentHolder?: UserCreateNestedOneWithoutCurrentHolderFilesInput
    workflow?: ApplicationWorkflowCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutNotificationsInput = {
    id?: string
    rrNumber?: string | null
    serviceCategoryId: string
    citizenId: string
    status?: $Enums.ApplicationStatus
    currentHolderId?: string | null
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow?: ApplicationWorkflowUncheckedCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationUncheckedCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutApplicationInput
    auditLogs?: ApplicationAuditLogUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutNotificationsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutNotificationsInput, ApplicationUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUpdateOneWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutRequestedByNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUncheckedUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUncheckedUpdateOneWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUncheckedUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUncheckedUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUncheckedUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUncheckedUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutRequestedByNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByNestedInput
  }

  export type ApplicationUpsertWithoutNotificationsInput = {
    update: XOR<ApplicationUpdateWithoutNotificationsInput, ApplicationUncheckedUpdateWithoutNotificationsInput>
    create: XOR<ApplicationCreateWithoutNotificationsInput, ApplicationUncheckedCreateWithoutNotificationsInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutNotificationsInput, ApplicationUncheckedUpdateWithoutNotificationsInput>
  }

  export type ApplicationUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCategory?: ServiceCategoryUpdateOneRequiredWithoutApplicationsNestedInput
    citizen?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    currentHolder?: UserUpdateOneWithoutCurrentHolderFilesNestedInput
    workflow?: ApplicationWorkflowUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serviceCategoryId?: StringFieldUpdateOperationsInput | string
    citizenId?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    currentHolderId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: ApplicationWorkflowUncheckedUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUncheckedUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateWithoutAuditLogsInput = {
    id?: string
    rrNumber?: string | null
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceCategory: ServiceCategoryCreateNestedOneWithoutApplicationsInput
    citizen: UserCreateNestedOneWithoutApplicationsInput
    currentHolder?: UserCreateNestedOneWithoutCurrentHolderFilesInput
    workflow?: ApplicationWorkflowCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentCreateNestedManyWithoutApplicationInput
    documents?: DocumentCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutApplicationInput
    notifications?: NotificationCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    rrNumber?: string | null
    serviceCategoryId: string
    citizenId: string
    status?: $Enums.ApplicationStatus
    currentHolderId?: string | null
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    workflow?: ApplicationWorkflowUncheckedCreateNestedManyWithoutApplicationInput
    validation?: ApplicationValidationUncheckedCreateNestedOneWithoutApplicationInput
    officerAssignments?: OfficerAssignmentUncheckedCreateNestedManyWithoutApplicationInput
    documents?: DocumentUncheckedCreateNestedManyWithoutApplicationInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutApplicationInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutAuditLogsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutAuditLogsInput, ApplicationUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileCreateNestedOneWithoutUserInput
    applications?: ApplicationCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    phone?: string | null
    passwordHash?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    citizenProfile?: CitizenProfileUncheckedCreateNestedOneWithoutUserInput
    officerProfile?: OfficerProfileUncheckedCreateNestedOneWithoutUserInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutCitizenInput
    currentHolderFiles?: ApplicationUncheckedCreateNestedManyWithoutCurrentHolderInput
    workflowChanges?: ApplicationWorkflowUncheckedCreateNestedManyWithoutChangedByInput
    validations?: ApplicationValidationUncheckedCreateNestedManyWithoutValidatedByInput
    verifiedDocuments?: DocumentUncheckedCreateNestedManyWithoutVerifiedByInput
    uploadedDocuments?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    assignmentsGiven?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    assignmentsReceived?: OfficerAssignmentUncheckedCreateNestedManyWithoutAssignedToInput
    documentRequests?: DocumentRequestUncheckedCreateNestedManyWithoutRequestedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type ApplicationUpsertWithoutAuditLogsInput = {
    update: XOR<ApplicationUpdateWithoutAuditLogsInput, ApplicationUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<ApplicationCreateWithoutAuditLogsInput, ApplicationUncheckedCreateWithoutAuditLogsInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutAuditLogsInput, ApplicationUncheckedUpdateWithoutAuditLogsInput>
  }

  export type ApplicationUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCategory?: ServiceCategoryUpdateOneRequiredWithoutApplicationsNestedInput
    citizen?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    currentHolder?: UserUpdateOneWithoutCurrentHolderFilesNestedInput
    workflow?: ApplicationWorkflowUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serviceCategoryId?: StringFieldUpdateOperationsInput | string
    citizenId?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    currentHolderId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: ApplicationWorkflowUncheckedUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUncheckedUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUpdateOneWithoutUserNestedInput
    applications?: ApplicationUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizenProfile?: CitizenProfileUncheckedUpdateOneWithoutUserNestedInput
    officerProfile?: OfficerProfileUncheckedUpdateOneWithoutUserNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutCitizenNestedInput
    currentHolderFiles?: ApplicationUncheckedUpdateManyWithoutCurrentHolderNestedInput
    workflowChanges?: ApplicationWorkflowUncheckedUpdateManyWithoutChangedByNestedInput
    validations?: ApplicationValidationUncheckedUpdateManyWithoutValidatedByNestedInput
    verifiedDocuments?: DocumentUncheckedUpdateManyWithoutVerifiedByNestedInput
    uploadedDocuments?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    assignmentsGiven?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    assignmentsReceived?: OfficerAssignmentUncheckedUpdateManyWithoutAssignedToNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutRequestedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ApplicationCreateManyCitizenInput = {
    id?: string
    rrNumber?: string | null
    serviceCategoryId: string
    status?: $Enums.ApplicationStatus
    currentHolderId?: string | null
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicationCreateManyCurrentHolderInput = {
    id?: string
    rrNumber?: string | null
    serviceCategoryId: string
    citizenId: string
    status?: $Enums.ApplicationStatus
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicationWorkflowCreateManyChangedByInput = {
    id?: string
    applicationId: string
    fromStatus?: $Enums.ApplicationStatus | null
    toStatus: $Enums.ApplicationStatus
    comments?: string | null
    createdAt?: Date | string
  }

  export type ApplicationValidationCreateManyValidatedByInput = {
    id?: string
    applicationId: string
    rrNumber: string
    isDocumentsComplete?: boolean
    isEligibilityVerified?: boolean
    validationNotes?: string | null
    createdAt?: Date | string
  }

  export type DocumentCreateManyVerifiedByInput = {
    id?: string
    applicationId: string
    documentType: $Enums.DocumentType
    fileName: string
    filePath: string
    fileSize: number
    uploadedById: string
    isVerified?: boolean
    verificationNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateManyUploadedByInput = {
    id?: string
    applicationId: string
    documentType: $Enums.DocumentType
    fileName: string
    filePath: string
    fileSize: number
    isVerified?: boolean
    verifiedById?: string | null
    verificationNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfficerAssignmentCreateManyAssignedByInput = {
    id?: string
    applicationId: string
    assignedToId: string
    expectedCompletionDate?: Date | string | null
    priority?: number
    instructions?: string | null
    createdAt?: Date | string
  }

  export type OfficerAssignmentCreateManyAssignedToInput = {
    id?: string
    applicationId: string
    assignedById: string
    expectedCompletionDate?: Date | string | null
    priority?: number
    instructions?: string | null
    createdAt?: Date | string
  }

  export type DocumentRequestCreateManyRequestedByInput = {
    id?: string
    applicationId: string
    documentType: $Enums.DocumentType
    reason?: string | null
    dueDate?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    notificationType: $Enums.NotificationType
    applicationId?: string | null
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type ApplicationAuditLogCreateManyPerformedByInput = {
    id?: string
    applicationId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type ApplicationUpdateWithoutCitizenInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCategory?: ServiceCategoryUpdateOneRequiredWithoutApplicationsNestedInput
    currentHolder?: UserUpdateOneWithoutCurrentHolderFilesNestedInput
    workflow?: ApplicationWorkflowUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutCitizenInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serviceCategoryId?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    currentHolderId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: ApplicationWorkflowUncheckedUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUncheckedUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutCitizenInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serviceCategoryId?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    currentHolderId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationUpdateWithoutCurrentHolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceCategory?: ServiceCategoryUpdateOneRequiredWithoutApplicationsNestedInput
    citizen?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    workflow?: ApplicationWorkflowUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutCurrentHolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serviceCategoryId?: StringFieldUpdateOperationsInput | string
    citizenId?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: ApplicationWorkflowUncheckedUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUncheckedUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutCurrentHolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    serviceCategoryId?: StringFieldUpdateOperationsInput | string
    citizenId?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationWorkflowUpdateWithoutChangedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableEnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus | null
    toStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutWorkflowNestedInput
  }

  export type ApplicationWorkflowUncheckedUpdateWithoutChangedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableEnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus | null
    toStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationWorkflowUncheckedUpdateManyWithoutChangedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableEnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus | null
    toStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationValidationUpdateWithoutValidatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: StringFieldUpdateOperationsInput | string
    isDocumentsComplete?: BoolFieldUpdateOperationsInput | boolean
    isEligibilityVerified?: BoolFieldUpdateOperationsInput | boolean
    validationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutValidationNestedInput
  }

  export type ApplicationValidationUncheckedUpdateWithoutValidatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    rrNumber?: StringFieldUpdateOperationsInput | string
    isDocumentsComplete?: BoolFieldUpdateOperationsInput | boolean
    isEligibilityVerified?: BoolFieldUpdateOperationsInput | boolean
    validationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationValidationUncheckedUpdateManyWithoutValidatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    rrNumber?: StringFieldUpdateOperationsInput | string
    isDocumentsComplete?: BoolFieldUpdateOperationsInput | boolean
    isEligibilityVerified?: BoolFieldUpdateOperationsInput | boolean
    validationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpdateWithoutVerifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutDocumentsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutVerifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    uploadedById?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyWithoutVerifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    uploadedById?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutDocumentsNestedInput
    verifiedBy?: UserUpdateOneWithoutVerifiedDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficerAssignmentUpdateWithoutAssignedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutOfficerAssignmentsNestedInput
    assignedTo?: UserUpdateOneRequiredWithoutAssignmentsReceivedNestedInput
  }

  export type OfficerAssignmentUncheckedUpdateWithoutAssignedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    assignedToId?: StringFieldUpdateOperationsInput | string
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficerAssignmentUncheckedUpdateManyWithoutAssignedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    assignedToId?: StringFieldUpdateOperationsInput | string
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficerAssignmentUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutOfficerAssignmentsNestedInput
    assignedBy?: UserUpdateOneRequiredWithoutAssignmentsGivenNestedInput
  }

  export type OfficerAssignmentUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficerAssignmentUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentRequestUpdateWithoutRequestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutDocumentRequestsNestedInput
  }

  export type DocumentRequestUncheckedUpdateWithoutRequestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentRequestUncheckedUpdateManyWithoutRequestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationAuditLogUpdateWithoutPerformedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type ApplicationAuditLogUncheckedUpdateWithoutPerformedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationAuditLogUncheckedUpdateManyWithoutPerformedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationCreateManyServiceCategoryInput = {
    id?: string
    rrNumber?: string | null
    citizenId: string
    status?: $Enums.ApplicationStatus
    currentHolderId?: string | null
    submittedAt?: Date | string | null
    validatedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicationUpdateWithoutServiceCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    citizen?: UserUpdateOneRequiredWithoutApplicationsNestedInput
    currentHolder?: UserUpdateOneWithoutCurrentHolderFilesNestedInput
    workflow?: ApplicationWorkflowUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutServiceCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    citizenId?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    currentHolderId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflow?: ApplicationWorkflowUncheckedUpdateManyWithoutApplicationNestedInput
    validation?: ApplicationValidationUncheckedUpdateOneWithoutApplicationNestedInput
    officerAssignments?: OfficerAssignmentUncheckedUpdateManyWithoutApplicationNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutApplicationNestedInput
    documentRequests?: DocumentRequestUncheckedUpdateManyWithoutApplicationNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicationNestedInput
    auditLogs?: ApplicationAuditLogUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutServiceCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    rrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    citizenId?: StringFieldUpdateOperationsInput | string
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    currentHolderId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationWorkflowCreateManyApplicationInput = {
    id?: string
    fromStatus?: $Enums.ApplicationStatus | null
    toStatus: $Enums.ApplicationStatus
    changedById: string
    comments?: string | null
    createdAt?: Date | string
  }

  export type OfficerAssignmentCreateManyApplicationInput = {
    id?: string
    assignedById: string
    assignedToId: string
    expectedCompletionDate?: Date | string | null
    priority?: number
    instructions?: string | null
    createdAt?: Date | string
  }

  export type DocumentCreateManyApplicationInput = {
    id?: string
    documentType: $Enums.DocumentType
    fileName: string
    filePath: string
    fileSize: number
    uploadedById: string
    isVerified?: boolean
    verifiedById?: string | null
    verificationNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentRequestCreateManyApplicationInput = {
    id?: string
    requestedById: string
    documentType: $Enums.DocumentType
    reason?: string | null
    dueDate?: Date | string | null
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyApplicationInput = {
    id?: string
    userId: string
    notificationType: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    readAt?: Date | string | null
    createdAt?: Date | string
  }

  export type ApplicationAuditLogCreateManyApplicationInput = {
    id?: string
    action: string
    performedById: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type ApplicationWorkflowUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableEnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus | null
    toStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    changedBy?: UserUpdateOneRequiredWithoutWorkflowChangesNestedInput
  }

  export type ApplicationWorkflowUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableEnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus | null
    toStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    changedById?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationWorkflowUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableEnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus | null
    toStatus?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    changedById?: StringFieldUpdateOperationsInput | string
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficerAssignmentUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: UserUpdateOneRequiredWithoutAssignmentsGivenNestedInput
    assignedTo?: UserUpdateOneRequiredWithoutAssignmentsReceivedNestedInput
  }

  export type OfficerAssignmentUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: StringFieldUpdateOperationsInput | string
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficerAssignmentUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: StringFieldUpdateOperationsInput | string
    expectedCompletionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedDocumentsNestedInput
    verifiedBy?: UserUpdateOneWithoutVerifiedDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    uploadedById?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    uploadedById?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    verificationNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentRequestUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestedBy?: UserUpdateOneRequiredWithoutDocumentRequestsNestedInput
  }

  export type DocumentRequestUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentRequestUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationAuditLogUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performedBy?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type ApplicationAuditLogUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    performedById?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationAuditLogUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    performedById?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}