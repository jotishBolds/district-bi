// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  CITIZEN
  FRONT_DESK // Validates applications and generates RR numbers
  DC // District Collector
  ADC // Additional District Collector
  RO // Revenue Officer
  ADMIN
  SUPER_ADMIN
}

enum ApplicationStatus {
  DRAFT // Citizen is still filling the form
  PENDING // Waiting for front desk validation
  VALIDATED // RR number assigned
  IN_PROGRESS // With assigned officer
  APPROVED // Final approval
  REJECTED // Application rejected
  COMPLETED // Process finished
}

enum DocumentType {
  ID_PROOF
  ADDRESS_PROOF
  APPLICATION_FORM
  SUPPORTING_DOCUMENT
  PAYMENT_RECEIPT
}

enum NotificationType {
  APPLICATION_SUBMITTED
  STATUS_CHANGED
  DOCUMENT_REQUESTED
  PAYMENT_REQUIRED
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  phone        String?   @unique
  passwordHash String?
  role         UserRole  @default(CITIZEN)
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  citizenProfile      CitizenProfile?
  officerProfile      OfficerProfile?
  applications        Application[]           @relation("CitizenApplications")
  currentHolderFiles  Application[]           @relation("CurrentHolder")
  workflowChanges     ApplicationWorkflow[]   @relation("ChangedBy")
  validations         ApplicationValidation[] @relation("ValidatedBy")
  verifiedDocuments   Document[]              @relation("VerifiedBy")
  uploadedDocuments   Document[]              @relation("UploadedBy")
  assignmentsGiven    OfficerAssignment[]     @relation("AssignedBy")
  assignmentsReceived OfficerAssignment[]     @relation("AssignedTo")
  documentRequests    DocumentRequest[]       @relation("RequestedBy")
  notifications       Notification[]
  auditLogs           ApplicationAuditLog[]   @relation("PerformedBy")

  @@map("users")
}

model CitizenProfile {
  id            String   @id @default(uuid())
  userId        String   @unique
  fullName      String
  phone         String
  address       String
  aadhaarNumber String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("citizen_profiles")
}

model OfficerProfile {
  id             String   @id @default(uuid())
  userId         String   @unique
  fullName       String
  designation    String
  department     String
  officeLocation String?
  isAvailable    Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("officer_profiles")
}

model ServiceCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  slaDays     Int // Service Level Agreement in days
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  applications Application[]

  @@map("service_categories")
}

model Application {
  id                String            @id @default(uuid())
  rrNumber          String?           @unique // Generated by front desk
  serviceCategoryId String
  citizenId         String
  status            ApplicationStatus @default(DRAFT)
  currentHolderId   String?
  submittedAt       DateTime?
  validatedAt       DateTime?
  completedAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  serviceCategory    ServiceCategory        @relation(fields: [serviceCategoryId], references: [id])
  citizen            User                   @relation("CitizenApplications", fields: [citizenId], references: [id])
  currentHolder      User?                  @relation("CurrentHolder", fields: [currentHolderId], references: [id])
  workflow           ApplicationWorkflow[]
  validation         ApplicationValidation?
  officerAssignments OfficerAssignment[]
  documents          Document[]
  documentRequests   DocumentRequest[]
  notifications      Notification[]
  auditLogs          ApplicationAuditLog[]

  @@map("applications")
}

model ApplicationWorkflow {
  id            String             @id @default(uuid())
  applicationId String
  fromStatus    ApplicationStatus?
  toStatus      ApplicationStatus
  changedById   String
  comments      String?
  createdAt     DateTime           @default(now())

  // Relations
  application Application @relation(fields: [applicationId], references: [id])
  changedBy   User        @relation("ChangedBy", fields: [changedById], references: [id])

  @@map("application_workflow")
}

model ApplicationValidation {
  id                    String   @id @default(uuid())
  applicationId         String   @unique
  validatedById         String
  rrNumber              String
  isDocumentsComplete   Boolean  @default(false)
  isEligibilityVerified Boolean  @default(false)
  validationNotes       String?
  createdAt             DateTime @default(now())

  // Relations
  application Application @relation(fields: [applicationId], references: [id])
  validatedBy User        @relation("ValidatedBy", fields: [validatedById], references: [id])

  @@map("application_validations")
}

model OfficerAssignment {
  id                     String    @id @default(uuid())
  applicationId          String
  assignedById           String
  assignedToId           String
  expectedCompletionDate DateTime?
  priority               Int       @default(2) // 1=High, 2=Medium, 3=Low
  instructions           String?
  createdAt              DateTime  @default(now())

  // Relations
  application Application @relation(fields: [applicationId], references: [id])
  assignedBy  User        @relation("AssignedBy", fields: [assignedById], references: [id])
  assignedTo  User        @relation("AssignedTo", fields: [assignedToId], references: [id])

  @@map("officer_assignments")
}

model Document {
  id                String       @id @default(uuid())
  applicationId     String
  documentType      DocumentType
  fileName          String
  filePath          String
  fileSize          Int // In bytes
  uploadedById      String
  isVerified        Boolean      @default(false)
  verifiedById      String?
  verificationNotes String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  application Application @relation(fields: [applicationId], references: [id])
  uploadedBy  User        @relation("UploadedBy", fields: [uploadedById], references: [id])
  verifiedBy  User?       @relation("VerifiedBy", fields: [verifiedById], references: [id])

  @@map("documents")
}

model DocumentRequest {
  id            String       @id @default(uuid())
  applicationId String
  requestedById String
  documentType  DocumentType
  reason        String?
  dueDate       DateTime?
  isCompleted   Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  application Application @relation(fields: [applicationId], references: [id])
  requestedBy User        @relation("RequestedBy", fields: [requestedById], references: [id])

  @@map("document_requests")
}

model Notification {
  id               String           @id @default(uuid())
  userId           String
  notificationType NotificationType
  applicationId    String?
  title            String
  message          String
  isRead           Boolean          @default(false)
  readAt           DateTime?
  createdAt        DateTime         @default(now())

  // Relations
  user        User         @relation(fields: [userId], references: [id])
  application Application? @relation(fields: [applicationId], references: [id])

  @@map("notifications")
}

model ApplicationAuditLog {
  id            String   @id @default(uuid())
  applicationId String
  action        String
  performedById String
  oldValues     Json?
  newValues     Json?
  ipAddress     String?
  createdAt     DateTime @default(now())

  // Relations
  application Application @relation(fields: [applicationId], references: [id])
  performedBy User        @relation("PerformedBy", fields: [performedById], references: [id])

  @@map("application_audit_logs")
}

model DailyReport {
  id                String   @id @default(uuid())
  reportDate        DateTime @db.Date
  totalApplications Int      @default(0)
  pendingValidation Int      @default(0)
  inProgress        Int      @default(0)
  completed         Int      @default(0)
  avgProcessingTime Int? // Stored in minutes
  createdAt         DateTime @default(now())

  @@map("daily_reports")
}

model SystemSetting {
  id           String   @id @default(uuid())
  settingKey   String   @unique
  settingValue String
  description  String?
  isPublic     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("system_settings")
}

// For handling password reset and email verification
model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  type       String // "EMAIL_VERIFICATION" or "PASSWORD_RESET" or "PHONE_VERIFICATION"

  @@unique([identifier, token])
  @@map("verification_tokens")
}
